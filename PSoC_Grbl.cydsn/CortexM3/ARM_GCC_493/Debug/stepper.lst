ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stepper.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.st_next_block_index,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  22              		.type	st_next_block_index, %function
  23              	st_next_block_index:
  24              	.LFB70:
  25              		.file 1 "stepper.c"
   1:stepper.c     **** /*
   2:stepper.c     ****   stepper.c - stepper motor driver: executes motion plans using stepper motors
   3:stepper.c     ****   Part of Grbl
   4:stepper.c     **** 
   5:stepper.c     ****   Copyright (c) 2011-2016 Sungeun K. Jeon for Gnea Research LLC
   6:stepper.c     ****   Copyright (c) 2009-2011 Simen Svale Skogsrud
   7:stepper.c     **** 
   8:stepper.c     ****   Grbl is free software: you can redistribute it and/or modify
   9:stepper.c     ****   it under the terms of the GNU General Public License as published by
  10:stepper.c     ****   the Free Software Foundation, either version 3 of the License, or
  11:stepper.c     ****   (at your option) any later version.
  12:stepper.c     **** 
  13:stepper.c     ****   Grbl is distributed in the hope that it will be useful,
  14:stepper.c     ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:stepper.c     ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:stepper.c     ****   GNU General Public License for more details.
  17:stepper.c     **** 
  18:stepper.c     ****   You should have received a copy of the GNU General Public License
  19:stepper.c     ****   along with Grbl.  If not, see <http://www.gnu.org/licenses/>.
  20:stepper.c     **** */
  21:stepper.c     **** 
  22:stepper.c     **** #include "grbl.h"
  23:stepper.c     **** 
  24:stepper.c     **** 
  25:stepper.c     **** // Some useful constants.
  26:stepper.c     **** #define DT_SEGMENT (1.0/(ACCELERATION_TICKS_PER_SECOND*60.0)) // min/segment
  27:stepper.c     **** #define REQ_MM_INCREMENT_SCALAR 1.25
  28:stepper.c     **** #define RAMP_ACCEL 0
  29:stepper.c     **** #define RAMP_CRUISE 1
  30:stepper.c     **** #define RAMP_DECEL 2
  31:stepper.c     **** #define RAMP_DECEL_OVERRIDE 3
  32:stepper.c     **** 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 2


  33:stepper.c     **** #define PREP_FLAG_RECALCULATE bit(0)
  34:stepper.c     **** #define PREP_FLAG_HOLD_PARTIAL_BLOCK bit(1)
  35:stepper.c     **** #define PREP_FLAG_PARKING bit(2)
  36:stepper.c     **** #define PREP_FLAG_DECEL_OVERRIDE bit(3)
  37:stepper.c     **** 
  38:stepper.c     **** // Define Adaptive Multi-Axis Step-Smoothing(AMASS) levels and cutoff frequencies. The highest leve
  39:stepper.c     **** // frequency bin starts at 0Hz and ends at its cutoff frequency. The next lower level frequency bin
  40:stepper.c     **** // starts at the next higher cutoff frequency, and so on. The cutoff frequencies for each level mus
  41:stepper.c     **** // be considered carefully against how much it over-drives the stepper ISR, the accuracy of the 16-
  42:stepper.c     **** // timer, and the CPU overhead. Level 0 (no AMASS, normal operation) frequency bin starts at the
  43:stepper.c     **** // Level 1 cutoff frequency and up to as fast as the CPU allows (over 30kHz in limited testing).
  44:stepper.c     **** // NOTE: AMASS cutoff frequency multiplied by ISR overdrive factor must not exceed maximum step fre
  45:stepper.c     **** // NOTE: Current settings are set to overdrive the ISR to no more than 16kHz, balancing CPU overhea
  46:stepper.c     **** // and timer accuracy.  Do not alter these settings unless you know what you are doing.
  47:stepper.c     **** #define MAX_AMASS_LEVEL 3
  48:stepper.c     **** // AMASS_LEVEL0: Normal operation. No AMASS. No upper cutoff frequency. Starts at LEVEL1 cutoff fre
  49:stepper.c     **** #define AMASS_LEVEL1 (F_CPU/8000) // Over-drives ISR (x2). Defined as F_CPU/(Cutoff frequency in Hz
  50:stepper.c     **** #define AMASS_LEVEL2 (F_CPU/4000) // Over-drives ISR (x4)
  51:stepper.c     **** #define AMASS_LEVEL3 (F_CPU/2000) // Over-drives ISR (x8)
  52:stepper.c     **** 
  53:stepper.c     **** 
  54:stepper.c     **** // Stores the planner block Bresenham algorithm execution data for the segments in the segment
  55:stepper.c     **** // buffer. Normally, this buffer is partially in-use, but, for the worst case scenario, it will
  56:stepper.c     **** // never exceed the number of accessible stepper buffer segments (SEGMENT_BUFFER_SIZE-1).
  57:stepper.c     **** // NOTE: This data is copied from the prepped planner blocks so that the planner blocks may be
  58:stepper.c     **** // discarded when entirely consumed and completed by the segment buffer. Also, AMASS alters this
  59:stepper.c     **** // data for its own use.
  60:stepper.c     **** typedef struct {
  61:stepper.c     ****   uint32_t steps[N_AXIS];
  62:stepper.c     ****   uint32_t step_event_count;
  63:stepper.c     ****   uint8_t direction_bits;
  64:stepper.c     ****   #ifdef VARIABLE_SPINDLE
  65:stepper.c     ****     uint8_t is_pwm_rate_adjusted; // Tracks motions that require constant laser power/rate
  66:stepper.c     ****   #endif
  67:stepper.c     **** } st_block_t;
  68:stepper.c     **** static st_block_t st_block_buffer[SEGMENT_BUFFER_SIZE-1];
  69:stepper.c     **** 
  70:stepper.c     **** // Primary stepper segment ring buffer. Contains small, short line segments for the stepper
  71:stepper.c     **** // algorithm to execute, which are "checked-out" incrementally from the first block in the
  72:stepper.c     **** // planner buffer. Once "checked-out", the steps in the segments buffer cannot be modified by
  73:stepper.c     **** // the planner, where the remaining planner block steps still can.
  74:stepper.c     **** typedef struct {
  75:stepper.c     ****   uint16_t n_step;           // Number of step events to be executed for this segment
  76:stepper.c     ****   uint16_t cycles_per_tick;  // Step distance traveled per ISR tick, aka step rate.
  77:stepper.c     ****   uint8_t  st_block_index;   // Stepper block data index. Uses this information to execute this seg
  78:stepper.c     ****   #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
  79:stepper.c     ****     uint8_t amass_level;    // Indicates AMASS level for the ISR to execute this segment
  80:stepper.c     ****   #else
  81:stepper.c     ****     uint8_t prescaler;      // Without AMASS, a prescaler is required to adjust for slow timing.
  82:stepper.c     ****   #endif
  83:stepper.c     ****   #ifdef VARIABLE_SPINDLE
  84:stepper.c     ****     uint8_t spindle_pwm;
  85:stepper.c     ****   #endif
  86:stepper.c     **** } segment_t;
  87:stepper.c     **** static segment_t segment_buffer[SEGMENT_BUFFER_SIZE];
  88:stepper.c     **** 
  89:stepper.c     **** // Stepper ISR data struct. Contains the running data for the main stepper ISR.
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 3


  90:stepper.c     **** typedef struct {
  91:stepper.c     ****   // Used by the bresenham line algorithm
  92:stepper.c     ****   uint32_t counter_x,        // Counter variables for the bresenham line tracer
  93:stepper.c     ****            counter_y,
  94:stepper.c     ****            counter_z;
  95:stepper.c     ****   #ifdef STEP_PULSE_DELAY
  96:stepper.c     ****     uint8_t step_bits;  // Stores out_bits output to complete the step pulse delay
  97:stepper.c     ****   #endif
  98:stepper.c     **** 
  99:stepper.c     ****   uint8_t execute_step;     // Flags step execution for each interrupt.
 100:stepper.c     ****   uint8_t step_pulse_time;  // Step pulse reset time after step rise
 101:stepper.c     ****   uint8_t step_outbits;         // The next stepping-bits to be output
 102:stepper.c     ****   uint8_t dir_outbits;
 103:stepper.c     ****   #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
 104:stepper.c     ****     uint32_t steps[N_AXIS];
 105:stepper.c     ****   #endif
 106:stepper.c     **** 
 107:stepper.c     ****   uint16_t step_count;       // Steps remaining in line segment motion
 108:stepper.c     ****   uint8_t exec_block_index; // Tracks the current st_block index. Change indicates new block.
 109:stepper.c     ****   st_block_t *exec_block;   // Pointer to the block data for the segment being executed
 110:stepper.c     ****   segment_t *exec_segment;  // Pointer to the segment being executed
 111:stepper.c     **** } stepper_t;
 112:stepper.c     **** static stepper_t st;
 113:stepper.c     **** 
 114:stepper.c     **** // Step segment ring buffer indices
 115:stepper.c     **** static volatile uint8_t segment_buffer_tail;
 116:stepper.c     **** static uint8_t segment_buffer_head;
 117:stepper.c     **** static uint8_t segment_next_head;
 118:stepper.c     **** 
 119:stepper.c     **** // Step and direction port invert masks.
 120:stepper.c     **** static uint8_t step_port_invert_mask;
 121:stepper.c     **** static uint8_t dir_port_invert_mask;
 122:stepper.c     **** 
 123:stepper.c     **** // Used to avoid ISR nesting of the "Stepper Driver Interrupt". Should never occur though.
 124:stepper.c     **** static volatile uint8_t busy;
 125:stepper.c     **** 
 126:stepper.c     **** // Pointers for the step segment being prepped from the planner buffer. Accessed only by the
 127:stepper.c     **** // main program. Pointers may be planning segments or planner blocks ahead of what being executed.
 128:stepper.c     **** static plan_block_t *pl_block;     // Pointer to the planner block being prepped
 129:stepper.c     **** static st_block_t *st_prep_block;  // Pointer to the stepper block data being prepped
 130:stepper.c     **** 
 131:stepper.c     **** // Segment preparation data struct. Contains all the necessary information to compute new segments
 132:stepper.c     **** // based on the current executing planner block.
 133:stepper.c     **** typedef struct {
 134:stepper.c     ****   uint8_t st_block_index;  // Index of stepper common data block being prepped
 135:stepper.c     ****   uint8_t recalculate_flag;
 136:stepper.c     **** 
 137:stepper.c     ****   float dt_remainder;
 138:stepper.c     ****   float steps_remaining;
 139:stepper.c     ****   float step_per_mm;
 140:stepper.c     ****   float req_mm_increment;
 141:stepper.c     **** 
 142:stepper.c     ****   #ifdef PARKING_ENABLE
 143:stepper.c     ****     uint8_t last_st_block_index;
 144:stepper.c     ****     float last_steps_remaining;
 145:stepper.c     ****     float last_step_per_mm;
 146:stepper.c     ****     float last_dt_remainder;
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 4


 147:stepper.c     ****   #endif
 148:stepper.c     **** 
 149:stepper.c     ****   uint8_t ramp_type;      // Current segment ramp state
 150:stepper.c     ****   float mm_complete;      // End of velocity profile from end of current planner block in (mm).
 151:stepper.c     ****                           // NOTE: This value must coincide with a step(no mantissa) when converted
 152:stepper.c     ****   float current_speed;    // Current speed at the end of the segment buffer (mm/min)
 153:stepper.c     ****   float maximum_speed;    // Maximum speed of executing block. Not always nominal speed. (mm/min)
 154:stepper.c     ****   float exit_speed;       // Exit speed of executing block (mm/min)
 155:stepper.c     ****   float accelerate_until; // Acceleration ramp end measured from end of block (mm)
 156:stepper.c     ****   float decelerate_after; // Deceleration ramp start measured from end of block (mm)
 157:stepper.c     **** 
 158:stepper.c     ****   #ifdef VARIABLE_SPINDLE
 159:stepper.c     ****     float inv_rate;    // Used by PWM laser mode to speed up segment calculations.
 160:stepper.c     ****     uint8_t current_spindle_pwm; 
 161:stepper.c     ****   #endif
 162:stepper.c     **** } st_prep_t;
 163:stepper.c     **** static st_prep_t prep;
 164:stepper.c     **** 
 165:stepper.c     **** 
 166:stepper.c     **** /*    BLOCK VELOCITY PROFILE DEFINITION
 167:stepper.c     ****           __________________________
 168:stepper.c     ****          /|                        |\     _________________         ^
 169:stepper.c     ****         / |                        | \   /|               |\        |
 170:stepper.c     ****        /  |                        |  \ / |               | \       s
 171:stepper.c     ****       /   |                        |   |  |               |  \      p
 172:stepper.c     ****      /    |                        |   |  |               |   \     e
 173:stepper.c     ****     +-----+------------------------+---+--+---------------+----+    e
 174:stepper.c     ****     |               BLOCK 1            ^      BLOCK 2          |    d
 175:stepper.c     ****                                        |
 176:stepper.c     ****                   time ----->      EXAMPLE: Block 2 entry speed is at max junction velocity
 177:stepper.c     **** 
 178:stepper.c     ****   The planner block buffer is planned assuming constant acceleration velocity profiles and are
 179:stepper.c     ****   continuously joined at block junctions as shown above. However, the planner only actively compute
 180:stepper.c     ****   the block entry speeds for an optimal velocity plan, but does not compute the block internal
 181:stepper.c     ****   velocity profiles. These velocity profiles are computed ad-hoc as they are executed by the
 182:stepper.c     ****   stepper algorithm and consists of only 7 possible types of profiles: cruise-only, cruise-
 183:stepper.c     ****   deceleration, acceleration-cruise, acceleration-only, deceleration-only, full-trapezoid, and
 184:stepper.c     ****   triangle(no cruise).
 185:stepper.c     **** 
 186:stepper.c     ****                                         maximum_speed (< nominal_speed) ->  +
 187:stepper.c     ****                     +--------+ <- maximum_speed (= nominal_speed)          /|\
 188:stepper.c     ****                    /          \                                           / | \
 189:stepper.c     ****  current_speed -> +            \                                         /  |  + <- exit_speed
 190:stepper.c     ****                   |             + <- exit_speed                         /   |  |
 191:stepper.c     ****                   +-------------+                     current_speed -> +----+--+
 192:stepper.c     ****                    time -->  ^  ^                                           ^  ^
 193:stepper.c     ****                              |  |                                           |  |
 194:stepper.c     ****                 decelerate_after(in mm)                             decelerate_after(in mm)
 195:stepper.c     ****                     ^           ^                                           ^  ^
 196:stepper.c     ****                     |           |                                           |  |
 197:stepper.c     ****                 accelerate_until(in mm)                             accelerate_until(in mm)
 198:stepper.c     **** 
 199:stepper.c     ****   The step segment buffer computes the executing block velocity profile and tracks the critical
 200:stepper.c     ****   parameters for the stepper algorithm to accurately trace the profile. These critical parameters
 201:stepper.c     ****   are shown and defined in the above illustration.
 202:stepper.c     **** */
 203:stepper.c     **** 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 5


 204:stepper.c     **** 
 205:stepper.c     **** // Stepper state initialization. Cycle should only start if the st.cycle_start flag is
 206:stepper.c     **** // enabled. Startup init and limits call this function but shouldn't start the cycle.
 207:stepper.c     **** void st_wake_up()
 208:stepper.c     **** {
 209:stepper.c     ****   // Enable stepper drivers.
 210:stepper.c     ****  // Enable stepper drivers.  
 211:stepper.c     ****   Control_Step_Enable_Write(1);
 212:stepper.c     **** 
 213:stepper.c     ****   // Initialize stepper output bits to ensure first ISR call does not step.
 214:stepper.c     ****   st.step_outbits = step_port_invert_mask;
 215:stepper.c     **** 
 216:stepper.c     ****   // Initialize step pulse timing from settings. Here to ensure updating after re-writing.
 217:stepper.c     ****   #ifdef STEP_PULSE_DELAY
 218:stepper.c     ****     // Set total step pulse time after direction pin set. Ad hoc computation from oscilloscope.
 219:stepper.c     ****     st.step_pulse_time = -(((settings.pulse_microseconds+STEP_PULSE_DELAY-2)*TICKS_PER_MICROSECOND)
 220:stepper.c     ****     // Set delay between direction pin write and step command.
 221:stepper.c     ****     OCR0A = -(((settings.pulse_microseconds)*TICKS_PER_MICROSECOND) >> 3);
 222:stepper.c     ****   #else // Normal operation
 223:stepper.c     ****     // Set step pulse time. Ad hoc computation from oscilloscope. Uses two's complement.
 224:stepper.c     ****     st.step_pulse_time = -(((settings.pulse_microseconds-2)*TICKS_PER_MICROSECOND) >> 3);
 225:stepper.c     ****   #endif
 226:stepper.c     **** 
 227:stepper.c     ****   // Enable Stepper Driver Interrupt
 228:stepper.c     ****  Stepper_Timer_Start();
 229:stepper.c     **** }
 230:stepper.c     **** 
 231:stepper.c     **** 
 232:stepper.c     **** // Stepper shutdown
 233:stepper.c     **** void st_go_idle()
 234:stepper.c     **** {
 235:stepper.c     ****   // Disable Stepper Driver Interrupt. Allow Stepper Port Reset Interrupt to finish, if active.
 236:stepper.c     ****   Stepper_Timer_Stop(); // PSoc Change
 237:stepper.c     ****   busy = false;
 238:stepper.c     **** 
 239:stepper.c     ****   // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
 240:stepper.c     ****   bool pin_state = false; // Keep enabled.
 241:stepper.c     ****   if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) 
 242:stepper.c     ****     // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a c
 243:stepper.c     ****     // stop and not drift from residual inertial forces at the end of the last movement.
 244:stepper.c     ****     delay_ms(settings.stepper_idle_lock_time);
 245:stepper.c     ****     pin_state = true; // Override. Disable steppers.   
 246:stepper.c     ****     
 247:stepper.c     ****     
 248:stepper.c     ****   }
 249:stepper.c     ****   
 250:stepper.c     ****   Control_Step_Enable_Write(0); // PSoc Change
 251:stepper.c     ****   
 252:stepper.c     **** }
 253:stepper.c     **** 
 254:stepper.c     **** 
 255:stepper.c     **** /* "The Stepper Driver Interrupt" - This timer interrupt is the workhorse of Grbl. Grbl employs
 256:stepper.c     ****    the venerable Bresenham line algorithm to manage and exactly synchronize multi-axis moves.
 257:stepper.c     ****    Unlike the popular DDA algorithm, the Bresenham algorithm is not susceptible to numerical
 258:stepper.c     ****    round-off errors and only requires fast integer counters, meaning low computational overhead
 259:stepper.c     ****    and maximizing the Arduino's capabilities. However, the downside of the Bresenham algorithm
 260:stepper.c     ****    is, for certain multi-axis motions, the non-dominant axes may suffer from un-smooth step
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 6


 261:stepper.c     ****    pulse trains, or aliasing, which can lead to strange audible noises or shaking. This is
 262:stepper.c     ****    particularly noticeable or may cause motion issues at low step frequencies (0-5kHz), but
 263:stepper.c     ****    is usually not a physical problem at higher frequencies, although audible.
 264:stepper.c     ****      To improve Bresenham multi-axis performance, Grbl uses what we call an Adaptive Multi-Axis
 265:stepper.c     ****    Step Smoothing (AMASS) algorithm, which does what the name implies. At lower step frequencies,
 266:stepper.c     ****    AMASS artificially increases the Bresenham resolution without effecting the algorithm's
 267:stepper.c     ****    innate exactness. AMASS adapts its resolution levels automatically depending on the step
 268:stepper.c     ****    frequency to be executed, meaning that for even lower step frequencies the step smoothing
 269:stepper.c     ****    level increases. Algorithmically, AMASS is acheived by a simple bit-shifting of the Bresenham
 270:stepper.c     ****    step count for each AMASS level. For example, for a Level 1 step smoothing, we bit shift
 271:stepper.c     ****    the Bresenham step event count, effectively multiplying it by 2, while the axis step counts
 272:stepper.c     ****    remain the same, and then double the stepper ISR frequency. In effect, we are allowing the
 273:stepper.c     ****    non-dominant Bresenham axes step in the intermediate ISR tick, while the dominant axis is
 274:stepper.c     ****    stepping every two ISR ticks, rather than every ISR tick in the traditional sense. At AMASS
 275:stepper.c     ****    Level 2, we simply bit-shift again, so the non-dominant Bresenham axes can step within any
 276:stepper.c     ****    of the four ISR ticks, the dominant axis steps every four ISR ticks, and quadruple the
 277:stepper.c     ****    stepper ISR frequency. And so on. This, in effect, virtually eliminates multi-axis aliasing
 278:stepper.c     ****    issues with the Bresenham algorithm and does not significantly alter Grbl's performance, but
 279:stepper.c     ****    in fact, more efficiently utilizes unused CPU cycles overall throughout all configurations.
 280:stepper.c     ****      AMASS retains the Bresenham algorithm exactness by requiring that it always executes a full
 281:stepper.c     ****    Bresenham step, regardless of AMASS Level. Meaning that for an AMASS Level 2, all four
 282:stepper.c     ****    intermediate steps must be completed such that baseline Bresenham (Level 0) count is always
 283:stepper.c     ****    retained. Similarly, AMASS Level 3 means all eight intermediate steps must be executed.
 284:stepper.c     ****    Although the AMASS Levels are in reality arbitrary, where the baseline Bresenham counts can
 285:stepper.c     ****    be multiplied by any integer value, multiplication by powers of two are simply used to ease
 286:stepper.c     ****    CPU overhead with bitshift integer operations.
 287:stepper.c     ****      This interrupt is simple and dumb by design. All the computational heavy-lifting, as in
 288:stepper.c     ****    determining accelerations, is performed elsewhere. This interrupt pops pre-computed segments,
 289:stepper.c     ****    defined as constant velocity over n number of steps, from the step segment buffer and then
 290:stepper.c     ****    executes them by pulsing the stepper pins appropriately via the Bresenham algorithm. This
 291:stepper.c     ****    ISR is supported by The Stepper Port Reset Interrupt which it uses to reset the stepper port
 292:stepper.c     ****    after each pulse. The bresenham line tracer algorithm controls all stepper outputs
 293:stepper.c     ****    simultaneously with these two interrupts.
 294:stepper.c     **** 
 295:stepper.c     ****    NOTE: This interrupt must be as efficient as possible and complete before the next ISR tick,
 296:stepper.c     ****    which for Grbl must be less than 33.3usec (@30kHz ISR rate). Oscilloscope measured time in
 297:stepper.c     ****    ISR is 5usec typical and 25usec maximum, well below requirement.
 298:stepper.c     ****    NOTE: This ISR expects at least one step to be executed per segment.
 299:stepper.c     **** */
 300:stepper.c     **** // TODO: Replace direct updating of the int32 position counters in the ISR somehow. Perhaps use sma
 301:stepper.c     **** // int8 variables and update position counters only when a segment completes. This can get complica
 302:stepper.c     **** // with probing and homing cycles that require true real-time positions.
 303:stepper.c     **** void stepper_timer_isr() //ISR(TIMER1_COMPA_vect)
 304:stepper.c     **** {
 305:stepper.c     ****   Stepper_Timer_ReadStatusRegister(); // clear the PSoc interrupt
 306:stepper.c     ****   
 307:stepper.c     ****   if (busy) { return; } // The busy-flag is used to avoid reentering this interrupt
 308:stepper.c     **** 
 309:stepper.c     ****   // Set the direction pins a couple of nanoseconds before we step the steppers
 310:stepper.c     ****    Control_Reg_Dir_Write(st.dir_outbits);
 311:stepper.c     **** 
 312:stepper.c     ****   // Then pulse the stepping pins
 313:stepper.c     ****   #ifdef STEP_PULSE_DELAY
 314:stepper.c     ****     st.step_bits = (STEP_PORT & ~STEP_MASK) | st.step_outbits; // Store out_bits to prevent overwri
 315:stepper.c     ****   #else  // Normal operation
 316:stepper.c     ****     Control_Reg_Step_Write(st.step_outbits);
 317:stepper.c     ****   #endif
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 7


 318:stepper.c     **** 
 319:stepper.c     ****  
 320:stepper.c     **** 
 321:stepper.c     ****   busy = true;
 322:stepper.c     ****   Stepper_Timer_Start(); //sei(); // Re-enable interrupts to allow Stepper Port Reset Interrupt to 
 323:stepper.c     ****          // NOTE: The remaining code in this ISR will finish before returning to main program.
 324:stepper.c     **** 
 325:stepper.c     ****   // If there is no step segment, attempt to pop one from the stepper buffer
 326:stepper.c     ****   if (st.exec_segment == NULL) {
 327:stepper.c     ****     // Anything in the buffer? If so, load and initialize next step segment.
 328:stepper.c     ****     if (segment_buffer_head != segment_buffer_tail) {
 329:stepper.c     ****       // Initialize new step segment and load number of steps to execute
 330:stepper.c     ****       st.exec_segment = &segment_buffer[segment_buffer_tail];
 331:stepper.c     **** 
 332:stepper.c     ****       #ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
 333:stepper.c     ****         // With AMASS is disabled, set timer prescaler for segments with slow step frequencies (< 2
 334:stepper.c     ****         TCCR1B = (TCCR1B & ~(0x07<<CS10)) | (st.exec_segment->prescaler<<CS10);
 335:stepper.c     ****       #endif
 336:stepper.c     **** 
 337:stepper.c     ****       // Initialize step segment timing per step and load number of steps to execute.
 338:stepper.c     ****       Stepper_Timer_WritePeriod(st.exec_segment->cycles_per_tick); // OCR1A = st.exec_segment->cycl
 339:stepper.c     ****       st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 340:stepper.c     ****       // If the new segment starts a new planner block, initialize stepper variables and counters.
 341:stepper.c     ****       // NOTE: When the segment data index changes, this indicates a new planner block.
 342:stepper.c     ****       if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 343:stepper.c     ****         st.exec_block_index = st.exec_segment->st_block_index;
 344:stepper.c     ****         st.exec_block = &st_block_buffer[st.exec_block_index];
 345:stepper.c     **** 
 346:stepper.c     ****         // Initialize Bresenham line and distance counters
 347:stepper.c     ****         st.counter_x = st.counter_y = st.counter_z = (st.exec_block->step_event_count >> 1);
 348:stepper.c     ****       }
 349:stepper.c     ****       st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 350:stepper.c     **** 
 351:stepper.c     ****       #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
 352:stepper.c     ****         // With AMASS enabled, adjust Bresenham axis increment counters according to AMASS level.
 353:stepper.c     ****         st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 354:stepper.c     ****         st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 355:stepper.c     ****         st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 356:stepper.c     ****       #endif
 357:stepper.c     **** 
 358:stepper.c     ****       #ifdef VARIABLE_SPINDLE
 359:stepper.c     ****         // Set real-time spindle output as segment is loaded, just prior to the first step.
 360:stepper.c     ****         spindle_set_speed(st.exec_segment->spindle_pwm);
 361:stepper.c     ****       #endif
 362:stepper.c     **** 
 363:stepper.c     ****     } else {
 364:stepper.c     ****       // Segment buffer empty. Shutdown.
 365:stepper.c     ****       st_go_idle();
 366:stepper.c     ****       #ifdef VARIABLE_SPINDLE
 367:stepper.c     ****         // Ensure pwm is set properly upon completion of rate-controlled motion.
 368:stepper.c     ****         if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 369:stepper.c     ****       #endif
 370:stepper.c     ****       system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 371:stepper.c     ****       return; // Nothing to do but exit.
 372:stepper.c     ****     }
 373:stepper.c     ****   }
 374:stepper.c     **** 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 8


 375:stepper.c     **** 
 376:stepper.c     ****   // Check probing state.
 377:stepper.c     ****   if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 378:stepper.c     **** 
 379:stepper.c     ****   // Reset step out bits.
 380:stepper.c     ****   st.step_outbits = 0;
 381:stepper.c     **** 
 382:stepper.c     ****   // Execute step displacement profile by Bresenham line algorithm
 383:stepper.c     ****   #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
 384:stepper.c     ****     st.counter_x += st.steps[X_AXIS];
 385:stepper.c     ****   #else
 386:stepper.c     ****     st.counter_x += st.exec_block->steps[X_AXIS];
 387:stepper.c     ****   #endif
 388:stepper.c     ****   if (st.counter_x > st.exec_block->step_event_count) {
 389:stepper.c     ****     st.step_outbits |= (1<<X_STEP_BIT);
 390:stepper.c     ****     st.counter_x -= st.exec_block->step_event_count;
 391:stepper.c     ****     if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 392:stepper.c     ****     else { sys_position[X_AXIS]++; }
 393:stepper.c     ****   }
 394:stepper.c     ****   #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
 395:stepper.c     ****     st.counter_y += st.steps[Y_AXIS];
 396:stepper.c     ****   #else
 397:stepper.c     ****     st.counter_y += st.exec_block->steps[Y_AXIS];
 398:stepper.c     ****   #endif
 399:stepper.c     ****   if (st.counter_y > st.exec_block->step_event_count) {
 400:stepper.c     ****     st.step_outbits |= (1<<Y_STEP_BIT);
 401:stepper.c     ****     st.counter_y -= st.exec_block->step_event_count;
 402:stepper.c     ****     if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 403:stepper.c     ****     else { sys_position[Y_AXIS]++; }
 404:stepper.c     ****   }
 405:stepper.c     ****   #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
 406:stepper.c     ****     st.counter_z += st.steps[Z_AXIS];
 407:stepper.c     ****   #else
 408:stepper.c     ****     st.counter_z += st.exec_block->steps[Z_AXIS];
 409:stepper.c     ****   #endif
 410:stepper.c     ****   if (st.counter_z > st.exec_block->step_event_count) {
 411:stepper.c     ****     st.step_outbits |= (1<<Z_STEP_BIT);
 412:stepper.c     ****     st.counter_z -= st.exec_block->step_event_count;
 413:stepper.c     ****     if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 414:stepper.c     ****     else { sys_position[Z_AXIS]++; }
 415:stepper.c     ****   }
 416:stepper.c     **** 
 417:stepper.c     ****   // During a homing cycle, lock out and prevent desired axes from moving.
 418:stepper.c     ****   if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 419:stepper.c     **** 
 420:stepper.c     ****   st.step_count--; // Decrement step events count
 421:stepper.c     ****   if (st.step_count == 0) {
 422:stepper.c     ****     // Segment is complete. Discard current segment and advance segment indexing.
 423:stepper.c     ****     st.exec_segment = NULL;
 424:stepper.c     ****     if ( ++segment_buffer_tail == SEGMENT_BUFFER_SIZE) { segment_buffer_tail = 0; }
 425:stepper.c     ****   }
 426:stepper.c     **** 
 427:stepper.c     ****   st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 428:stepper.c     ****   busy = false;
 429:stepper.c     **** }
 430:stepper.c     **** 
 431:stepper.c     **** 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 9


 432:stepper.c     **** /* The Stepper Port Reset Interrupt: Timer0 OVF interrupt handles the falling edge of the step
 433:stepper.c     ****    pulse. This should always trigger before the next Timer1 COMPA interrupt and independently
 434:stepper.c     ****    finish, if Timer1 is disabled after completing a move.
 435:stepper.c     ****    NOTE: Interrupt collisions between the serial and stepper interrupts can cause delays by
 436:stepper.c     ****    a few microseconds, if they execute right before one another. Not a big deal, but can
 437:stepper.c     ****    cause issues at high step rates if another high frequency asynchronous interrupt is
 438:stepper.c     ****    added to Grbl.
 439:stepper.c     **** */
 440:stepper.c     **** // This interrupt is enabled by ISR_TIMER1_COMPAREA when it sets the motor port bits to execute
 441:stepper.c     **** // a step. This ISR resets the motor port after a short period (settings.pulse_microseconds)
 442:stepper.c     **** // completing one step cycle.
 443:stepper.c     **** /*  don't need for PSoc
 444:stepper.c     **** ISR(TIMER0_OVF_vect)
 445:stepper.c     **** {
 446:stepper.c     ****   // Reset stepping pins (leave the direction pins)
 447:stepper.c     ****   STEP_PORT = (STEP_PORT & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK);
 448:stepper.c     ****   TCCR0B = 0; // Disable Timer0 to prevent re-entering this interrupt when it's not needed.
 449:stepper.c     **** }
 450:stepper.c     **** */
 451:stepper.c     **** #ifdef STEP_PULSE_DELAY
 452:stepper.c     ****   // Not needed in PSoC
 453:stepper.c     **** #endif
 454:stepper.c     **** 
 455:stepper.c     **** 
 456:stepper.c     **** // Generates the step and direction port invert masks used in the Stepper Interrupt Driver.
 457:stepper.c     **** void st_generate_step_dir_invert_masks()
 458:stepper.c     **** {
 459:stepper.c     ****   uint8_t idx;
 460:stepper.c     ****   step_port_invert_mask = 0;
 461:stepper.c     ****   dir_port_invert_mask = 0;
 462:stepper.c     ****   for (idx=0; idx<N_AXIS; idx++) {
 463:stepper.c     ****     if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= get_step_pin_mas
 464:stepper.c     ****     if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= get_direction_pin_
 465:stepper.c     ****   }
 466:stepper.c     **** }
 467:stepper.c     **** 
 468:stepper.c     **** 
 469:stepper.c     **** // Reset and clear stepper subsystem variables
 470:stepper.c     **** void st_reset()
 471:stepper.c     **** {
 472:stepper.c     ****   // Initialize stepper driver idle state.
 473:stepper.c     ****   st_go_idle();
 474:stepper.c     **** 
 475:stepper.c     ****   // Initialize stepper algorithm variables.
 476:stepper.c     ****   memset(&prep, 0, sizeof(st_prep_t));
 477:stepper.c     ****   memset(&st, 0, sizeof(stepper_t));
 478:stepper.c     ****   st.exec_segment = NULL;
 479:stepper.c     ****   pl_block = NULL;  // Planner block pointer used by segment buffer
 480:stepper.c     ****   segment_buffer_tail = 0;
 481:stepper.c     ****   segment_buffer_head = 0; // empty = tail
 482:stepper.c     ****   segment_next_head = 1;
 483:stepper.c     ****   busy = false;
 484:stepper.c     **** 
 485:stepper.c     ****   st_generate_step_dir_invert_masks();
 486:stepper.c     ****   st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 487:stepper.c     **** 
 488:stepper.c     ****   // Initialize step and direction port pins.
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 10


 489:stepper.c     ****   Control_Reg_Step_Write(0b111 | step_port_invert_mask);
 490:stepper.c     ****   //STEP_PORT = (STEP_PORT & ~STEP_MASK) | step_port_invert_mask;
 491:stepper.c     ****   Control_Reg_Dir_Write(0b111 | dir_port_invert_mask);
 492:stepper.c     ****   //DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | dir_port_invert_mask;
 493:stepper.c     **** }
 494:stepper.c     **** 
 495:stepper.c     **** 
 496:stepper.c     **** // Initialize and start the stepper motor subsystem
 497:stepper.c     **** void stepper_init()
 498:stepper.c     **** {
 499:stepper.c     ****   Clock_Step_Pulse_Start();
 500:stepper.c     ****   isr_Step_StartEx(stepper_timer_isr);
 501:stepper.c     **** }
 502:stepper.c     **** 
 503:stepper.c     **** 
 504:stepper.c     **** // Called by planner_recalculate() when the executing block is updated by the new plan.
 505:stepper.c     **** void st_update_plan_block_parameters()
 506:stepper.c     **** {
 507:stepper.c     ****   if (pl_block != NULL) { // Ignore if at start of a new block.
 508:stepper.c     ****     prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 509:stepper.c     ****     pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 510:stepper.c     ****     pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 511:stepper.c     ****   }
 512:stepper.c     **** }
 513:stepper.c     **** 
 514:stepper.c     **** 
 515:stepper.c     **** // Increments the step segment buffer block data ring buffer.
 516:stepper.c     **** static uint8_t st_next_block_index(uint8_t block_index)
 517:stepper.c     **** {
  26              		.loc 1 517 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 518:stepper.c     ****   block_index++;
  32              		.loc 1 518 0
  33 0000 0130     		adds	r0, r0, #1
  34              	.LVL1:
  35 0002 C0B2     		uxtb	r0, r0
  36              	.LVL2:
 519:stepper.c     ****   if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
  37              		.loc 1 519 0
  38 0004 0528     		cmp	r0, #5
  39 0006 00D1     		bne	.L2
  40 0008 0020     		movs	r0, #0
  41              	.LVL3:
  42              	.L2:
 520:stepper.c     ****   return(block_index);
 521:stepper.c     **** }
  43              		.loc 1 521 0
  44 000a 7047     		bx	lr
  45              		.cfi_endproc
  46              	.LFE70:
  47              		.size	st_next_block_index, .-st_next_block_index
  48              		.section	.text.st_wake_up,"ax",%progbits
  49              		.align	2
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 11


  50              		.global	st_wake_up
  51              		.thumb
  52              		.thumb_func
  53              		.type	st_wake_up, %function
  54              	st_wake_up:
  55              	.LFB63:
 208:stepper.c     ****   // Enable stepper drivers.
  56              		.loc 1 208 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60 0000 08B5     		push	{r3, lr}
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 3, -8
  63              		.cfi_offset 14, -4
 211:stepper.c     **** 
  64              		.loc 1 211 0
  65 0002 0120     		movs	r0, #1
  66 0004 FFF7FEFF 		bl	Control_Step_Enable_Write
  67              	.LVL4:
 214:stepper.c     **** 
  68              		.loc 1 214 0
  69 0008 084A     		ldr	r2, .L6
  70 000a 92F82830 		ldrb	r3, [r2, #40]	@ zero_extendqisi2
  71 000e 9373     		strb	r3, [r2, #14]
 224:stepper.c     ****   #endif
  72              		.loc 1 224 0
  73 0010 074B     		ldr	r3, .L6+4
  74 0012 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
  75 0016 023B     		subs	r3, r3, #2
  76 0018 03EB4303 		add	r3, r3, r3, lsl #1
  77 001c DB00     		lsls	r3, r3, #3
  78 001e DB08     		lsrs	r3, r3, #3
  79 0020 5B42     		negs	r3, r3
  80 0022 5373     		strb	r3, [r2, #13]
 228:stepper.c     **** }
  81              		.loc 1 228 0
  82 0024 FFF7FEFF 		bl	Stepper_Timer_Start
  83              	.LVL5:
  84 0028 08BD     		pop	{r3, pc}
  85              	.L7:
  86 002a 00BF     		.align	2
  87              	.L6:
  88 002c 00000000 		.word	.LANCHOR0
  89 0030 00000000 		.word	settings
  90              		.cfi_endproc
  91              	.LFE63:
  92              		.size	st_wake_up, .-st_wake_up
  93              		.section	.text.st_go_idle,"ax",%progbits
  94              		.align	2
  95              		.global	st_go_idle
  96              		.thumb
  97              		.thumb_func
  98              		.type	st_go_idle, %function
  99              	st_go_idle:
 100              	.LFB64:
 234:stepper.c     ****   // Disable Stepper Driver Interrupt. Allow Stepper Port Reset Interrupt to finish, if active.
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 12


 101              		.loc 1 234 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105 0000 08B5     		push	{r3, lr}
 106              		.cfi_def_cfa_offset 8
 107              		.cfi_offset 3, -8
 108              		.cfi_offset 14, -4
 236:stepper.c     ****   busy = false;
 109              		.loc 1 236 0
 110 0002 FFF7FEFF 		bl	Stepper_Timer_Stop
 111              	.LVL6:
 237:stepper.c     **** 
 112              		.loc 1 237 0
 113 0006 0022     		movs	r2, #0
 114 0008 0D4B     		ldr	r3, .L12
 115 000a 83F82920 		strb	r2, [r3, #41]
 116              	.LVL7:
 241:stepper.c     ****     // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a c
 117              		.loc 1 241 0
 118 000e 0D4B     		ldr	r3, .L12+4
 119 0010 93F83300 		ldrb	r0, [r3, #51]	@ zero_extendqisi2
 120 0014 FF28     		cmp	r0, #255
 121 0016 08D1     		bne	.L9
 241:stepper.c     ****     // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a c
 122              		.loc 1 241 0 is_stmt 0 discriminator 2
 123 0018 0B4B     		ldr	r3, .L12+8
 124 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 125 001c 13F0FF0F 		tst	r3, #255
 126 0020 03D1     		bne	.L9
 241:stepper.c     ****     // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a c
 127              		.loc 1 241 0 discriminator 4
 128 0022 0A4B     		ldr	r3, .L12+12
 129 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 130 0026 802B     		cmp	r3, #128
 131 0028 05D1     		bne	.L10
 132              	.L9:
 241:stepper.c     ****     // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a c
 133              		.loc 1 241 0 discriminator 5
 134 002a 084B     		ldr	r3, .L12+12
 135 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 136 002e 042B     		cmp	r3, #4
 137 0030 01D0     		beq	.L10
 244:stepper.c     ****     pin_state = true; // Override. Disable steppers.   
 138              		.loc 1 244 0 is_stmt 1
 139 0032 FFF7FEFF 		bl	CyDelay
 140              	.LVL8:
 141              	.L10:
 250:stepper.c     ****   
 142              		.loc 1 250 0
 143 0036 0020     		movs	r0, #0
 144 0038 FFF7FEFF 		bl	Control_Step_Enable_Write
 145              	.LVL9:
 146 003c 08BD     		pop	{r3, pc}
 147              	.L13:
 148 003e 00BF     		.align	2
 149              	.L12:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 13


 150 0040 00000000 		.word	.LANCHOR0
 151 0044 00000000 		.word	settings
 152 0048 00000000 		.word	sys_rt_exec_alarm
 153 004c 00000000 		.word	sys
 154              		.cfi_endproc
 155              	.LFE64:
 156              		.size	st_go_idle, .-st_go_idle
 157              		.section	.text.stepper_timer_isr,"ax",%progbits
 158              		.align	2
 159              		.global	stepper_timer_isr
 160              		.thumb
 161              		.thumb_func
 162              		.type	stepper_timer_isr, %function
 163              	stepper_timer_isr:
 164              	.LFB65:
 304:stepper.c     ****   Stepper_Timer_ReadStatusRegister(); // clear the PSoc interrupt
 165              		.loc 1 304 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169 0000 10B5     		push	{r4, lr}
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 4, -8
 172              		.cfi_offset 14, -4
 305:stepper.c     ****   
 173              		.loc 1 305 0
 174 0002 FFF7FEFF 		bl	Stepper_Timer_ReadStatusRegister
 175              	.LVL10:
 307:stepper.c     **** 
 176              		.loc 1 307 0
 177 0006 724B     		ldr	r3, .L30
 178 0008 93F82930 		ldrb	r3, [r3, #41]	@ zero_extendqisi2
 179 000c 13F0FF0F 		tst	r3, #255
 180 0010 40F0DC80 		bne	.L14
 310:stepper.c     **** 
 181              		.loc 1 310 0
 182 0014 6E4C     		ldr	r4, .L30
 183 0016 E07B     		ldrb	r0, [r4, #15]	@ zero_extendqisi2
 184 0018 FFF7FEFF 		bl	Control_Reg_Dir_Write
 185              	.LVL11:
 316:stepper.c     ****   #endif
 186              		.loc 1 316 0
 187 001c A07B     		ldrb	r0, [r4, #14]	@ zero_extendqisi2
 188 001e FFF7FEFF 		bl	Control_Reg_Step_Write
 189              	.LVL12:
 321:stepper.c     ****   Stepper_Timer_Start(); //sei(); // Re-enable interrupts to allow Stepper Port Reset Interrupt to 
 190              		.loc 1 321 0
 191 0022 0123     		movs	r3, #1
 192 0024 84F82930 		strb	r3, [r4, #41]
 322:stepper.c     ****          // NOTE: The remaining code in this ISR will finish before returning to main program.
 193              		.loc 1 322 0
 194 0028 FFF7FEFF 		bl	Stepper_Timer_Start
 195              	.LVL13:
 326:stepper.c     ****     // Anything in the buffer? If so, load and initialize next step segment.
 196              		.loc 1 326 0
 197 002c 636A     		ldr	r3, [r4, #36]
 198 002e 002B     		cmp	r3, #0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 14


 199 0030 47D1     		bne	.L16
 328:stepper.c     ****       // Initialize new step segment and load number of steps to execute
 200              		.loc 1 328 0
 201 0032 94F82B20 		ldrb	r2, [r4, #43]	@ zero_extendqisi2
 202 0036 94F82A30 		ldrb	r3, [r4, #42]	@ zero_extendqisi2
 203 003a 9342     		cmp	r3, r2
 204 003c 34D0     		beq	.L17
 330:stepper.c     **** 
 205              		.loc 1 330 0
 206 003e 94F82B20 		ldrb	r2, [r4, #43]	@ zero_extendqisi2
 207 0042 04F12C03 		add	r3, r4, #44
 208 0046 03EBC203 		add	r3, r3, r2, lsl #3
 209 004a 6362     		str	r3, [r4, #36]
 338:stepper.c     ****       st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 210              		.loc 1 338 0
 211 004c 5888     		ldrh	r0, [r3, #2]
 212 004e FFF7FEFF 		bl	Stepper_Timer_WritePeriod
 213              	.LVL14:
 339:stepper.c     ****       // If the new segment starts a new planner block, initialize stepper variables and counters.
 214              		.loc 1 339 0
 215 0052 626A     		ldr	r2, [r4, #36]
 216 0054 1388     		ldrh	r3, [r2]
 217 0056 A383     		strh	r3, [r4, #28]	@ movhi
 342:stepper.c     ****         st.exec_block_index = st.exec_segment->st_block_index;
 218              		.loc 1 342 0
 219 0058 A17F     		ldrb	r1, [r4, #30]	@ zero_extendqisi2
 220 005a 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 221 005c 9942     		cmp	r1, r3
 222 005e 0CD0     		beq	.L18
 343:stepper.c     ****         st.exec_block = &st_block_buffer[st.exec_block_index];
 223              		.loc 1 343 0
 224 0060 A377     		strb	r3, [r4, #30]
 344:stepper.c     **** 
 225              		.loc 1 344 0
 226 0062 04F15C00 		add	r0, r4, #92
 227 0066 03EB8303 		add	r3, r3, r3, lsl #2
 228 006a 9B00     		lsls	r3, r3, #2
 229 006c 0344     		add	r3, r3, r0
 230 006e 2362     		str	r3, [r4, #32]
 347:stepper.c     ****       }
 231              		.loc 1 347 0
 232 0070 DB68     		ldr	r3, [r3, #12]
 233 0072 5B08     		lsrs	r3, r3, #1
 234 0074 A360     		str	r3, [r4, #8]
 235 0076 6360     		str	r3, [r4, #4]
 236 0078 2360     		str	r3, [r4]
 237              	.L18:
 349:stepper.c     **** 
 238              		.loc 1 349 0
 239 007a 554B     		ldr	r3, .L30
 240 007c 196A     		ldr	r1, [r3, #32]
 241 007e 0C7C     		ldrb	r4, [r1, #16]	@ zero_extendqisi2
 242 0080 93F8C000 		ldrb	r0, [r3, #192]	@ zero_extendqisi2
 243 0084 6040     		eors	r0, r0, r4
 244 0086 D873     		strb	r0, [r3, #15]
 353:stepper.c     ****         st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 245              		.loc 1 353 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 15


 246 0088 0868     		ldr	r0, [r1]
 247 008a 5479     		ldrb	r4, [r2, #5]	@ zero_extendqisi2
 248 008c E040     		lsrs	r0, r0, r4
 249 008e 1861     		str	r0, [r3, #16]
 354:stepper.c     ****         st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 250              		.loc 1 354 0
 251 0090 4868     		ldr	r0, [r1, #4]
 252 0092 5479     		ldrb	r4, [r2, #5]	@ zero_extendqisi2
 253 0094 E040     		lsrs	r0, r0, r4
 254 0096 5861     		str	r0, [r3, #20]
 355:stepper.c     ****       #endif
 255              		.loc 1 355 0
 256 0098 8968     		ldr	r1, [r1, #8]
 257 009a 5079     		ldrb	r0, [r2, #5]	@ zero_extendqisi2
 258 009c C140     		lsrs	r1, r1, r0
 259 009e 9961     		str	r1, [r3, #24]
 360:stepper.c     ****       #endif
 260              		.loc 1 360 0
 261 00a0 9079     		ldrb	r0, [r2, #6]	@ zero_extendqisi2
 262 00a2 FFF7FEFF 		bl	spindle_set_speed
 263              	.LVL15:
 264 00a6 0CE0     		b	.L16
 265              	.L17:
 365:stepper.c     ****       #ifdef VARIABLE_SPINDLE
 266              		.loc 1 365 0
 267 00a8 FFF7FEFF 		bl	st_go_idle
 268              	.LVL16:
 368:stepper.c     ****       #endif
 269              		.loc 1 368 0
 270 00ac 484B     		ldr	r3, .L30
 271 00ae 1B6A     		ldr	r3, [r3, #32]
 272 00b0 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 273 00b2 13B1     		cbz	r3, .L19
 368:stepper.c     ****       #endif
 274              		.loc 1 368 0 is_stmt 0 discriminator 1
 275 00b4 0020     		movs	r0, #0
 276 00b6 FFF7FEFF 		bl	spindle_set_speed
 277              	.LVL17:
 278              	.L19:
 370:stepper.c     ****       return; // Nothing to do but exit.
 279              		.loc 1 370 0 is_stmt 1
 280 00ba 0420     		movs	r0, #4
 281 00bc FFF7FEFF 		bl	system_set_exec_state_flag
 282              	.LVL18:
 371:stepper.c     ****     }
 283              		.loc 1 371 0
 284 00c0 10BD     		pop	{r4, pc}
 285              	.L16:
 377:stepper.c     **** 
 286              		.loc 1 377 0
 287 00c2 444B     		ldr	r3, .L30+4
 288 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 289 00c6 DBB2     		uxtb	r3, r3
 290 00c8 012B     		cmp	r3, #1
 291 00ca 01D1     		bne	.L20
 377:stepper.c     **** 
 292              		.loc 1 377 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 16


 293 00cc FFF7FEFF 		bl	probe_state_monitor
 294              	.LVL19:
 295              	.L20:
 380:stepper.c     **** 
 296              		.loc 1 380 0 is_stmt 1
 297 00d0 3F49     		ldr	r1, .L30
 298 00d2 0023     		movs	r3, #0
 299 00d4 8B73     		strb	r3, [r1, #14]
 384:stepper.c     ****   #else
 300              		.loc 1 384 0
 301 00d6 0A69     		ldr	r2, [r1, #16]
 302 00d8 0B68     		ldr	r3, [r1]
 303 00da 1A44     		add	r2, r2, r3
 304 00dc 0A60     		str	r2, [r1]
 388:stepper.c     ****     st.step_outbits |= (1<<X_STEP_BIT);
 305              		.loc 1 388 0
 306 00de 0B6A     		ldr	r3, [r1, #32]
 307 00e0 D968     		ldr	r1, [r3, #12]
 308 00e2 8A42     		cmp	r2, r1
 309 00e4 12D9     		bls	.L21
 389:stepper.c     ****     st.counter_x -= st.exec_block->step_event_count;
 310              		.loc 1 389 0
 311 00e6 3A49     		ldr	r1, .L30
 312 00e8 0120     		movs	r0, #1
 313 00ea 8873     		strb	r0, [r1, #14]
 390:stepper.c     ****     if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 314              		.loc 1 390 0
 315 00ec D868     		ldr	r0, [r3, #12]
 316 00ee 121A     		subs	r2, r2, r0
 317 00f0 0A60     		str	r2, [r1]
 391:stepper.c     ****     else { sys_position[X_AXIS]++; }
 318              		.loc 1 391 0
 319 00f2 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
 320 00f4 12F0010F 		tst	r2, #1
 321 00f8 04D0     		beq	.L22
 391:stepper.c     ****     else { sys_position[X_AXIS]++; }
 322              		.loc 1 391 0 is_stmt 0 discriminator 1
 323 00fa 3749     		ldr	r1, .L30+8
 324 00fc 0A68     		ldr	r2, [r1]
 325 00fe 013A     		subs	r2, r2, #1
 326 0100 0A60     		str	r2, [r1]
 327 0102 03E0     		b	.L21
 328              	.L22:
 392:stepper.c     ****   }
 329              		.loc 1 392 0 is_stmt 1
 330 0104 3449     		ldr	r1, .L30+8
 331 0106 0A68     		ldr	r2, [r1]
 332 0108 0132     		adds	r2, r2, #1
 333 010a 0A60     		str	r2, [r1]
 334              	.L21:
 395:stepper.c     ****   #else
 335              		.loc 1 395 0
 336 010c 3049     		ldr	r1, .L30
 337 010e 4869     		ldr	r0, [r1, #20]
 338 0110 4A68     		ldr	r2, [r1, #4]
 339 0112 0244     		add	r2, r2, r0
 340 0114 4A60     		str	r2, [r1, #4]
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 17


 399:stepper.c     ****     st.step_outbits |= (1<<Y_STEP_BIT);
 341              		.loc 1 399 0
 342 0116 D968     		ldr	r1, [r3, #12]
 343 0118 8A42     		cmp	r2, r1
 344 011a 14D9     		bls	.L23
 400:stepper.c     ****     st.counter_y -= st.exec_block->step_event_count;
 345              		.loc 1 400 0
 346 011c 2C49     		ldr	r1, .L30
 347 011e 887B     		ldrb	r0, [r1, #14]	@ zero_extendqisi2
 348 0120 40F00200 		orr	r0, r0, #2
 349 0124 8873     		strb	r0, [r1, #14]
 401:stepper.c     ****     if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 350              		.loc 1 401 0
 351 0126 D868     		ldr	r0, [r3, #12]
 352 0128 121A     		subs	r2, r2, r0
 353 012a 4A60     		str	r2, [r1, #4]
 402:stepper.c     ****     else { sys_position[Y_AXIS]++; }
 354              		.loc 1 402 0
 355 012c 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
 356 012e 12F0020F 		tst	r2, #2
 357 0132 04D0     		beq	.L24
 402:stepper.c     ****     else { sys_position[Y_AXIS]++; }
 358              		.loc 1 402 0 is_stmt 0 discriminator 1
 359 0134 2849     		ldr	r1, .L30+8
 360 0136 4A68     		ldr	r2, [r1, #4]
 361 0138 013A     		subs	r2, r2, #1
 362 013a 4A60     		str	r2, [r1, #4]
 363 013c 03E0     		b	.L23
 364              	.L24:
 403:stepper.c     ****   }
 365              		.loc 1 403 0 is_stmt 1
 366 013e 2649     		ldr	r1, .L30+8
 367 0140 4A68     		ldr	r2, [r1, #4]
 368 0142 0132     		adds	r2, r2, #1
 369 0144 4A60     		str	r2, [r1, #4]
 370              	.L23:
 406:stepper.c     ****   #else
 371              		.loc 1 406 0
 372 0146 2249     		ldr	r1, .L30
 373 0148 8869     		ldr	r0, [r1, #24]
 374 014a 8A68     		ldr	r2, [r1, #8]
 375 014c 0244     		add	r2, r2, r0
 376 014e 8A60     		str	r2, [r1, #8]
 410:stepper.c     ****     st.step_outbits |= (1<<Z_STEP_BIT);
 377              		.loc 1 410 0
 378 0150 D968     		ldr	r1, [r3, #12]
 379 0152 8A42     		cmp	r2, r1
 380 0154 14D9     		bls	.L25
 411:stepper.c     ****     st.counter_z -= st.exec_block->step_event_count;
 381              		.loc 1 411 0
 382 0156 1E49     		ldr	r1, .L30
 383 0158 887B     		ldrb	r0, [r1, #14]	@ zero_extendqisi2
 384 015a 40F00400 		orr	r0, r0, #4
 385 015e 8873     		strb	r0, [r1, #14]
 412:stepper.c     ****     if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 386              		.loc 1 412 0
 387 0160 D868     		ldr	r0, [r3, #12]
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 18


 388 0162 121A     		subs	r2, r2, r0
 389 0164 8A60     		str	r2, [r1, #8]
 413:stepper.c     ****     else { sys_position[Z_AXIS]++; }
 390              		.loc 1 413 0
 391 0166 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 392 0168 13F0040F 		tst	r3, #4
 393 016c 04D0     		beq	.L26
 413:stepper.c     ****     else { sys_position[Z_AXIS]++; }
 394              		.loc 1 413 0 is_stmt 0 discriminator 1
 395 016e 1A4A     		ldr	r2, .L30+8
 396 0170 9368     		ldr	r3, [r2, #8]
 397 0172 013B     		subs	r3, r3, #1
 398 0174 9360     		str	r3, [r2, #8]
 399 0176 03E0     		b	.L25
 400              	.L26:
 414:stepper.c     ****   }
 401              		.loc 1 414 0 is_stmt 1
 402 0178 174A     		ldr	r2, .L30+8
 403 017a 9368     		ldr	r3, [r2, #8]
 404 017c 0133     		adds	r3, r3, #1
 405 017e 9360     		str	r3, [r2, #8]
 406              	.L25:
 418:stepper.c     **** 
 407              		.loc 1 418 0
 408 0180 164B     		ldr	r3, .L30+12
 409 0182 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 410 0184 042B     		cmp	r3, #4
 411 0186 05D1     		bne	.L27
 418:stepper.c     **** 
 412              		.loc 1 418 0 is_stmt 0 discriminator 1
 413 0188 144B     		ldr	r3, .L30+12
 414 018a 9979     		ldrb	r1, [r3, #6]	@ zero_extendqisi2
 415 018c 104A     		ldr	r2, .L30
 416 018e 937B     		ldrb	r3, [r2, #14]	@ zero_extendqisi2
 417 0190 0B40     		ands	r3, r3, r1
 418 0192 9373     		strb	r3, [r2, #14]
 419              	.L27:
 420:stepper.c     ****   if (st.step_count == 0) {
 420              		.loc 1 420 0 is_stmt 1
 421 0194 0E4A     		ldr	r2, .L30
 422 0196 938B     		ldrh	r3, [r2, #28]
 423 0198 013B     		subs	r3, r3, #1
 424 019a 9BB2     		uxth	r3, r3
 425 019c 9383     		strh	r3, [r2, #28]	@ movhi
 421:stepper.c     ****     // Segment is complete. Discard current segment and advance segment indexing.
 426              		.loc 1 421 0
 427 019e 63B9     		cbnz	r3, .L28
 423:stepper.c     ****     if ( ++segment_buffer_tail == SEGMENT_BUFFER_SIZE) { segment_buffer_tail = 0; }
 428              		.loc 1 423 0
 429 01a0 5362     		str	r3, [r2, #36]
 424:stepper.c     ****   }
 430              		.loc 1 424 0
 431 01a2 92F82B30 		ldrb	r3, [r2, #43]	@ zero_extendqisi2
 432 01a6 0133     		adds	r3, r3, #1
 433 01a8 DBB2     		uxtb	r3, r3
 434 01aa 82F82B30 		strb	r3, [r2, #43]
 435 01ae 062B     		cmp	r3, #6
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 19


 436 01b0 03D1     		bne	.L28
 424:stepper.c     ****   }
 437              		.loc 1 424 0 is_stmt 0 discriminator 1
 438 01b2 0022     		movs	r2, #0
 439 01b4 064B     		ldr	r3, .L30
 440 01b6 83F82B20 		strb	r2, [r3, #43]
 441              	.L28:
 427:stepper.c     ****   busy = false;
 442              		.loc 1 427 0 is_stmt 1
 443 01ba 054B     		ldr	r3, .L30
 444 01bc 997B     		ldrb	r1, [r3, #14]	@ zero_extendqisi2
 445 01be 93F82820 		ldrb	r2, [r3, #40]	@ zero_extendqisi2
 446 01c2 4A40     		eors	r2, r2, r1
 447 01c4 9A73     		strb	r2, [r3, #14]
 428:stepper.c     **** }
 448              		.loc 1 428 0
 449 01c6 0022     		movs	r2, #0
 450 01c8 83F82920 		strb	r2, [r3, #41]
 451              	.L14:
 452 01cc 10BD     		pop	{r4, pc}
 453              	.L31:
 454 01ce 00BF     		.align	2
 455              	.L30:
 456 01d0 00000000 		.word	.LANCHOR0
 457 01d4 00000000 		.word	sys_probe_state
 458 01d8 00000000 		.word	sys_position
 459 01dc 00000000 		.word	sys
 460              		.cfi_endproc
 461              	.LFE65:
 462              		.size	stepper_timer_isr, .-stepper_timer_isr
 463              		.section	.text.st_generate_step_dir_invert_masks,"ax",%progbits
 464              		.align	2
 465              		.global	st_generate_step_dir_invert_masks
 466              		.thumb
 467              		.thumb_func
 468              		.type	st_generate_step_dir_invert_masks, %function
 469              	st_generate_step_dir_invert_masks:
 470              	.LFB66:
 458:stepper.c     ****   uint8_t idx;
 471              		.loc 1 458 0
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 0
 474              		@ frame_needed = 0, uses_anonymous_args = 0
 475 0000 38B5     		push	{r3, r4, r5, lr}
 476              		.cfi_def_cfa_offset 16
 477              		.cfi_offset 3, -16
 478              		.cfi_offset 4, -12
 479              		.cfi_offset 5, -8
 480              		.cfi_offset 14, -4
 460:stepper.c     ****   dir_port_invert_mask = 0;
 481              		.loc 1 460 0
 482 0002 164B     		ldr	r3, .L38
 483 0004 0024     		movs	r4, #0
 484 0006 83F82840 		strb	r4, [r3, #40]
 461:stepper.c     ****   for (idx=0; idx<N_AXIS; idx++) {
 485              		.loc 1 461 0
 486 000a 83F8C040 		strb	r4, [r3, #192]
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 20


 487              	.LVL20:
 462:stepper.c     ****     if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= get_step_pin_mas
 488              		.loc 1 462 0
 489 000e 22E0     		b	.L33
 490              	.LVL21:
 491              	.L36:
 463:stepper.c     ****     if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= get_direction_pin_
 492              		.loc 1 463 0
 493 0010 134B     		ldr	r3, .L38+4
 494 0012 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 495 0016 2546     		mov	r5, r4
 496 0018 2341     		asrs	r3, r3, r4
 497 001a 13F0010F 		tst	r3, #1
 498 001e 08D0     		beq	.L34
 463:stepper.c     ****     if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= get_direction_pin_
 499              		.loc 1 463 0 is_stmt 0 discriminator 1
 500 0020 2046     		mov	r0, r4
 501 0022 FFF7FEFF 		bl	get_step_pin_mask
 502              	.LVL22:
 503 0026 0D4A     		ldr	r2, .L38
 504 0028 92F82830 		ldrb	r3, [r2, #40]	@ zero_extendqisi2
 505 002c 1843     		orrs	r0, r0, r3
 506 002e 82F82800 		strb	r0, [r2, #40]
 507              	.L34:
 464:stepper.c     ****   }
 508              		.loc 1 464 0 is_stmt 1
 509 0032 0B4B     		ldr	r3, .L38+4
 510 0034 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 511 0038 2B41     		asrs	r3, r3, r5
 512 003a 13F0010F 		tst	r3, #1
 513 003e 08D0     		beq	.L35
 464:stepper.c     ****   }
 514              		.loc 1 464 0 is_stmt 0 discriminator 1
 515 0040 2046     		mov	r0, r4
 516 0042 FFF7FEFF 		bl	get_direction_pin_mask
 517              	.LVL23:
 518 0046 054A     		ldr	r2, .L38
 519 0048 92F8C030 		ldrb	r3, [r2, #192]	@ zero_extendqisi2
 520 004c 1843     		orrs	r0, r0, r3
 521 004e 82F8C000 		strb	r0, [r2, #192]
 522              	.L35:
 462:stepper.c     ****     if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= get_step_pin_mas
 523              		.loc 1 462 0 is_stmt 1 discriminator 2
 524 0052 0134     		adds	r4, r4, #1
 525              	.LVL24:
 526 0054 E4B2     		uxtb	r4, r4
 527              	.LVL25:
 528              	.L33:
 462:stepper.c     ****     if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= get_step_pin_mas
 529              		.loc 1 462 0 is_stmt 0 discriminator 1
 530 0056 022C     		cmp	r4, #2
 531 0058 DAD9     		bls	.L36
 466:stepper.c     **** 
 532              		.loc 1 466 0 is_stmt 1
 533 005a 38BD     		pop	{r3, r4, r5, pc}
 534              	.LVL26:
 535              	.L39:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 21


 536              		.align	2
 537              	.L38:
 538 005c 00000000 		.word	.LANCHOR0
 539 0060 00000000 		.word	settings
 540              		.cfi_endproc
 541              	.LFE66:
 542              		.size	st_generate_step_dir_invert_masks, .-st_generate_step_dir_invert_masks
 543              		.section	.text.st_reset,"ax",%progbits
 544              		.align	2
 545              		.global	st_reset
 546              		.thumb
 547              		.thumb_func
 548              		.type	st_reset, %function
 549              	st_reset:
 550              	.LFB67:
 471:stepper.c     ****   // Initialize stepper driver idle state.
 551              		.loc 1 471 0
 552              		.cfi_startproc
 553              		@ args = 0, pretend = 0, frame = 0
 554              		@ frame_needed = 0, uses_anonymous_args = 0
 555 0000 10B5     		push	{r4, lr}
 556              		.cfi_def_cfa_offset 8
 557              		.cfi_offset 4, -8
 558              		.cfi_offset 14, -4
 473:stepper.c     **** 
 559              		.loc 1 473 0
 560 0002 FFF7FEFF 		bl	st_go_idle
 561              	.LVL27:
 476:stepper.c     ****   memset(&st, 0, sizeof(stepper_t));
 562              		.loc 1 476 0
 563 0006 274C     		ldr	r4, .L42
 564 0008 0023     		movs	r3, #0
 565 000a C4F8C430 		str	r3, [r4, #196]
 566 000e C4F8C830 		str	r3, [r4, #200]
 567 0012 C4F8CC30 		str	r3, [r4, #204]
 568 0016 C4F8D030 		str	r3, [r4, #208]
 569 001a C4F8D430 		str	r3, [r4, #212]
 570 001e C4F8D830 		str	r3, [r4, #216]
 571 0022 C4F8DC30 		str	r3, [r4, #220]
 572 0026 C4F8E030 		str	r3, [r4, #224]
 573 002a C4F8E430 		str	r3, [r4, #228]
 574 002e C4F8E830 		str	r3, [r4, #232]
 575 0032 C4F8EC30 		str	r3, [r4, #236]
 576 0036 C4F8F030 		str	r3, [r4, #240]
 577 003a C4F8F430 		str	r3, [r4, #244]
 578 003e C4F8F830 		str	r3, [r4, #248]
 477:stepper.c     ****   st.exec_segment = NULL;
 579              		.loc 1 477 0
 580 0042 2246     		mov	r2, r4
 581 0044 42F8043B 		str	r3, [r2], #4
 582 0048 6360     		str	r3, [r4, #4]
 583 004a 0432     		adds	r2, r2, #4
 584 004c 42F8043B 		str	r3, [r2], #4
 585 0050 42F8043B 		str	r3, [r2], #4
 586 0054 42F8043B 		str	r3, [r2], #4
 587 0058 42F8043B 		str	r3, [r2], #4
 588 005c 42F8043B 		str	r3, [r2], #4
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 22


 589 0060 42F8043B 		str	r3, [r2], #4
 590 0064 42F8043B 		str	r3, [r2], #4
 591 0068 1360     		str	r3, [r2]
 479:stepper.c     ****   segment_buffer_tail = 0;
 592              		.loc 1 479 0
 593 006a C4F8FC30 		str	r3, [r4, #252]
 480:stepper.c     ****   segment_buffer_head = 0; // empty = tail
 594              		.loc 1 480 0
 595 006e 84F82B30 		strb	r3, [r4, #43]
 481:stepper.c     ****   segment_next_head = 1;
 596              		.loc 1 481 0
 597 0072 84F82A30 		strb	r3, [r4, #42]
 482:stepper.c     ****   busy = false;
 598              		.loc 1 482 0
 599 0076 0122     		movs	r2, #1
 600 0078 84F80021 		strb	r2, [r4, #256]
 483:stepper.c     **** 
 601              		.loc 1 483 0
 602 007c 84F82930 		strb	r3, [r4, #41]
 485:stepper.c     ****   st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 603              		.loc 1 485 0
 604 0080 FFF7FEFF 		bl	st_generate_step_dir_invert_masks
 605              	.LVL28:
 486:stepper.c     **** 
 606              		.loc 1 486 0
 607 0084 94F8C030 		ldrb	r3, [r4, #192]	@ zero_extendqisi2
 608 0088 E373     		strb	r3, [r4, #15]
 489:stepper.c     ****   //STEP_PORT = (STEP_PORT & ~STEP_MASK) | step_port_invert_mask;
 609              		.loc 1 489 0
 610 008a 94F82800 		ldrb	r0, [r4, #40]	@ zero_extendqisi2
 611 008e 40F00700 		orr	r0, r0, #7
 612 0092 FFF7FEFF 		bl	Control_Reg_Step_Write
 613              	.LVL29:
 491:stepper.c     ****   //DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | dir_port_invert_mask;
 614              		.loc 1 491 0
 615 0096 94F8C000 		ldrb	r0, [r4, #192]	@ zero_extendqisi2
 616 009a 40F00700 		orr	r0, r0, #7
 617 009e FFF7FEFF 		bl	Control_Reg_Dir_Write
 618              	.LVL30:
 619 00a2 10BD     		pop	{r4, pc}
 620              	.L43:
 621              		.align	2
 622              	.L42:
 623 00a4 00000000 		.word	.LANCHOR0
 624              		.cfi_endproc
 625              	.LFE67:
 626              		.size	st_reset, .-st_reset
 627              		.section	.text.stepper_init,"ax",%progbits
 628              		.align	2
 629              		.global	stepper_init
 630              		.thumb
 631              		.thumb_func
 632              		.type	stepper_init, %function
 633              	stepper_init:
 634              	.LFB68:
 498:stepper.c     ****   Clock_Step_Pulse_Start();
 635              		.loc 1 498 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 23


 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 0
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639 0000 08B5     		push	{r3, lr}
 640              		.cfi_def_cfa_offset 8
 641              		.cfi_offset 3, -8
 642              		.cfi_offset 14, -4
 499:stepper.c     ****   isr_Step_StartEx(stepper_timer_isr);
 643              		.loc 1 499 0
 644 0002 FFF7FEFF 		bl	Clock_Step_Pulse_Start
 645              	.LVL31:
 500:stepper.c     **** }
 646              		.loc 1 500 0
 647 0006 0248     		ldr	r0, .L46
 648 0008 FFF7FEFF 		bl	isr_Step_StartEx
 649              	.LVL32:
 650 000c 08BD     		pop	{r3, pc}
 651              	.L47:
 652 000e 00BF     		.align	2
 653              	.L46:
 654 0010 00000000 		.word	stepper_timer_isr
 655              		.cfi_endproc
 656              	.LFE68:
 657              		.size	stepper_init, .-stepper_init
 658              		.global	__aeabi_fmul
 659              		.section	.text.st_update_plan_block_parameters,"ax",%progbits
 660              		.align	2
 661              		.global	st_update_plan_block_parameters
 662              		.thumb
 663              		.thumb_func
 664              		.type	st_update_plan_block_parameters, %function
 665              	st_update_plan_block_parameters:
 666              	.LFB69:
 506:stepper.c     ****   if (pl_block != NULL) { // Ignore if at start of a new block.
 667              		.loc 1 506 0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 0
 670              		@ frame_needed = 0, uses_anonymous_args = 0
 671 0000 38B5     		push	{r3, r4, r5, lr}
 672              		.cfi_def_cfa_offset 16
 673              		.cfi_offset 3, -16
 674              		.cfi_offset 4, -12
 675              		.cfi_offset 5, -8
 676              		.cfi_offset 14, -4
 507:stepper.c     ****     prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 677              		.loc 1 507 0
 678 0002 0A4B     		ldr	r3, .L51
 679 0004 D3F8FC50 		ldr	r5, [r3, #252]
 680 0008 7DB1     		cbz	r5, .L48
 508:stepper.c     ****     pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 681              		.loc 1 508 0
 682 000a 1C46     		mov	r4, r3
 683 000c 93F8C530 		ldrb	r3, [r3, #197]	@ zero_extendqisi2
 684 0010 43F00103 		orr	r3, r3, #1
 685 0014 84F8C530 		strb	r3, [r4, #197]
 509:stepper.c     ****     pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 686              		.loc 1 509 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 24


 687 0018 D4F8E000 		ldr	r0, [r4, #224]	@ float
 688 001c 0146     		mov	r1, r0
 689 001e FFF7FEFF 		bl	__aeabi_fmul
 690              	.LVL33:
 691 0022 6861     		str	r0, [r5, #20]	@ float
 510:stepper.c     ****   }
 692              		.loc 1 510 0
 693 0024 0023     		movs	r3, #0
 694 0026 C4F8FC30 		str	r3, [r4, #252]
 695              	.L48:
 696 002a 38BD     		pop	{r3, r4, r5, pc}
 697              	.L52:
 698              		.align	2
 699              	.L51:
 700 002c 00000000 		.word	.LANCHOR0
 701              		.cfi_endproc
 702              	.LFE69:
 703              		.size	st_update_plan_block_parameters, .-st_update_plan_block_parameters
 704              		.global	__aeabi_ui2f
 705              		.global	__aeabi_fdiv
 706              		.global	__aeabi_f2d
 707              		.global	__aeabi_d2f
 708              		.global	__aeabi_fsub
 709              		.global	__aeabi_fcmplt
 710              		.global	__aeabi_fadd
 711              		.global	__aeabi_fcmple
 712              		.global	__aeabi_fcmpgt
 713              		.global	__aeabi_fcmpeq
 714              		.global	__aeabi_dadd
 715              		.global	__aeabi_dmul
 716              		.global	__aeabi_dsub
 717              		.global	__aeabi_ddiv
 718              		.global	__aeabi_f2uiz
 719              		.global	__aeabi_d2uiz
 720              		.section	.text.st_prep_buffer,"ax",%progbits
 721              		.align	2
 722              		.global	st_prep_buffer
 723              		.thumb
 724              		.thumb_func
 725              		.type	st_prep_buffer, %function
 726              	st_prep_buffer:
 727              	.LFB71:
 522:stepper.c     **** 
 523:stepper.c     **** 
 524:stepper.c     **** #ifdef PARKING_ENABLE
 525:stepper.c     ****   // Changes the run state of the step segment buffer to execute the special parking motion.
 526:stepper.c     ****   void st_parking_setup_buffer()
 527:stepper.c     ****   {
 528:stepper.c     ****     // Store step execution data of partially completed block, if necessary.
 529:stepper.c     ****     if (prep.recalculate_flag & PREP_FLAG_HOLD_PARTIAL_BLOCK) {
 530:stepper.c     ****       prep.last_st_block_index = prep.st_block_index;
 531:stepper.c     ****       prep.last_steps_remaining = prep.steps_remaining;
 532:stepper.c     ****       prep.last_dt_remainder = prep.dt_remainder;
 533:stepper.c     ****       prep.last_step_per_mm = prep.step_per_mm;
 534:stepper.c     ****     }
 535:stepper.c     ****     // Set flags to execute a parking motion
 536:stepper.c     ****     prep.recalculate_flag |= PREP_FLAG_PARKING;
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 25


 537:stepper.c     ****     prep.recalculate_flag &= ~(PREP_FLAG_RECALCULATE);
 538:stepper.c     ****     pl_block = NULL; // Always reset parking motion to reload new block.
 539:stepper.c     ****   }
 540:stepper.c     **** 
 541:stepper.c     **** 
 542:stepper.c     ****   // Restores the step segment buffer to the normal run state after a parking motion.
 543:stepper.c     ****   void st_parking_restore_buffer()
 544:stepper.c     ****   {
 545:stepper.c     ****     // Restore step execution data and flags of partially completed block, if necessary.
 546:stepper.c     ****     if (prep.recalculate_flag & PREP_FLAG_HOLD_PARTIAL_BLOCK) {
 547:stepper.c     ****       st_prep_block = &st_block_buffer[prep.last_st_block_index];
 548:stepper.c     ****       prep.st_block_index = prep.last_st_block_index;
 549:stepper.c     ****       prep.steps_remaining = prep.last_steps_remaining;
 550:stepper.c     ****       prep.dt_remainder = prep.last_dt_remainder;
 551:stepper.c     ****       prep.step_per_mm = prep.last_step_per_mm;
 552:stepper.c     ****       prep.recalculate_flag = (PREP_FLAG_HOLD_PARTIAL_BLOCK | PREP_FLAG_RECALCULATE);
 553:stepper.c     ****       prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm; // Recompute this value.
 554:stepper.c     ****     } else {
 555:stepper.c     ****       prep.recalculate_flag = false;
 556:stepper.c     ****     }
 557:stepper.c     ****     pl_block = NULL; // Set to reload next block.
 558:stepper.c     ****   }
 559:stepper.c     **** #endif
 560:stepper.c     **** 
 561:stepper.c     **** 
 562:stepper.c     **** /* Prepares step segment buffer. Continuously called from main program.
 563:stepper.c     **** 
 564:stepper.c     ****    The segment buffer is an intermediary buffer interface between the execution of steps
 565:stepper.c     ****    by the stepper algorithm and the velocity profiles generated by the planner. The stepper
 566:stepper.c     ****    algorithm only executes steps within the segment buffer and is filled by the main program
 567:stepper.c     ****    when steps are "checked-out" from the first block in the planner buffer. This keeps the
 568:stepper.c     ****    step execution and planning optimization processes atomic and protected from each other.
 569:stepper.c     ****    The number of steps "checked-out" from the planner buffer and the number of segments in
 570:stepper.c     ****    the segment buffer is sized and computed such that no operation in the main program takes
 571:stepper.c     ****    longer than the time it takes the stepper algorithm to empty it before refilling it.
 572:stepper.c     ****    Currently, the segment buffer conservatively holds roughly up to 40-50 msec of steps.
 573:stepper.c     ****    NOTE: Computation units are in steps, millimeters, and minutes.
 574:stepper.c     **** */
 575:stepper.c     **** void st_prep_buffer()
 576:stepper.c     **** {
 728              		.loc 1 576 0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 32
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 577:stepper.c     ****   // Block step prep buffer, while in a suspend state and there is no suspend motion to execute.
 578:stepper.c     ****   if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 732              		.loc 1 578 0
 733 0000 B44B     		ldr	r3, .L162
 734 0002 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 735 0004 13F0010F 		tst	r3, #1
 736 0008 00F0AB84 		beq	.L161
 737 000c 7047     		bx	lr
 738              	.L127:
 739              		.cfi_def_cfa_offset 72
 740              		.cfi_offset 4, -36
 741              		.cfi_offset 5, -32
 742              		.cfi_offset 6, -28
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 26


 743              		.cfi_offset 7, -24
 744              		.cfi_offset 8, -20
 745              		.cfi_offset 9, -16
 746              		.cfi_offset 10, -12
 747              		.cfi_offset 11, -8
 748              		.cfi_offset 14, -4
 749              	.LBB2:
 579:stepper.c     **** 
 580:stepper.c     ****   while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 581:stepper.c     **** 
 582:stepper.c     ****     // Determine if we need to load a new planner block or if the block needs to be recomputed.
 583:stepper.c     ****     if (pl_block == NULL) {
 750              		.loc 1 583 0
 751 000e B24B     		ldr	r3, .L162+4
 752 0010 D3F8FC30 		ldr	r3, [r3, #252]
 753 0014 002B     		cmp	r3, #0
 754 0016 40F0D981 		bne	.L56
 755              	.LBB3:
 584:stepper.c     **** 
 585:stepper.c     ****       // Query planner for a queued block
 586:stepper.c     ****       if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_b
 756              		.loc 1 586 0
 757 001a AE4B     		ldr	r3, .L162
 758 001c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 759 001e 13F0040F 		tst	r3, #4
 760 0022 05D0     		beq	.L57
 761              		.loc 1 586 0 is_stmt 0 discriminator 1
 762 0024 FFF7FEFF 		bl	plan_get_system_motion_block
 763              	.LVL34:
 764 0028 AB4B     		ldr	r3, .L162+4
 765 002a C3F8FC00 		str	r0, [r3, #252]
 766 002e 04E0     		b	.L58
 767              	.L57:
 587:stepper.c     ****       else { pl_block = plan_get_current_block(); }
 768              		.loc 1 587 0 is_stmt 1
 769 0030 FFF7FEFF 		bl	plan_get_current_block
 770              	.LVL35:
 771 0034 A84B     		ldr	r3, .L162+4
 772 0036 C3F8FC00 		str	r0, [r3, #252]
 773              	.L58:
 588:stepper.c     ****       if (pl_block == NULL) { return; } // No planner blocks. Exit.
 774              		.loc 1 588 0
 775 003a A74B     		ldr	r3, .L162+4
 776 003c D3F8FC40 		ldr	r4, [r3, #252]
 777 0040 002C     		cmp	r4, #0
 778 0042 00F09A84 		beq	.L53
 589:stepper.c     **** 
 590:stepper.c     ****       // Check if we need to only recompute the velocity profile or load a new block.
 591:stepper.c     ****       if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 779              		.loc 1 591 0
 780 0046 93F8C530 		ldrb	r3, [r3, #197]	@ zero_extendqisi2
 781 004a 13F0010F 		tst	r3, #1
 782 004e 04D0     		beq	.L59
 592:stepper.c     **** 
 593:stepper.c     ****         #ifdef PARKING_ENABLE
 594:stepper.c     ****           if (prep.recalculate_flag & PREP_FLAG_PARKING) { prep.recalculate_flag &= ~(PREP_FLAG_REC
 595:stepper.c     ****           else { prep.recalculate_flag = false; }
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 27


 596:stepper.c     ****         #else
 597:stepper.c     ****           prep.recalculate_flag = false;
 783              		.loc 1 597 0
 784 0050 0022     		movs	r2, #0
 785 0052 A14B     		ldr	r3, .L162+4
 786 0054 83F8C520 		strb	r2, [r3, #197]
 787 0058 73E0     		b	.L60
 788              	.L59:
 789              	.LBB4:
 598:stepper.c     ****         #endif
 599:stepper.c     **** 
 600:stepper.c     ****       } else {
 601:stepper.c     **** 
 602:stepper.c     ****         // Load the Bresenham stepping data for the block.
 603:stepper.c     ****         prep.st_block_index = st_next_block_index(prep.st_block_index);
 790              		.loc 1 603 0
 791 005a 9F4D     		ldr	r5, .L162+4
 792 005c 95F8C400 		ldrb	r0, [r5, #196]	@ zero_extendqisi2
 793 0060 FFF7FEFF 		bl	st_next_block_index
 794              	.LVL36:
 795 0064 85F8C400 		strb	r0, [r5, #196]
 604:stepper.c     **** 
 605:stepper.c     ****         // Prepare and copy Bresenham algorithm segment data from the new planner block, so that
 606:stepper.c     ****         // when the segment buffer completes the planner block, it may be discarded when the
 607:stepper.c     ****         // segment buffer finishes the prepped block, but the stepper ISR is still executing it.
 608:stepper.c     ****         st_prep_block = &st_block_buffer[prep.st_block_index];
 796              		.loc 1 608 0
 797 0068 05F15C02 		add	r2, r5, #92
 798 006c 00EB8000 		add	r0, r0, r0, lsl #2
 799 0070 8000     		lsls	r0, r0, #2
 800 0072 0244     		add	r2, r2, r0
 801 0074 C5F80421 		str	r2, [r5, #260]
 609:stepper.c     ****         st_prep_block->direction_bits = pl_block->direction_bits;
 802              		.loc 1 609 0
 803 0078 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 804 007a 1374     		strb	r3, [r2, #16]
 805              	.LVL37:
 610:stepper.c     ****         uint8_t idx;
 611:stepper.c     ****         #ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
 612:stepper.c     ****           for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx]; }
 613:stepper.c     ****           st_prep_block->step_event_count = pl_block->step_event_count;
 614:stepper.c     ****         #else
 615:stepper.c     ****           // With AMASS enabled, simply bit-shift multiply all Bresenham data by the max AMASS
 616:stepper.c     ****           // level, such that we never divide beyond the original data anywhere in the algorithm.
 617:stepper.c     ****           // If the original data is divided, we can lose a step from integer roundoff.
 618:stepper.c     ****           for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_
 806              		.loc 1 618 0
 807 007c 0023     		movs	r3, #0
 808 007e 06E0     		b	.L61
 809              	.LVL38:
 810              	.L62:
 811              		.loc 1 618 0 is_stmt 0 discriminator 3
 812 0080 54F82310 		ldr	r1, [r4, r3, lsl #2]
 813 0084 C900     		lsls	r1, r1, #3
 814 0086 42F82310 		str	r1, [r2, r3, lsl #2]
 815 008a 0133     		adds	r3, r3, #1
 816              	.LVL39:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 28


 817 008c DBB2     		uxtb	r3, r3
 818              	.LVL40:
 819              	.L61:
 820              		.loc 1 618 0 discriminator 1
 821 008e 022B     		cmp	r3, #2
 822 0090 F6D9     		bls	.L62
 619:stepper.c     ****           st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 823              		.loc 1 619 0 is_stmt 1
 824 0092 E368     		ldr	r3, [r4, #12]
 825              	.LVL41:
 826 0094 DB00     		lsls	r3, r3, #3
 827 0096 D360     		str	r3, [r2, #12]
 620:stepper.c     ****         #endif
 621:stepper.c     **** 
 622:stepper.c     ****         // Initialize segment buffer data for generating the segments.
 623:stepper.c     ****         prep.steps_remaining = (float)pl_block->step_event_count;
 828              		.loc 1 623 0
 829 0098 E068     		ldr	r0, [r4, #12]
 830 009a FFF7FEFF 		bl	__aeabi_ui2f
 831              	.LVL42:
 832 009e 8E4D     		ldr	r5, .L162+4
 833 00a0 C5F8CC00 		str	r0, [r5, #204]	@ float
 624:stepper.c     ****         prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 834              		.loc 1 624 0
 835 00a4 216A     		ldr	r1, [r4, #32]	@ float
 836 00a6 FFF7FEFF 		bl	__aeabi_fdiv
 837              	.LVL43:
 838 00aa 0146     		mov	r1, r0
 839 00ac C5F8D000 		str	r0, [r5, #208]	@ float
 625:stepper.c     ****         prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 840              		.loc 1 625 0
 841 00b0 8A48     		ldr	r0, .L162+8
 842 00b2 FFF7FEFF 		bl	__aeabi_fdiv
 843              	.LVL44:
 844 00b6 C5F8D400 		str	r0, [r5, #212]	@ float
 626:stepper.c     ****         prep.dt_remainder = 0.0; // Reset for new segment block
 845              		.loc 1 626 0
 846 00ba 0023     		movs	r3, #0
 847 00bc C5F8C830 		str	r3, [r5, #200]	@ float
 627:stepper.c     **** 
 628:stepper.c     ****         if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DE
 848              		.loc 1 628 0
 849 00c0 844B     		ldr	r3, .L162
 850 00c2 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 851 00c4 13F0020F 		tst	r3, #2
 852 00c8 04D1     		bne	.L63
 853              		.loc 1 628 0 is_stmt 0 discriminator 1
 854 00ca 95F8C530 		ldrb	r3, [r5, #197]	@ zero_extendqisi2
 855 00ce 13F0080F 		tst	r3, #8
 856 00d2 0FD0     		beq	.L64
 857              	.L63:
 629:stepper.c     ****           // New block loaded mid-hold. Override planner block entry speed to enforce deceleration.
 630:stepper.c     ****           prep.current_speed = prep.exit_speed;
 858              		.loc 1 630 0 is_stmt 1
 859 00d4 804D     		ldr	r5, .L162+4
 860 00d6 D5F8E810 		ldr	r1, [r5, #232]	@ float
 861 00da C5F8E010 		str	r1, [r5, #224]	@ float
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 29


 631:stepper.c     ****           pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 862              		.loc 1 631 0
 863 00de 0846     		mov	r0, r1
 864 00e0 FFF7FEFF 		bl	__aeabi_fmul
 865              	.LVL45:
 866 00e4 6061     		str	r0, [r4, #20]	@ float
 632:stepper.c     ****           prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 867              		.loc 1 632 0
 868 00e6 95F8C530 		ldrb	r3, [r5, #197]	@ zero_extendqisi2
 869 00ea 23F00803 		bic	r3, r3, #8
 870 00ee 85F8C530 		strb	r3, [r5, #197]
 871 00f2 0AE0     		b	.L65
 872              	.L64:
 633:stepper.c     ****         } else {
 634:stepper.c     ****           prep.current_speed = sqrt(pl_block->entry_speed_sqr);
 873              		.loc 1 634 0
 874 00f4 6469     		ldr	r4, [r4, #20]	@ float
 875 00f6 2046     		mov	r0, r4
 876 00f8 FFF7FEFF 		bl	__aeabi_f2d
 877              	.LVL46:
 878 00fc FFF7FEFF 		bl	sqrt
 879              	.LVL47:
 880 0100 FFF7FEFF 		bl	__aeabi_d2f
 881              	.LVL48:
 882 0104 744B     		ldr	r3, .L162+4
 883 0106 C3F8E000 		str	r0, [r3, #224]	@ float
 884              	.L65:
 635:stepper.c     ****         }
 636:stepper.c     ****         
 637:stepper.c     ****         #ifdef VARIABLE_SPINDLE
 638:stepper.c     ****           // Setup laser mode variables. PWM rate adjusted motions will always complete a motion wi
 639:stepper.c     ****           // spindle off. 
 640:stepper.c     ****           st_prep_block->is_pwm_rate_adjusted = false;
 885              		.loc 1 640 0
 886 010a 734B     		ldr	r3, .L162+4
 887 010c D3F80441 		ldr	r4, [r3, #260]
 888 0110 0023     		movs	r3, #0
 889 0112 6374     		strb	r3, [r4, #17]
 641:stepper.c     ****           if (settings.flags & BITFLAG_LASER_MODE) {
 890              		.loc 1 641 0
 891 0114 724B     		ldr	r3, .L162+12
 892 0116 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 893 011a 13F0020F 		tst	r3, #2
 894 011e 10D0     		beq	.L60
 642:stepper.c     ****             if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) { 
 895              		.loc 1 642 0
 896 0120 6D4B     		ldr	r3, .L162+4
 897 0122 D3F8FC30 		ldr	r3, [r3, #252]
 898 0126 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
 899 0128 12F0200F 		tst	r2, #32
 900 012c 09D0     		beq	.L60
 643:stepper.c     ****               // Pre-compute inverse programmed rate to speed up PWM updating per step segment.
 644:stepper.c     ****               prep.inv_rate = 1.0/pl_block->programmed_rate;
 901              		.loc 1 644 0
 902 012e 4FF07E50 		mov	r0, #1065353216
 903 0132 D96A     		ldr	r1, [r3, #44]	@ float
 904 0134 FFF7FEFF 		bl	__aeabi_fdiv
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 30


 905              	.LVL49:
 906 0138 674B     		ldr	r3, .L162+4
 907 013a C3F8F400 		str	r0, [r3, #244]	@ float
 645:stepper.c     ****               st_prep_block->is_pwm_rate_adjusted = true; 
 908              		.loc 1 645 0
 909 013e 0123     		movs	r3, #1
 910 0140 6374     		strb	r3, [r4, #17]
 911              	.L60:
 912              	.LBE4:
 646:stepper.c     ****             }
 647:stepper.c     ****           }
 648:stepper.c     ****         #endif
 649:stepper.c     ****       }
 650:stepper.c     **** 
 651:stepper.c     **** 			/* ---------------------------------------------------------------------------------
 652:stepper.c     **** 			 Compute the velocity profile of a new planner block based on its entry and exit
 653:stepper.c     **** 			 speeds, or recompute the profile of a partially-completed planner block if the
 654:stepper.c     **** 			 planner has updated it. For a commanded forced-deceleration, such as from a feed
 655:stepper.c     **** 			 hold, override the planner velocities and decelerate to the target exit speed.
 656:stepper.c     **** 			*/
 657:stepper.c     **** 			prep.mm_complete = 0.0; // Default velocity profile complete at 0.0mm from end of block.
 913              		.loc 1 657 0
 914 0142 654B     		ldr	r3, .L162+4
 915 0144 0022     		movs	r2, #0
 916 0146 C3F8DC20 		str	r2, [r3, #220]	@ float
 658:stepper.c     **** 			float inv_2_accel = 0.5/pl_block->acceleration;
 917              		.loc 1 658 0
 918 014a D3F8FC40 		ldr	r4, [r3, #252]
 919 014e E669     		ldr	r6, [r4, #28]	@ float
 920 0150 4FF07C50 		mov	r0, #1056964608
 921 0154 3146     		mov	r1, r6
 922 0156 FFF7FEFF 		bl	__aeabi_fdiv
 923              	.LVL50:
 924 015a 0546     		mov	r5, r0
 925              	.LVL51:
 659:stepper.c     **** 			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 926              		.loc 1 659 0
 927 015c 5D4B     		ldr	r3, .L162
 928 015e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 929 0160 13F0020F 		tst	r3, #2
 930 0164 31D0     		beq	.L66
 931              	.LBB5:
 660:stepper.c     **** 				// Compute velocity profile parameters for a feed hold in-progress. This profile overrides
 661:stepper.c     **** 				// the planner block profile, enforcing a deceleration to zero speed.
 662:stepper.c     **** 				prep.ramp_type = RAMP_DECEL;
 932              		.loc 1 662 0
 933 0166 0222     		movs	r2, #2
 934 0168 5B4B     		ldr	r3, .L162+4
 935 016a 83F8D820 		strb	r2, [r3, #216]
 663:stepper.c     **** 				// Compute decelerate distance relative to end of block.
 664:stepper.c     **** 				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 936              		.loc 1 664 0
 937 016e 276A     		ldr	r7, [r4, #32]	@ float
 938 0170 6469     		ldr	r4, [r4, #20]	@ float
 939 0172 2046     		mov	r0, r4
 940              	.LVL52:
 941 0174 2946     		mov	r1, r5
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 31


 942 0176 FFF7FEFF 		bl	__aeabi_fmul
 943              	.LVL53:
 944 017a 0146     		mov	r1, r0
 945 017c 3846     		mov	r0, r7
 946 017e FFF7FEFF 		bl	__aeabi_fsub
 947              	.LVL54:
 948 0182 0546     		mov	r5, r0
 949              	.LVL55:
 665:stepper.c     **** 				if (decel_dist < 0.0) {
 950              		.loc 1 665 0
 951 0184 0021     		movs	r1, #0
 952 0186 FFF7FEFF 		bl	__aeabi_fcmplt
 953              	.LVL56:
 954 018a B8B1     		cbz	r0, .L146
 666:stepper.c     **** 					// Deceleration through entire planner block. End of feed hold is not in this block.
 667:stepper.c     **** 					prep.exit_speed = sqrt(pl_block->entry_speed_sqr-2*pl_block->acceleration*pl_block->millimeter
 955              		.loc 1 667 0
 956 018c 3046     		mov	r0, r6
 957 018e 3146     		mov	r1, r6
 958 0190 FFF7FEFF 		bl	__aeabi_fadd
 959              	.LVL57:
 960 0194 0146     		mov	r1, r0
 961 0196 3846     		mov	r0, r7
 962 0198 FFF7FEFF 		bl	__aeabi_fmul
 963              	.LVL58:
 964 019c 0146     		mov	r1, r0
 965 019e 2046     		mov	r0, r4
 966 01a0 FFF7FEFF 		bl	__aeabi_fsub
 967              	.LVL59:
 968 01a4 0446     		mov	r4, r0
 969 01a6 2046     		mov	r0, r4
 970 01a8 FFF7FEFF 		bl	__aeabi_f2d
 971              	.LVL60:
 972 01ac FFF7FEFF 		bl	sqrt
 973              	.LVL61:
 974 01b0 FFF7FEFF 		bl	__aeabi_d2f
 975              	.LVL62:
 976 01b4 484B     		ldr	r3, .L162+4
 977 01b6 C3F8E800 		str	r0, [r3, #232]	@ float
 978 01ba 02E1     		b	.L69
 979              	.L146:
 668:stepper.c     **** 				} else {
 669:stepper.c     **** 					prep.mm_complete = decel_dist; // End of feed hold.
 980              		.loc 1 669 0
 981 01bc 464B     		ldr	r3, .L162+4
 982 01be C3F8DC50 		str	r5, [r3, #220]	@ float
 670:stepper.c     **** 					prep.exit_speed = 0.0;
 983              		.loc 1 670 0
 984 01c2 0022     		movs	r2, #0
 985 01c4 C3F8E820 		str	r2, [r3, #232]	@ float
 986 01c8 FBE0     		b	.L69
 987              	.LVL63:
 988              	.L66:
 989              	.LBE5:
 990              	.LBB6:
 671:stepper.c     **** 				}
 672:stepper.c     **** 			} else { // [Normal Operation]
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 32


 673:stepper.c     **** 				// Compute or recompute velocity profile parameters of the prepped planner block.
 674:stepper.c     **** 				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 991              		.loc 1 674 0
 992 01ca 434A     		ldr	r2, .L162+4
 993 01cc 0021     		movs	r1, #0
 994 01ce 82F8D810 		strb	r1, [r2, #216]
 675:stepper.c     **** 				prep.accelerate_until = pl_block->millimeters;
 995              		.loc 1 675 0
 996 01d2 216A     		ldr	r1, [r4, #32]	@ float
 997 01d4 C2F8EC10 		str	r1, [r2, #236]	@ float
 676:stepper.c     **** 
 677:stepper.c     **** 				float exit_speed_sqr;
 678:stepper.c     **** 				float nominal_speed;
 679:stepper.c     ****         if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 998              		.loc 1 679 0
 999 01d8 13F0040F 		tst	r3, #4
 1000 01dc 03D0     		beq	.L70
 1001              	.LVL64:
 680:stepper.c     ****           prep.exit_speed = exit_speed_sqr = 0.0; // Enforce stop at end of system motion.
 1002              		.loc 1 680 0
 1003 01de 0024     		movs	r4, #0
 1004 01e0 C2F8E840 		str	r4, [r2, #232]	@ float
 1005 01e4 0CE0     		b	.L71
 1006              	.LVL65:
 1007              	.L70:
 681:stepper.c     ****         } else {
 682:stepper.c     ****           exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 1008              		.loc 1 682 0
 1009 01e6 FFF7FEFF 		bl	plan_get_exec_block_exit_speed_sqr
 1010              	.LVL66:
 1011 01ea 0446     		mov	r4, r0
 1012              	.LVL67:
 683:stepper.c     ****           prep.exit_speed = sqrt(exit_speed_sqr);
 1013              		.loc 1 683 0
 1014 01ec 2046     		mov	r0, r4
 1015 01ee FFF7FEFF 		bl	__aeabi_f2d
 1016              	.LVL68:
 1017 01f2 FFF7FEFF 		bl	sqrt
 1018              	.LVL69:
 1019 01f6 FFF7FEFF 		bl	__aeabi_d2f
 1020              	.LVL70:
 1021 01fa 374B     		ldr	r3, .L162+4
 1022 01fc C3F8E800 		str	r0, [r3, #232]	@ float
 1023              	.LVL71:
 1024              	.L71:
 684:stepper.c     ****         }
 685:stepper.c     **** 
 686:stepper.c     ****         nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 1025              		.loc 1 686 0
 1026 0200 354E     		ldr	r6, .L162+4
 1027 0202 D6F8FC00 		ldr	r0, [r6, #252]
 1028 0206 FFF7FEFF 		bl	plan_compute_profile_nominal_speed
 1029              	.LVL72:
 1030 020a 8246     		mov	r10, r0
 1031              	.LVL73:
 687:stepper.c     **** 				float nominal_speed_sqr = nominal_speed*nominal_speed;
 1032              		.loc 1 687 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 33


 1033 020c 0146     		mov	r1, r0
 1034 020e FFF7FEFF 		bl	__aeabi_fmul
 1035              	.LVL74:
 1036 0212 0746     		mov	r7, r0
 1037              	.LVL75:
 688:stepper.c     **** 				float intersect_distance =
 689:stepper.c     **** 								0.5*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 1038              		.loc 1 689 0
 1039 0214 D6F8FC60 		ldr	r6, [r6, #252]
 1040 0218 D6F820B0 		ldr	fp, [r6, #32]	@ float
 1041 021c D6F81480 		ldr	r8, [r6, #20]	@ float
 1042 0220 4046     		mov	r0, r8
 1043              	.LVL76:
 1044 0222 2146     		mov	r1, r4
 1045 0224 FFF7FEFF 		bl	__aeabi_fsub
 1046              	.LVL77:
 1047 0228 2946     		mov	r1, r5
 1048 022a FFF7FEFF 		bl	__aeabi_fmul
 1049              	.LVL78:
 1050 022e 0146     		mov	r1, r0
 1051 0230 5846     		mov	r0, fp
 1052 0232 FFF7FEFF 		bl	__aeabi_fadd
 1053              	.LVL79:
 688:stepper.c     **** 				float intersect_distance =
 1054              		.loc 1 688 0
 1055 0236 4FF07C51 		mov	r1, #1056964608
 1056 023a FFF7FEFF 		bl	__aeabi_fmul
 1057              	.LVL80:
 1058 023e 8146     		mov	r9, r0
 1059              	.LVL81:
 690:stepper.c     **** 
 691:stepper.c     ****         if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reducti
 1060              		.loc 1 691 0
 1061 0240 3846     		mov	r0, r7
 1062              	.LVL82:
 1063 0242 4146     		mov	r1, r8
 1064 0244 FFF7FEFF 		bl	__aeabi_fcmplt
 1065              	.LVL83:
 1066 0248 0028     		cmp	r0, #0
 1067 024a 4BD0     		beq	.L147
 692:stepper.c     ****           prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-no
 1068              		.loc 1 692 0
 1069 024c 4046     		mov	r0, r8
 1070 024e 3946     		mov	r1, r7
 1071 0250 FFF7FEFF 		bl	__aeabi_fsub
 1072              	.LVL84:
 1073 0254 2946     		mov	r1, r5
 1074 0256 FFF7FEFF 		bl	__aeabi_fmul
 1075              	.LVL85:
 1076 025a 0146     		mov	r1, r0
 1077 025c 5846     		mov	r0, fp
 1078 025e FFF7FEFF 		bl	__aeabi_fsub
 1079              	.LVL86:
 1080 0262 1D4B     		ldr	r3, .L162+4
 1081 0264 C3F8EC00 		str	r0, [r3, #236]	@ float
 693:stepper.c     ****           if (prep.accelerate_until <= 0.0) { // Deceleration-only.
 1082              		.loc 1 693 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 34


 1083 0268 0021     		movs	r1, #0
 1084 026a FFF7FEFF 		bl	__aeabi_fcmple
 1085              	.LVL87:
 1086 026e 00B3     		cbz	r0, .L148
 694:stepper.c     ****             prep.ramp_type = RAMP_DECEL;
 1087              		.loc 1 694 0
 1088 0270 194C     		ldr	r4, .L162+4
 1089              	.LVL88:
 1090 0272 0223     		movs	r3, #2
 1091 0274 84F8D830 		strb	r3, [r4, #216]
 695:stepper.c     ****             // prep.decelerate_after = pl_block->millimeters;
 696:stepper.c     ****             // prep.maximum_speed = prep.current_speed;
 697:stepper.c     **** 
 698:stepper.c     ****             // Compute override block exit speed since it doesn't match the planner exit speed.
 699:stepper.c     ****             prep.exit_speed = sqrt(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->m
 1092              		.loc 1 699 0
 1093 0278 7569     		ldr	r5, [r6, #20]	@ float
 1094              	.LVL89:
 1095 027a F069     		ldr	r0, [r6, #28]	@ float
 1096 027c 0146     		mov	r1, r0
 1097 027e FFF7FEFF 		bl	__aeabi_fadd
 1098              	.LVL90:
 1099 0282 316A     		ldr	r1, [r6, #32]	@ float
 1100 0284 FFF7FEFF 		bl	__aeabi_fmul
 1101              	.LVL91:
 1102 0288 0146     		mov	r1, r0
 1103 028a 2846     		mov	r0, r5
 1104 028c FFF7FEFF 		bl	__aeabi_fsub
 1105              	.LVL92:
 1106 0290 0546     		mov	r5, r0
 1107 0292 2846     		mov	r0, r5
 1108 0294 FFF7FEFF 		bl	__aeabi_f2d
 1109              	.LVL93:
 1110 0298 FFF7FEFF 		bl	sqrt
 1111              	.LVL94:
 1112 029c FFF7FEFF 		bl	__aeabi_d2f
 1113              	.LVL95:
 1114 02a0 C4F8E800 		str	r0, [r4, #232]	@ float
 700:stepper.c     ****             prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as decele
 1115              		.loc 1 700 0
 1116 02a4 94F8C530 		ldrb	r3, [r4, #197]	@ zero_extendqisi2
 1117 02a8 43F00803 		orr	r3, r3, #8
 1118 02ac 84F8C530 		strb	r3, [r4, #197]
 1119 02b0 87E0     		b	.L69
 1120              	.LVL96:
 1121              	.L148:
 701:stepper.c     **** 
 702:stepper.c     ****             // TODO: Determine correct handling of parameters in deceleration-only.
 703:stepper.c     ****             // Can be tricky since entry speed will be current speed, as in feed holds.
 704:stepper.c     ****             // Also, look into near-zero speed handling issues with this.
 705:stepper.c     **** 
 706:stepper.c     ****           } else {
 707:stepper.c     ****             // Decelerate to cruise or cruise-decelerate types. Guaranteed to intersect updated pla
 708:stepper.c     ****             prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 1122              		.loc 1 708 0
 1123 02b2 3846     		mov	r0, r7
 1124 02b4 2146     		mov	r1, r4
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 35


 1125 02b6 FFF7FEFF 		bl	__aeabi_fsub
 1126              	.LVL97:
 1127 02ba 2946     		mov	r1, r5
 1128 02bc FFF7FEFF 		bl	__aeabi_fmul
 1129              	.LVL98:
 1130 02c0 054B     		ldr	r3, .L162+4
 1131 02c2 C3F8F000 		str	r0, [r3, #240]	@ float
 709:stepper.c     ****             prep.maximum_speed = nominal_speed;
 1132              		.loc 1 709 0
 1133 02c6 C3F8E4A0 		str	r10, [r3, #228]	@ float
 710:stepper.c     ****             prep.ramp_type = RAMP_DECEL_OVERRIDE;
 1134              		.loc 1 710 0
 1135 02ca 0322     		movs	r2, #3
 1136 02cc 83F8D820 		strb	r2, [r3, #216]
 1137 02d0 77E0     		b	.L69
 1138              	.L163:
 1139 02d2 00BF     		.align	2
 1140              	.L162:
 1141 02d4 00000000 		.word	sys
 1142 02d8 00000000 		.word	.LANCHOR0
 1143 02dc 0000A03F 		.word	1067450368
 1144 02e0 00000000 		.word	settings
 1145              	.L147:
 711:stepper.c     ****           }
 712:stepper.c     **** 				} else if (intersect_distance > 0.0) {
 1146              		.loc 1 712 0
 1147 02e4 4846     		mov	r0, r9
 1148 02e6 0021     		movs	r1, #0
 1149 02e8 FFF7FEFF 		bl	__aeabi_fcmpgt
 1150              	.LVL99:
 1151 02ec 0028     		cmp	r0, #0
 1152 02ee 60D0     		beq	.L149
 713:stepper.c     **** 					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 1153              		.loc 1 713 0
 1154 02f0 5846     		mov	r0, fp
 1155 02f2 4946     		mov	r1, r9
 1156 02f4 FFF7FEFF 		bl	__aeabi_fcmpgt
 1157              	.LVL100:
 1158 02f8 0028     		cmp	r0, #0
 1159 02fa 55D0     		beq	.L150
 714:stepper.c     **** 						// NOTE: For acceleration-cruise and cruise-only types, following calculation will be 0.0.
 715:stepper.c     **** 						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 1160              		.loc 1 715 0
 1161 02fc 3846     		mov	r0, r7
 1162 02fe 2146     		mov	r1, r4
 1163 0300 FFF7FEFF 		bl	__aeabi_fsub
 1164              	.LVL101:
 1165 0304 2946     		mov	r1, r5
 1166 0306 FFF7FEFF 		bl	__aeabi_fmul
 1167              	.LVL102:
 1168 030a 0146     		mov	r1, r0
 1169 030c AE4B     		ldr	r3, .L164
 1170 030e C3F8F000 		str	r0, [r3, #240]	@ float
 716:stepper.c     **** 						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 1171              		.loc 1 716 0
 1172 0312 4846     		mov	r0, r9
 1173 0314 FFF7FEFF 		bl	__aeabi_fcmpgt
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 36


 1174              	.LVL103:
 1175 0318 E8B1     		cbz	r0, .L151
 717:stepper.c     **** 							prep.maximum_speed = nominal_speed;
 1176              		.loc 1 717 0
 1177 031a AB4B     		ldr	r3, .L164
 1178 031c C3F8E4A0 		str	r10, [r3, #228]	@ float
 718:stepper.c     **** 							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 1179              		.loc 1 718 0
 1180 0320 7469     		ldr	r4, [r6, #20]	@ float
 1181              	.LVL104:
 1182 0322 2046     		mov	r0, r4
 1183 0324 3946     		mov	r1, r7
 1184 0326 FFF7FEFF 		bl	__aeabi_fcmpeq
 1185              	.LVL105:
 1186 032a 20B1     		cbz	r0, .L152
 719:stepper.c     **** 								// Cruise-deceleration or cruise-only type.
 720:stepper.c     **** 								prep.ramp_type = RAMP_CRUISE;
 1187              		.loc 1 720 0
 1188 032c 0122     		movs	r2, #1
 1189 032e A64B     		ldr	r3, .L164
 1190 0330 83F8D820 		strb	r2, [r3, #216]
 1191 0334 45E0     		b	.L69
 1192              	.L152:
 721:stepper.c     **** 							} else {
 722:stepper.c     **** 								// Full-trapezoid or acceleration-cruise types
 723:stepper.c     **** 								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 1193              		.loc 1 723 0
 1194 0336 3846     		mov	r0, r7
 1195 0338 2146     		mov	r1, r4
 1196 033a FFF7FEFF 		bl	__aeabi_fsub
 1197              	.LVL106:
 1198 033e 2946     		mov	r1, r5
 1199 0340 FFF7FEFF 		bl	__aeabi_fmul
 1200              	.LVL107:
 1201 0344 0146     		mov	r1, r0
 1202 0346 A04C     		ldr	r4, .L164
 1203 0348 D4F8EC00 		ldr	r0, [r4, #236]	@ float
 1204 034c FFF7FEFF 		bl	__aeabi_fsub
 1205              	.LVL108:
 1206 0350 C4F8EC00 		str	r0, [r4, #236]	@ float
 1207 0354 35E0     		b	.L69
 1208              	.LVL109:
 1209              	.L151:
 724:stepper.c     **** 							}
 725:stepper.c     **** 						} else { // Triangle type
 726:stepper.c     **** 							prep.accelerate_until = intersect_distance;
 1210              		.loc 1 726 0
 1211 0356 9C4D     		ldr	r5, .L164
 1212              	.LVL110:
 1213 0358 C5F8EC90 		str	r9, [r5, #236]	@ float
 727:stepper.c     **** 							prep.decelerate_after = intersect_distance;
 1214              		.loc 1 727 0
 1215 035c C5F8F090 		str	r9, [r5, #240]	@ float
 728:stepper.c     **** 							prep.maximum_speed = sqrt(2.0*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 1216              		.loc 1 728 0
 1217 0360 F069     		ldr	r0, [r6, #28]	@ float
 1218 0362 FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 37


 1219              	.LVL111:
 1220 0366 0246     		mov	r2, r0
 1221 0368 0B46     		mov	r3, r1
 1222 036a FFF7FEFF 		bl	__aeabi_dadd
 1223              	.LVL112:
 1224 036e 0646     		mov	r6, r0
 1225 0370 0F46     		mov	r7, r1
 1226              	.LVL113:
 1227 0372 4846     		mov	r0, r9
 1228 0374 FFF7FEFF 		bl	__aeabi_f2d
 1229              	.LVL114:
 1230 0378 0246     		mov	r2, r0
 1231 037a 0B46     		mov	r3, r1
 1232 037c 3046     		mov	r0, r6
 1233 037e 3946     		mov	r1, r7
 1234 0380 FFF7FEFF 		bl	__aeabi_dmul
 1235              	.LVL115:
 1236 0384 0646     		mov	r6, r0
 1237 0386 0F46     		mov	r7, r1
 1238 0388 2046     		mov	r0, r4
 1239 038a FFF7FEFF 		bl	__aeabi_f2d
 1240              	.LVL116:
 1241 038e 0246     		mov	r2, r0
 1242 0390 0B46     		mov	r3, r1
 1243 0392 3046     		mov	r0, r6
 1244 0394 3946     		mov	r1, r7
 1245 0396 FFF7FEFF 		bl	__aeabi_dadd
 1246              	.LVL117:
 1247 039a FFF7FEFF 		bl	sqrt
 1248              	.LVL118:
 1249 039e FFF7FEFF 		bl	__aeabi_d2f
 1250              	.LVL119:
 1251 03a2 C5F8E400 		str	r0, [r5, #228]	@ float
 1252 03a6 0CE0     		b	.L69
 1253              	.LVL120:
 1254              	.L150:
 729:stepper.c     **** 						}
 730:stepper.c     **** 					} else { // Deceleration-only type
 731:stepper.c     ****             prep.ramp_type = RAMP_DECEL;
 1255              		.loc 1 731 0
 1256 03a8 0222     		movs	r2, #2
 1257 03aa 874B     		ldr	r3, .L164
 1258 03ac 83F8D820 		strb	r2, [r3, #216]
 1259 03b0 07E0     		b	.L69
 1260              	.L149:
 732:stepper.c     ****             // prep.decelerate_after = pl_block->millimeters;
 733:stepper.c     ****             // prep.maximum_speed = prep.current_speed;
 734:stepper.c     **** 					}
 735:stepper.c     **** 				} else { // Acceleration-only type
 736:stepper.c     **** 					prep.accelerate_until = 0.0;
 1261              		.loc 1 736 0
 1262 03b2 854B     		ldr	r3, .L164
 1263 03b4 0022     		movs	r2, #0
 1264 03b6 C3F8EC20 		str	r2, [r3, #236]	@ float
 737:stepper.c     **** 					// prep.decelerate_after = 0.0;
 738:stepper.c     **** 					prep.maximum_speed = prep.exit_speed;
 1265              		.loc 1 738 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 38


 1266 03ba D3F8E820 		ldr	r2, [r3, #232]	@ float
 1267 03be C3F8E420 		str	r2, [r3, #228]	@ float
 1268              	.LVL121:
 1269              	.L69:
 1270              	.LBE6:
 739:stepper.c     **** 				}
 740:stepper.c     **** 			}
 741:stepper.c     ****       
 742:stepper.c     ****       #ifdef VARIABLE_SPINDLE
 743:stepper.c     ****         bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updat
 1271              		.loc 1 743 0
 1272 03c2 824A     		ldr	r2, .L164+4
 1273 03c4 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 1274 03c6 43F00803 		orr	r3, r3, #8
 1275 03ca 1371     		strb	r3, [r2, #4]
 1276              	.L56:
 1277              	.LBE3:
 744:stepper.c     ****       #endif
 745:stepper.c     ****     }
 746:stepper.c     ****     
 747:stepper.c     ****     // Initialize new segment
 748:stepper.c     ****     segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 1278              		.loc 1 748 0
 1279 03cc 7E4B     		ldr	r3, .L164
 1280 03ce 93F82A20 		ldrb	r2, [r3, #42]	@ zero_extendqisi2
 1281 03d2 0792     		str	r2, [sp, #28]
 1282              	.LVL122:
 749:stepper.c     **** 
 750:stepper.c     ****     // Set new segment to point to the current segment data block.
 751:stepper.c     ****     prep_segment->st_block_index = prep.st_block_index;
 1283              		.loc 1 751 0
 1284 03d4 93F8C410 		ldrb	r1, [r3, #196]	@ zero_extendqisi2
 1285 03d8 03EBC202 		add	r2, r3, r2, lsl #3
 1286              	.LVL123:
 1287 03dc 82F83010 		strb	r1, [r2, #48]
 1288              	.LVL124:
 752:stepper.c     **** 
 753:stepper.c     ****     /*------------------------------------------------------------------------------------
 754:stepper.c     ****         Compute the average velocity of this new segment by determining the total distance
 755:stepper.c     ****       traveled over the segment time DT_SEGMENT. The following code first attempts to create
 756:stepper.c     ****       a full segment based on the current ramp conditions. If the segment time is incomplete
 757:stepper.c     ****       when terminating at a ramp state change, the code will continue to loop through the
 758:stepper.c     ****       progressing ramp states to fill the remaining segment execution time. However, if
 759:stepper.c     ****       an incomplete segment terminates at the end of the velocity profile, the segment is
 760:stepper.c     ****       considered completed despite having a truncated execution time less than DT_SEGMENT.
 761:stepper.c     ****         The velocity profile is always assumed to progress through the ramp sequence:
 762:stepper.c     ****       acceleration ramp, cruising state, and deceleration ramp. Each ramp's travel distance
 763:stepper.c     ****       may range from zero to the length of the block. Velocity profiles can end either at
 764:stepper.c     ****       the end of planner block (typical) or mid-block at the end of a forced deceleration,
 765:stepper.c     ****       such as from a feed hold.
 766:stepper.c     ****     */
 767:stepper.c     ****     float dt_max = DT_SEGMENT; // Maximum segment time
 768:stepper.c     ****     float dt = 0.0; // Initialize segment time
 769:stepper.c     ****     float time_var = dt_max; // Time worker variable
 770:stepper.c     ****     float mm_var; // mm-Distance worker variable
 771:stepper.c     ****     float speed_var; // Speed worker variable
 772:stepper.c     ****     float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 39


 1289              		.loc 1 772 0
 1290 03e0 D3F8FCA0 		ldr	r10, [r3, #252]
 1291 03e4 DAF82020 		ldr	r2, [r10, #32]	@ float
 1292 03e8 0692     		str	r2, [sp, #24]	@ float
 1293              	.LVL125:
 773:stepper.c     ****     float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 1294              		.loc 1 773 0
 1295 03ea 1046     		mov	r0, r2
 1296 03ec D3F8D410 		ldr	r1, [r3, #212]	@ float
 1297 03f0 FFF7FEFF 		bl	__aeabi_fsub
 1298              	.LVL126:
 1299 03f4 0390     		str	r0, [sp, #12]	@ float
 1300              	.LVL127:
 774:stepper.c     ****     if (minimum_mm < 0.0) { minimum_mm = 0.0; }
 1301              		.loc 1 774 0
 1302 03f6 0021     		movs	r1, #0
 1303 03f8 FFF7FEFF 		bl	__aeabi_fcmplt
 1304              	.LVL128:
 1305 03fc 08B1     		cbz	r0, .L84
 1306 03fe 0023     		movs	r3, #0
 1307 0400 0393     		str	r3, [sp, #12]	@ float
 1308              	.LVL129:
 1309              	.L84:
 1310 0402 DDF81890 		ldr	r9, [sp, #24]	@ float
 1311 0406 DFF8CCB1 		ldr	fp, .L164+12
 1312 040a 0023     		movs	r3, #0
 1313 040c 0193     		str	r3, [sp, #4]	@ float
 1314 040e CDF808B0 		str	fp, [sp, #8]	@ float
 1315              	.LVL130:
 1316              	.L107:
 775:stepper.c     **** 
 776:stepper.c     ****     do {
 777:stepper.c     ****       switch (prep.ramp_type) {
 1317              		.loc 1 777 0
 1318 0412 6D4B     		ldr	r3, .L164
 1319 0414 93F8D830 		ldrb	r3, [r3, #216]	@ zero_extendqisi2
 1320 0418 012B     		cmp	r3, #1
 1321 041a 00F0DD80 		beq	.L86
 1322 041e 002B     		cmp	r3, #0
 1323 0420 64D0     		beq	.L87
 1324 0422 032B     		cmp	r3, #3
 1325 0424 40F0FA80 		bne	.L153
 778:stepper.c     ****         case RAMP_DECEL_OVERRIDE:
 779:stepper.c     ****           speed_var = pl_block->acceleration*time_var;
 1326              		.loc 1 779 0
 1327 0428 DAF81C00 		ldr	r0, [r10, #28]	@ float
 1328 042c 5946     		mov	r1, fp
 1329 042e FFF7FEFF 		bl	__aeabi_fmul
 1330              	.LVL131:
 1331 0432 8046     		mov	r8, r0
 1332              	.LVL132:
 780:stepper.c     ****           mm_var = time_var*(prep.current_speed - 0.5*speed_var);
 1333              		.loc 1 780 0
 1334 0434 644C     		ldr	r4, .L164
 1335 0436 D4F8E060 		ldr	r6, [r4, #224]	@ float
 1336 043a FFF7FEFF 		bl	__aeabi_f2d
 1337              	.LVL133:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 40


 1338 043e 0022     		movs	r2, #0
 1339 0440 634B     		ldr	r3, .L164+8
 1340 0442 FFF7FEFF 		bl	__aeabi_dmul
 1341              	.LVL134:
 1342 0446 CDE90401 		strd	r0, [sp, #16]
 1343 044a 3046     		mov	r0, r6
 1344 044c FFF7FEFF 		bl	__aeabi_f2d
 1345              	.LVL135:
 1346 0450 DDE90423 		ldrd	r2, [sp, #16]
 1347 0454 FFF7FEFF 		bl	__aeabi_dsub
 1348              	.LVL136:
 1349 0458 CDE90401 		strd	r0, [sp, #16]
 1350 045c 5846     		mov	r0, fp
 1351 045e FFF7FEFF 		bl	__aeabi_f2d
 1352              	.LVL137:
 1353 0462 DDE90423 		ldrd	r2, [sp, #16]
 1354 0466 FFF7FEFF 		bl	__aeabi_dmul
 1355              	.LVL138:
 1356 046a FFF7FEFF 		bl	__aeabi_d2f
 1357              	.LVL139:
 1358 046e 0546     		mov	r5, r0
 1359              	.LVL140:
 781:stepper.c     ****           mm_remaining -= mm_var;
 1360              		.loc 1 781 0
 1361 0470 4846     		mov	r0, r9
 1362              	.LVL141:
 1363 0472 2946     		mov	r1, r5
 1364 0474 FFF7FEFF 		bl	__aeabi_fsub
 1365              	.LVL142:
 1366 0478 0746     		mov	r7, r0
 1367              	.LVL143:
 782:stepper.c     ****           if ((mm_remaining < prep.accelerate_until) || (mm_var <= 0)) {
 1368              		.loc 1 782 0
 1369 047a D4F8EC90 		ldr	r9, [r4, #236]	@ float
 1370 047e 4846     		mov	r0, r9
 1371              	.LVL144:
 1372 0480 3946     		mov	r1, r7
 1373 0482 FFF7FEFF 		bl	__aeabi_fcmpgt
 1374              	.LVL145:
 1375 0486 20B9     		cbnz	r0, .L89
 1376              		.loc 1 782 0 is_stmt 0 discriminator 1
 1377 0488 2846     		mov	r0, r5
 1378 048a 0021     		movs	r1, #0
 1379 048c FFF7FEFF 		bl	__aeabi_fcmple
 1380              	.LVL146:
 1381 0490 18B3     		cbz	r0, .L154
 1382              	.L89:
 1383              	.LVL147:
 783:stepper.c     ****             // Cruise or cruise-deceleration types only for deceleration override.
 784:stepper.c     ****             mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 785:stepper.c     ****             time_var = 2.0*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_sp
 1384              		.loc 1 785 0 is_stmt 1
 1385 0492 0698     		ldr	r0, [sp, #24]	@ float
 1386 0494 4946     		mov	r1, r9
 1387 0496 FFF7FEFF 		bl	__aeabi_fsub
 1388              	.LVL148:
 1389 049a FFF7FEFF 		bl	__aeabi_f2d
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 41


 1390              	.LVL149:
 1391 049e 0246     		mov	r2, r0
 1392 04a0 0B46     		mov	r3, r1
 1393 04a2 FFF7FEFF 		bl	__aeabi_dadd
 1394              	.LVL150:
 1395 04a6 0446     		mov	r4, r0
 1396 04a8 0D46     		mov	r5, r1
 1397              	.LVL151:
 1398 04aa 474F     		ldr	r7, .L164
 1399 04ac D7F8E480 		ldr	r8, [r7, #228]	@ float
 1400              	.LVL152:
 1401 04b0 3046     		mov	r0, r6
 1402 04b2 4146     		mov	r1, r8
 1403 04b4 FFF7FEFF 		bl	__aeabi_fadd
 1404              	.LVL153:
 1405 04b8 FFF7FEFF 		bl	__aeabi_f2d
 1406              	.LVL154:
 1407 04bc 0246     		mov	r2, r0
 1408 04be 0B46     		mov	r3, r1
 1409 04c0 2046     		mov	r0, r4
 1410 04c2 2946     		mov	r1, r5
 1411 04c4 FFF7FEFF 		bl	__aeabi_ddiv
 1412              	.LVL155:
 1413 04c8 FFF7FEFF 		bl	__aeabi_d2f
 1414              	.LVL156:
 1415 04cc 8346     		mov	fp, r0
 1416              	.LVL157:
 786:stepper.c     ****             prep.ramp_type = RAMP_CRUISE;
 1417              		.loc 1 786 0
 1418 04ce 0123     		movs	r3, #1
 1419 04d0 87F8D830 		strb	r3, [r7, #216]
 787:stepper.c     ****             prep.current_speed = prep.maximum_speed;
 1420              		.loc 1 787 0
 1421 04d4 C7F8E080 		str	r8, [r7, #224]	@ float
 1422 04d8 09E1     		b	.L92
 1423              	.LVL158:
 1424              	.L154:
 788:stepper.c     ****           } else { // Mid-deceleration override ramp.
 789:stepper.c     ****             prep.current_speed -= speed_var;
 1425              		.loc 1 789 0
 1426 04da 3046     		mov	r0, r6
 1427 04dc 4146     		mov	r1, r8
 1428 04de FFF7FEFF 		bl	__aeabi_fsub
 1429              	.LVL159:
 1430 04e2 394B     		ldr	r3, .L164
 1431 04e4 C3F8E000 		str	r0, [r3, #224]	@ float
 781:stepper.c     ****           if ((mm_remaining < prep.accelerate_until) || (mm_var <= 0)) {
 1432              		.loc 1 781 0
 1433 04e8 B946     		mov	r9, r7
 1434 04ea 00E1     		b	.L92
 1435              	.LVL160:
 1436              	.L87:
 790:stepper.c     ****           }
 791:stepper.c     ****           break;
 792:stepper.c     ****         case RAMP_ACCEL:
 793:stepper.c     ****           // NOTE: Acceleration ramp only computes during first do-while loop.
 794:stepper.c     ****           speed_var = pl_block->acceleration*time_var;
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 42


 1437              		.loc 1 794 0
 1438 04ec DAF81C00 		ldr	r0, [r10, #28]	@ float
 1439 04f0 5946     		mov	r1, fp
 1440 04f2 FFF7FEFF 		bl	__aeabi_fmul
 1441              	.LVL161:
 1442 04f6 8046     		mov	r8, r0
 1443              	.LVL162:
 795:stepper.c     ****           mm_remaining -= time_var*(prep.current_speed + 0.5*speed_var);
 1444              		.loc 1 795 0
 1445 04f8 334F     		ldr	r7, .L164
 1446 04fa D7F8E060 		ldr	r6, [r7, #224]	@ float
 1447 04fe FFF7FEFF 		bl	__aeabi_f2d
 1448              	.LVL163:
 1449 0502 0022     		movs	r2, #0
 1450 0504 324B     		ldr	r3, .L164+8
 1451 0506 FFF7FEFF 		bl	__aeabi_dmul
 1452              	.LVL164:
 1453 050a 0446     		mov	r4, r0
 1454 050c 0D46     		mov	r5, r1
 1455 050e 3046     		mov	r0, r6
 1456 0510 FFF7FEFF 		bl	__aeabi_f2d
 1457              	.LVL165:
 1458 0514 2246     		mov	r2, r4
 1459 0516 2B46     		mov	r3, r5
 1460 0518 FFF7FEFF 		bl	__aeabi_dadd
 1461              	.LVL166:
 1462 051c 0446     		mov	r4, r0
 1463 051e 0D46     		mov	r5, r1
 1464 0520 5846     		mov	r0, fp
 1465 0522 FFF7FEFF 		bl	__aeabi_f2d
 1466              	.LVL167:
 1467 0526 2246     		mov	r2, r4
 1468 0528 2B46     		mov	r3, r5
 1469 052a FFF7FEFF 		bl	__aeabi_dmul
 1470              	.LVL168:
 1471 052e 0446     		mov	r4, r0
 1472 0530 0D46     		mov	r5, r1
 1473 0532 4846     		mov	r0, r9
 1474 0534 FFF7FEFF 		bl	__aeabi_f2d
 1475              	.LVL169:
 1476 0538 2246     		mov	r2, r4
 1477 053a 2B46     		mov	r3, r5
 1478 053c FFF7FEFF 		bl	__aeabi_dsub
 1479              	.LVL170:
 1480 0540 FFF7FEFF 		bl	__aeabi_d2f
 1481              	.LVL171:
 1482 0544 8146     		mov	r9, r0
 1483              	.LVL172:
 796:stepper.c     ****           if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 1484              		.loc 1 796 0
 1485 0546 D7F8EC70 		ldr	r7, [r7, #236]	@ float
 1486 054a 3846     		mov	r0, r7
 1487              	.LVL173:
 1488 054c 4946     		mov	r1, r9
 1489 054e FFF7FEFF 		bl	__aeabi_fcmpgt
 1490              	.LVL174:
 1491 0552 88B3     		cbz	r0, .L155
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 43


 1492              	.LVL175:
 797:stepper.c     ****             // Acceleration-cruise, acceleration-deceleration ramp junction, or end of block.
 798:stepper.c     ****             mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 799:stepper.c     ****             time_var = 2.0*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_sp
 1493              		.loc 1 799 0
 1494 0554 0698     		ldr	r0, [sp, #24]	@ float
 1495 0556 3946     		mov	r1, r7
 1496 0558 FFF7FEFF 		bl	__aeabi_fsub
 1497              	.LVL176:
 1498 055c FFF7FEFF 		bl	__aeabi_f2d
 1499              	.LVL177:
 1500 0560 0246     		mov	r2, r0
 1501 0562 0B46     		mov	r3, r1
 1502 0564 FFF7FEFF 		bl	__aeabi_dadd
 1503              	.LVL178:
 1504 0568 0446     		mov	r4, r0
 1505 056a 0D46     		mov	r5, r1
 1506 056c DFF85890 		ldr	r9, .L164
 1507 0570 D9F8E480 		ldr	r8, [r9, #228]	@ float
 1508              	.LVL179:
 1509 0574 3046     		mov	r0, r6
 1510 0576 4146     		mov	r1, r8
 1511 0578 FFF7FEFF 		bl	__aeabi_fadd
 1512              	.LVL180:
 1513 057c FFF7FEFF 		bl	__aeabi_f2d
 1514              	.LVL181:
 1515 0580 0246     		mov	r2, r0
 1516 0582 0B46     		mov	r3, r1
 1517 0584 2046     		mov	r0, r4
 1518 0586 2946     		mov	r1, r5
 1519 0588 FFF7FEFF 		bl	__aeabi_ddiv
 1520              	.LVL182:
 1521 058c FFF7FEFF 		bl	__aeabi_d2f
 1522              	.LVL183:
 1523 0590 8346     		mov	fp, r0
 1524              	.LVL184:
 800:stepper.c     ****             if (mm_remaining == prep.decelerate_after) { prep.ramp_type = RAMP_DECEL; }
 1525              		.loc 1 800 0
 1526 0592 3846     		mov	r0, r7
 1527              	.LVL185:
 1528 0594 D9F8F010 		ldr	r1, [r9, #240]	@ float
 1529 0598 FFF7FEFF 		bl	__aeabi_fcmpeq
 1530              	.LVL186:
 1531 059c 18B1     		cbz	r0, .L156
 1532              		.loc 1 800 0 is_stmt 0 discriminator 1
 1533 059e 0222     		movs	r2, #2
 1534 05a0 89F8D820 		strb	r2, [r9, #216]
 1535 05a4 03E0     		b	.L97
 1536              	.L156:
 801:stepper.c     ****             else { prep.ramp_type = RAMP_CRUISE; }
 1537              		.loc 1 801 0 is_stmt 1
 1538 05a6 0122     		movs	r2, #1
 1539 05a8 074B     		ldr	r3, .L164
 1540 05aa 83F8D820 		strb	r2, [r3, #216]
 1541              	.L97:
 802:stepper.c     ****             prep.current_speed = prep.maximum_speed;
 1542              		.loc 1 802 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 44


 1543 05ae 064B     		ldr	r3, .L164
 1544 05b0 C3F8E080 		str	r8, [r3, #224]	@ float
 798:stepper.c     ****             time_var = 2.0*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_sp
 1545              		.loc 1 798 0
 1546 05b4 B946     		mov	r9, r7
 1547 05b6 9AE0     		b	.L92
 1548              	.LVL187:
 1549              	.L155:
 803:stepper.c     ****           } else { // Acceleration only.
 804:stepper.c     ****             prep.current_speed += speed_var;
 1550              		.loc 1 804 0
 1551 05b8 4046     		mov	r0, r8
 1552 05ba 3146     		mov	r1, r6
 1553 05bc FFF7FEFF 		bl	__aeabi_fadd
 1554              	.LVL188:
 1555 05c0 014B     		ldr	r3, .L164
 1556 05c2 C3F8E000 		str	r0, [r3, #224]	@ float
 1557 05c6 92E0     		b	.L92
 1558              	.L165:
 1559              		.align	2
 1560              	.L164:
 1561 05c8 00000000 		.word	.LANCHOR0
 1562 05cc 00000000 		.word	sys
 1563 05d0 0000E03F 		.word	1071644672
 1564 05d4 3EC32E39 		.word	959365950
 1565              	.LVL189:
 1566              	.L86:
 805:stepper.c     ****           }
 806:stepper.c     ****           break;
 807:stepper.c     ****         case RAMP_CRUISE:
 808:stepper.c     ****           // NOTE: mm_var used to retain the last mm_remaining for incomplete segment time_var calc
 809:stepper.c     ****           // NOTE: If maximum_speed*time_var value is too low, round-off can cause mm_var to not ch
 810:stepper.c     ****           //   prevent this, simply enforce a minimum speed threshold in the planner.
 811:stepper.c     ****           mm_var = mm_remaining - prep.maximum_speed*time_var;
 1567              		.loc 1 811 0
 1568 05d8 AD4C     		ldr	r4, .L166+8
 1569 05da D4F8E460 		ldr	r6, [r4, #228]	@ float
 1570 05de 3046     		mov	r0, r6
 1571 05e0 5946     		mov	r1, fp
 1572 05e2 FFF7FEFF 		bl	__aeabi_fmul
 1573              	.LVL190:
 1574 05e6 0146     		mov	r1, r0
 1575 05e8 4846     		mov	r0, r9
 1576 05ea FFF7FEFF 		bl	__aeabi_fsub
 1577              	.LVL191:
 1578 05ee 0546     		mov	r5, r0
 1579              	.LVL192:
 812:stepper.c     ****           if (mm_var < prep.decelerate_after) { // End of cruise.
 1580              		.loc 1 812 0
 1581 05f0 D4F8F040 		ldr	r4, [r4, #240]	@ float
 1582 05f4 2046     		mov	r0, r4
 1583              	.LVL193:
 1584 05f6 2946     		mov	r1, r5
 1585 05f8 FFF7FEFF 		bl	__aeabi_fcmpgt
 1586              	.LVL194:
 1587 05fc 0028     		cmp	r0, #0
 1588 05fe 75D0     		beq	.L157
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 45


 813:stepper.c     ****             // Cruise-deceleration junction or end of block.
 814:stepper.c     ****             time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 1589              		.loc 1 814 0
 1590 0600 4846     		mov	r0, r9
 1591 0602 2146     		mov	r1, r4
 1592 0604 FFF7FEFF 		bl	__aeabi_fsub
 1593              	.LVL195:
 1594 0608 3146     		mov	r1, r6
 1595 060a FFF7FEFF 		bl	__aeabi_fdiv
 1596              	.LVL196:
 1597 060e 8346     		mov	fp, r0
 1598              	.LVL197:
 815:stepper.c     ****             mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
 816:stepper.c     ****             prep.ramp_type = RAMP_DECEL;
 1599              		.loc 1 816 0
 1600 0610 0222     		movs	r2, #2
 1601 0612 9F4B     		ldr	r3, .L166+8
 1602 0614 83F8D820 		strb	r2, [r3, #216]
 815:stepper.c     ****             mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
 1603              		.loc 1 815 0
 1604 0618 A146     		mov	r9, r4
 1605 061a 68E0     		b	.L92
 1606              	.LVL198:
 1607              	.L153:
 817:stepper.c     ****           } else { // Cruising only.
 818:stepper.c     ****             mm_remaining = mm_var;
 819:stepper.c     ****           }
 820:stepper.c     ****           break;
 821:stepper.c     ****         default: // case RAMP_DECEL:
 822:stepper.c     ****           // NOTE: mm_var used as a misc worker variable to prevent errors when near zero speed.
 823:stepper.c     ****           speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 1608              		.loc 1 823 0
 1609 061c DAF81C00 		ldr	r0, [r10, #28]	@ float
 1610 0620 5946     		mov	r1, fp
 1611 0622 FFF7FEFF 		bl	__aeabi_fmul
 1612              	.LVL199:
 1613 0626 0546     		mov	r5, r0
 1614              	.LVL200:
 824:stepper.c     ****           if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 1615              		.loc 1 824 0
 1616 0628 994B     		ldr	r3, .L166+8
 1617 062a D3F8E040 		ldr	r4, [r3, #224]	@ float
 1618 062e 2046     		mov	r0, r4
 1619              	.LVL201:
 1620 0630 2946     		mov	r1, r5
 1621 0632 FFF7FEFF 		bl	__aeabi_fcmpgt
 1622              	.LVL202:
 1623 0636 0028     		cmp	r0, #0
 1624 0638 34D0     		beq	.L99
 825:stepper.c     ****             // Compute distance from end of segment to end of block.
 826:stepper.c     ****             mm_var = mm_remaining - time_var*(prep.current_speed - 0.5*speed_var); // (mm)
 1625              		.loc 1 826 0
 1626 063a 2846     		mov	r0, r5
 1627 063c FFF7FEFF 		bl	__aeabi_f2d
 1628              	.LVL203:
 1629 0640 0022     		movs	r2, #0
 1630 0642 944B     		ldr	r3, .L166+12
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 46


 1631 0644 FFF7FEFF 		bl	__aeabi_dmul
 1632              	.LVL204:
 1633 0648 0646     		mov	r6, r0
 1634 064a 0F46     		mov	r7, r1
 1635 064c 2046     		mov	r0, r4
 1636 064e FFF7FEFF 		bl	__aeabi_f2d
 1637              	.LVL205:
 1638 0652 3246     		mov	r2, r6
 1639 0654 3B46     		mov	r3, r7
 1640 0656 FFF7FEFF 		bl	__aeabi_dsub
 1641              	.LVL206:
 1642 065a 0646     		mov	r6, r0
 1643 065c 0F46     		mov	r7, r1
 1644 065e 5846     		mov	r0, fp
 1645 0660 FFF7FEFF 		bl	__aeabi_f2d
 1646              	.LVL207:
 1647 0664 3246     		mov	r2, r6
 1648 0666 3B46     		mov	r3, r7
 1649 0668 FFF7FEFF 		bl	__aeabi_dmul
 1650              	.LVL208:
 1651 066c 0646     		mov	r6, r0
 1652 066e 0F46     		mov	r7, r1
 1653 0670 4846     		mov	r0, r9
 1654 0672 FFF7FEFF 		bl	__aeabi_f2d
 1655              	.LVL209:
 1656 0676 3246     		mov	r2, r6
 1657 0678 3B46     		mov	r3, r7
 1658 067a FFF7FEFF 		bl	__aeabi_dsub
 1659              	.LVL210:
 1660 067e FFF7FEFF 		bl	__aeabi_d2f
 1661              	.LVL211:
 1662 0682 0646     		mov	r6, r0
 1663              	.LVL212:
 827:stepper.c     ****             if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 1664              		.loc 1 827 0
 1665 0684 824B     		ldr	r3, .L166+8
 1666 0686 D3F8DC00 		ldr	r0, [r3, #220]	@ float
 1667              	.LVL213:
 1668 068a 3146     		mov	r1, r6
 1669 068c FFF7FEFF 		bl	__aeabi_fcmplt
 1670              	.LVL214:
 1671 0690 40B1     		cbz	r0, .L99
 1672              	.LVL215:
 828:stepper.c     ****               mm_remaining = mm_var;
 829:stepper.c     ****               prep.current_speed -= speed_var;
 1673              		.loc 1 829 0
 1674 0692 2046     		mov	r0, r4
 1675 0694 2946     		mov	r1, r5
 1676 0696 FFF7FEFF 		bl	__aeabi_fsub
 1677              	.LVL216:
 1678 069a 7D4B     		ldr	r3, .L166+8
 1679 069c C3F8E000 		str	r0, [r3, #224]	@ float
 828:stepper.c     ****               mm_remaining = mm_var;
 1680              		.loc 1 828 0
 1681 06a0 B146     		mov	r9, r6
 830:stepper.c     ****               break; // Segment complete. Exit switch-case statement. Continue do-while loop.
 1682              		.loc 1 830 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 47


 1683 06a2 24E0     		b	.L92
 1684              	.LVL217:
 1685              	.L99:
 831:stepper.c     ****             }
 832:stepper.c     ****           }
 833:stepper.c     ****           // Otherwise, at end of block or end of forced-deceleration.
 834:stepper.c     ****           time_var = 2.0*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 1686              		.loc 1 834 0
 1687 06a4 7A4D     		ldr	r5, .L166+8
 1688              	.LVL218:
 1689 06a6 D5F8DC80 		ldr	r8, [r5, #220]	@ float
 1690 06aa 4846     		mov	r0, r9
 1691 06ac 4146     		mov	r1, r8
 1692 06ae FFF7FEFF 		bl	__aeabi_fsub
 1693              	.LVL219:
 1694 06b2 FFF7FEFF 		bl	__aeabi_f2d
 1695              	.LVL220:
 1696 06b6 0246     		mov	r2, r0
 1697 06b8 0B46     		mov	r3, r1
 1698 06ba FFF7FEFF 		bl	__aeabi_dadd
 1699              	.LVL221:
 1700 06be 0646     		mov	r6, r0
 1701 06c0 0F46     		mov	r7, r1
 1702 06c2 D5F8E890 		ldr	r9, [r5, #232]	@ float
 1703              	.LVL222:
 1704 06c6 2046     		mov	r0, r4
 1705 06c8 4946     		mov	r1, r9
 1706 06ca FFF7FEFF 		bl	__aeabi_fadd
 1707              	.LVL223:
 1708 06ce FFF7FEFF 		bl	__aeabi_f2d
 1709              	.LVL224:
 1710 06d2 0246     		mov	r2, r0
 1711 06d4 0B46     		mov	r3, r1
 1712 06d6 3046     		mov	r0, r6
 1713 06d8 3946     		mov	r1, r7
 1714 06da FFF7FEFF 		bl	__aeabi_ddiv
 1715              	.LVL225:
 1716 06de FFF7FEFF 		bl	__aeabi_d2f
 1717              	.LVL226:
 1718 06e2 8346     		mov	fp, r0
 1719              	.LVL227:
 835:stepper.c     ****           mm_remaining = prep.mm_complete;
 836:stepper.c     ****           prep.current_speed = prep.exit_speed;
 1720              		.loc 1 836 0
 1721 06e4 C5F8E090 		str	r9, [r5, #224]	@ float
 835:stepper.c     ****           mm_remaining = prep.mm_complete;
 1722              		.loc 1 835 0
 1723 06e8 C146     		mov	r9, r8
 1724 06ea 00E0     		b	.L92
 1725              	.LVL228:
 1726              	.L157:
 818:stepper.c     ****           }
 1727              		.loc 1 818 0
 1728 06ec A946     		mov	r9, r5
 1729              	.LVL229:
 1730              	.L92:
 837:stepper.c     ****       }
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 48


 838:stepper.c     ****       dt += time_var; // Add computed ramp time to total segment time.
 1731              		.loc 1 838 0
 1732 06ee 0198     		ldr	r0, [sp, #4]	@ float
 1733 06f0 5946     		mov	r1, fp
 1734 06f2 FFF7FEFF 		bl	__aeabi_fadd
 1735              	.LVL230:
 1736 06f6 0190     		str	r0, [sp, #4]	@ float
 1737              	.LVL231:
 839:stepper.c     ****       if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 1738              		.loc 1 839 0
 1739 06f8 0299     		ldr	r1, [sp, #8]	@ float
 1740 06fa FFF7FEFF 		bl	__aeabi_fcmplt
 1741              	.LVL232:
 1742 06fe 28B1     		cbz	r0, .L158
 1743              		.loc 1 839 0 is_stmt 0 discriminator 1
 1744 0700 0298     		ldr	r0, [sp, #8]	@ float
 1745 0702 0199     		ldr	r1, [sp, #4]	@ float
 1746 0704 FFF7FEFF 		bl	__aeabi_fsub
 1747              	.LVL233:
 1748 0708 8346     		mov	fp, r0
 1749              	.LVL234:
 1750 070a 13E0     		b	.L104
 1751              	.LVL235:
 1752              	.L158:
 840:stepper.c     ****       else {
 841:stepper.c     ****         if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 1753              		.loc 1 841 0 is_stmt 1
 1754 070c 4846     		mov	r0, r9
 1755 070e 0399     		ldr	r1, [sp, #12]	@ float
 1756 0710 FFF7FEFF 		bl	__aeabi_fcmpgt
 1757              	.LVL236:
 1758 0714 B8B1     		cbz	r0, .L105
 842:stepper.c     ****           // Increase segment time to ensure at least one step in segment. Override and loop
 843:stepper.c     ****           // through distance calculations until minimum_mm or mm_complete.
 844:stepper.c     ****           dt_max += DT_SEGMENT;
 1759              		.loc 1 844 0
 1760 0716 0298     		ldr	r0, [sp, #8]	@ float
 1761 0718 FFF7FEFF 		bl	__aeabi_f2d
 1762              	.LVL237:
 1763 071c 5AA3     		adr	r3, .L166
 1764 071e D3E90023 		ldrd	r2, [r3]
 1765 0722 FFF7FEFF 		bl	__aeabi_dadd
 1766              	.LVL238:
 1767 0726 FFF7FEFF 		bl	__aeabi_d2f
 1768              	.LVL239:
 1769 072a 0290     		str	r0, [sp, #8]	@ float
 1770              	.LVL240:
 845:stepper.c     ****           time_var = dt_max - dt;
 1771              		.loc 1 845 0
 1772 072c 0199     		ldr	r1, [sp, #4]	@ float
 1773 072e FFF7FEFF 		bl	__aeabi_fsub
 1774              	.LVL241:
 1775 0732 8346     		mov	fp, r0
 1776              	.LVL242:
 1777              	.L104:
 846:stepper.c     ****         } else {
 847:stepper.c     ****           break; // **Complete** Exit loop. Segment execution time maxed.
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 49


 848:stepper.c     ****         }
 849:stepper.c     ****       }
 850:stepper.c     ****     } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 1778              		.loc 1 850 0
 1779 0734 564B     		ldr	r3, .L166+8
 1780 0736 D3F8DC00 		ldr	r0, [r3, #220]	@ float
 1781              	.LVL243:
 1782 073a 4946     		mov	r1, r9
 1783 073c FFF7FEFF 		bl	__aeabi_fcmplt
 1784              	.LVL244:
 1785 0740 0028     		cmp	r0, #0
 1786 0742 7FF466AE 		bne	.L107
 1787              	.L105:
 851:stepper.c     **** 
 852:stepper.c     ****     #ifdef VARIABLE_SPINDLE
 853:stepper.c     ****       /* -----------------------------------------------------------------------------------
 854:stepper.c     ****         Compute spindle speed PWM output for step segment
 855:stepper.c     ****       */
 856:stepper.c     ****       
 857:stepper.c     ****       if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PW
 1788              		.loc 1 857 0
 1789 0746 524B     		ldr	r3, .L166+8
 1790 0748 D3F80431 		ldr	r3, [r3, #260]
 1791 074c 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 1792 074e 23B9     		cbnz	r3, .L108
 1793              		.loc 1 857 0 is_stmt 0 discriminator 1
 1794 0750 514A     		ldr	r2, .L166+16
 1795 0752 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1796 0754 12F0080F 		tst	r2, #8
 1797 0758 26D0     		beq	.L109
 1798              	.L108:
 858:stepper.c     ****         if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 1799              		.loc 1 858 0 is_stmt 1
 1800 075a 9AF81120 		ldrb	r2, [r10, #17]	@ zero_extendqisi2
 1801 075e 12F0300F 		tst	r2, #48
 1802 0762 15D0     		beq	.L110
 1803              	.LBB7:
 859:stepper.c     ****           float rpm = pl_block->spindle_speed;
 1804              		.loc 1 859 0
 1805 0764 DAF83040 		ldr	r4, [r10, #48]	@ float
 1806              	.LVL245:
 860:stepper.c     ****           // NOTE: Feed and rapid overrides are independent of PWM value and do not alter laser pow
 861:stepper.c     ****           if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 1807              		.loc 1 861 0
 1808 0768 5BB1     		cbz	r3, .L111
 1809              		.loc 1 861 0 is_stmt 0 discriminator 1
 1810 076a 494B     		ldr	r3, .L166+8
 1811 076c D3F8E000 		ldr	r0, [r3, #224]	@ float
 1812 0770 D3F8F410 		ldr	r1, [r3, #244]	@ float
 1813 0774 FFF7FEFF 		bl	__aeabi_fmul
 1814              	.LVL246:
 1815 0778 0146     		mov	r1, r0
 1816 077a 2046     		mov	r0, r4
 1817 077c FFF7FEFF 		bl	__aeabi_fmul
 1818              	.LVL247:
 1819 0780 0446     		mov	r4, r0
 1820              	.LVL248:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 50


 1821              	.L111:
 862:stepper.c     ****           // If current_speed is zero, then may need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE)
 863:stepper.c     ****           // but this would be instantaneous only and during a motion. May not matter at all.
 864:stepper.c     ****           prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 1822              		.loc 1 864 0 is_stmt 1
 1823 0782 2046     		mov	r0, r4
 1824 0784 FFF7FEFF 		bl	spindle_compute_pwm_value
 1825              	.LVL249:
 1826 0788 414B     		ldr	r3, .L166+8
 1827 078a 83F8F800 		strb	r0, [r3, #248]
 1828              	.LBE7:
 1829 078e 06E0     		b	.L112
 1830              	.LVL250:
 1831              	.L110:
 865:stepper.c     ****         } else { 
 866:stepper.c     ****           sys.spindle_speed = 0.0;
 1832              		.loc 1 866 0
 1833 0790 0022     		movs	r2, #0
 1834 0792 414B     		ldr	r3, .L166+16
 1835 0794 1A61     		str	r2, [r3, #16]	@ float
 867:stepper.c     ****           prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 1836              		.loc 1 867 0
 1837 0796 0022     		movs	r2, #0
 1838 0798 3D4B     		ldr	r3, .L166+8
 1839 079a 83F8F820 		strb	r2, [r3, #248]
 1840              	.L112:
 868:stepper.c     ****         }
 869:stepper.c     ****         bit_false(sys.step_control,STEP_CONTROL_UPDATE_SPINDLE_PWM);
 1841              		.loc 1 869 0
 1842 079e 3E4A     		ldr	r2, .L166+16
 1843 07a0 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 1844 07a2 23F00803 		bic	r3, r3, #8
 1845 07a6 1371     		strb	r3, [r2, #4]
 1846              	.L109:
 870:stepper.c     ****       }
 871:stepper.c     ****       prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 1847              		.loc 1 871 0
 1848 07a8 394E     		ldr	r6, .L166+8
 1849 07aa 96F8F830 		ldrb	r3, [r6, #248]	@ zero_extendqisi2
 1850 07ae 079A     		ldr	r2, [sp, #28]
 1851 07b0 06EBC208 		add	r8, r6, r2, lsl #3
 1852 07b4 88F83230 		strb	r3, [r8, #50]
 872:stepper.c     **** 
 873:stepper.c     ****     #endif
 874:stepper.c     ****     
 875:stepper.c     ****     /* -----------------------------------------------------------------------------------
 876:stepper.c     ****        Compute segment step rate, steps to execute, and apply necessary rate corrections.
 877:stepper.c     ****        NOTE: Steps are computed by direct scalar conversion of the millimeter distance
 878:stepper.c     ****        remaining in the block, rather than incrementally tallying the steps executed per
 879:stepper.c     ****        segment. This helps in removing floating point round-off issues of several additions.
 880:stepper.c     ****        However, since floats have only 7.2 significant digits, long moves with extremely
 881:stepper.c     ****        high step counts can exceed the precision of floats, which can lead to lost steps.
 882:stepper.c     ****        Fortunately, this scenario is highly unlikely and unrealistic in CNC machines
 883:stepper.c     ****        supported by Grbl (i.e. exceeding 10 meters axis travel at 200 step/mm).
 884:stepper.c     ****     */
 885:stepper.c     ****     float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 1853              		.loc 1 885 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 51


 1854 07b8 D6F8D000 		ldr	r0, [r6, #208]	@ float
 1855 07bc 4946     		mov	r1, r9
 1856 07be FFF7FEFF 		bl	__aeabi_fmul
 1857              	.LVL251:
 1858 07c2 0546     		mov	r5, r0
 1859              	.LVL252:
 886:stepper.c     ****     float n_steps_remaining = ceil(step_dist_remaining); // Round-up current steps remaining
 1860              		.loc 1 886 0
 1861 07c4 FFF7FEFF 		bl	__aeabi_f2d
 1862              	.LVL253:
 1863 07c8 FFF7FEFF 		bl	ceil
 1864              	.LVL254:
 1865 07cc FFF7FEFF 		bl	__aeabi_d2f
 1866              	.LVL255:
 1867 07d0 0446     		mov	r4, r0
 1868              	.LVL256:
 887:stepper.c     ****     float last_n_steps_remaining = ceil(prep.steps_remaining); // Round-up last steps remaining
 1869              		.loc 1 887 0
 1870 07d2 D6F8CC00 		ldr	r0, [r6, #204]	@ float
 1871              	.LVL257:
 1872 07d6 FFF7FEFF 		bl	__aeabi_f2d
 1873              	.LVL258:
 1874 07da FFF7FEFF 		bl	ceil
 1875              	.LVL259:
 1876 07de FFF7FEFF 		bl	__aeabi_d2f
 1877              	.LVL260:
 1878 07e2 0646     		mov	r6, r0
 1879              	.LVL261:
 888:stepper.c     ****     prep_segment->n_step = last_n_steps_remaining-n_steps_remaining; // Compute number of steps to 
 1880              		.loc 1 888 0
 1881 07e4 2146     		mov	r1, r4
 1882 07e6 FFF7FEFF 		bl	__aeabi_fsub
 1883              	.LVL262:
 1884 07ea FFF7FEFF 		bl	__aeabi_f2uiz
 1885              	.LVL263:
 1886 07ee 87B2     		uxth	r7, r0
 1887 07f0 A8F82C70 		strh	r7, [r8, #44]	@ movhi
 889:stepper.c     **** 
 890:stepper.c     ****     // Bail if we are at the end of a feed hold and don't have a step to execute.
 891:stepper.c     ****     if (prep_segment->n_step == 0) {
 1888              		.loc 1 891 0
 1889 07f4 4FB9     		cbnz	r7, .L113
 892:stepper.c     ****       if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 1890              		.loc 1 892 0
 1891 07f6 284B     		ldr	r3, .L166+16
 1892 07f8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1893 07fa 13F0020F 		tst	r3, #2
 1894 07fe 04D0     		beq	.L113
 893:stepper.c     ****         // Less than one step to decelerate to zero speed, but already very close. AMASS
 894:stepper.c     ****         // requires full steps to execute. So, just bail.
 895:stepper.c     ****         bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 1895              		.loc 1 895 0
 1896 0800 43F00103 		orr	r3, r3, #1
 1897 0804 244A     		ldr	r2, .L166+16
 1898 0806 1371     		strb	r3, [r2, #4]
 896:stepper.c     ****         #ifdef PARKING_ENABLE
 897:stepper.c     ****           if (!(prep.recalculate_flag & PREP_FLAG_PARKING)) { prep.recalculate_flag |= PREP_FLAG_HO
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 52


 898:stepper.c     ****         #endif
 899:stepper.c     ****         return; // Segment not generated, but current step data still retained.
 1899              		.loc 1 899 0
 1900 0808 B7E0     		b	.L53
 1901              	.L113:
 900:stepper.c     ****       }
 901:stepper.c     ****     }
 902:stepper.c     **** 
 903:stepper.c     ****     // Compute segment step rate. Since steps are integers and mm distances traveled are not,
 904:stepper.c     ****     // the end of every segment can have a partial step of varying magnitudes that are not
 905:stepper.c     ****     // executed, because the stepper ISR requires whole steps due to the AMASS algorithm. To
 906:stepper.c     ****     // compensate, we track the time to execute the previous segment's partial step and simply
 907:stepper.c     ****     // apply it with the partial step distance to the current segment, so that it minutely
 908:stepper.c     ****     // adjusts the whole segment rate to keep step output exact. These rate adjustments are
 909:stepper.c     ****     // typically very small and do not adversely effect performance, but ensures that Grbl
 910:stepper.c     ****     // outputs the exact acceleration and velocity profiles as computed by the planner.
 911:stepper.c     ****     dt += prep.dt_remainder; // Apply previous segment partial step execute time
 1902              		.loc 1 911 0
 1903 080a 214B     		ldr	r3, .L166+8
 1904 080c D3F8C800 		ldr	r0, [r3, #200]	@ float
 1905 0810 0199     		ldr	r1, [sp, #4]	@ float
 1906 0812 FFF7FEFF 		bl	__aeabi_fadd
 1907              	.LVL264:
 1908 0816 8046     		mov	r8, r0
 1909              	.LVL265:
 912:stepper.c     ****     float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step ra
 1910              		.loc 1 912 0
 1911 0818 3046     		mov	r0, r6
 1912              	.LVL266:
 1913 081a 2946     		mov	r1, r5
 1914 081c FFF7FEFF 		bl	__aeabi_fsub
 1915              	.LVL267:
 1916 0820 0146     		mov	r1, r0
 1917 0822 4046     		mov	r0, r8
 1918 0824 FFF7FEFF 		bl	__aeabi_fdiv
 1919              	.LVL268:
 1920 0828 0646     		mov	r6, r0
 1921              	.LVL269:
 913:stepper.c     **** 
 914:stepper.c     ****     // Compute CPU cycles per step for the prepped segment.
 915:stepper.c     ****     uint32_t cycles = ceil( (TICKS_PER_MICROSECOND*1000000*60)*inv_rate ); // (cycles/step)
 1922              		.loc 1 915 0
 1923 082a 1C49     		ldr	r1, .L166+20
 1924 082c FFF7FEFF 		bl	__aeabi_fmul
 1925              	.LVL270:
 1926 0830 FFF7FEFF 		bl	__aeabi_f2d
 1927              	.LVL271:
 1928 0834 FFF7FEFF 		bl	ceil
 1929              	.LVL272:
 1930 0838 FFF7FEFF 		bl	__aeabi_d2uiz
 1931              	.LVL273:
 916:stepper.c     **** 
 917:stepper.c     ****     #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
 918:stepper.c     ****       // Compute step timing and multi-axis smoothing level.
 919:stepper.c     ****       // NOTE: AMASS overdrives the timer with each level, so only one prescalar is required.
 920:stepper.c     ****       if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 1932              		.loc 1 920 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 53


 1933 083c 40F6B733 		movw	r3, #2999
 1934 0840 9842     		cmp	r0, r3
 1935 0842 07D8     		bhi	.L114
 1936              		.loc 1 920 0 is_stmt 0 discriminator 1
 1937 0844 124B     		ldr	r3, .L166+8
 1938 0846 079A     		ldr	r2, [sp, #28]
 1939 0848 03EBC203 		add	r3, r3, r2, lsl #3
 1940 084c 0022     		movs	r2, #0
 1941 084e 83F83120 		strb	r2, [r3, #49]
 1942 0852 35E0     		b	.L115
 1943              	.L114:
 921:stepper.c     ****       else {
 922:stepper.c     ****         if (cycles < AMASS_LEVEL2) { prep_segment->amass_level = 1; }
 1944              		.loc 1 922 0 is_stmt 1
 1945 0854 41F26F73 		movw	r3, #5999
 1946 0858 9842     		cmp	r0, r3
 1947 085a 07D8     		bhi	.L116
 1948              		.loc 1 922 0 is_stmt 0 discriminator 1
 1949 085c 0C4B     		ldr	r3, .L166+8
 1950 085e 079A     		ldr	r2, [sp, #28]
 1951 0860 03EBC203 		add	r3, r3, r2, lsl #3
 1952 0864 0122     		movs	r2, #1
 1953 0866 83F83120 		strb	r2, [r3, #49]
 1954 086a 20E0     		b	.L117
 1955              	.L116:
 923:stepper.c     ****         else if (cycles < AMASS_LEVEL3) { prep_segment->amass_level = 2; }
 1956              		.loc 1 923 0 is_stmt 1
 1957 086c 42F6DF63 		movw	r3, #11999
 1958 0870 9842     		cmp	r0, r3
 1959 0872 15D8     		bhi	.L118
 1960              		.loc 1 923 0 is_stmt 0 discriminator 1
 1961 0874 064B     		ldr	r3, .L166+8
 1962 0876 079A     		ldr	r2, [sp, #28]
 1963 0878 03EBC203 		add	r3, r3, r2, lsl #3
 1964 087c 0222     		movs	r2, #2
 1965 087e 83F83120 		strb	r2, [r3, #49]
 1966 0882 14E0     		b	.L117
 1967              	.L167:
 1968 0884 AFF30080 		.align	3
 1969              	.L166:
 1970 0888 A5E2ECC3 		.word	-1007885659
 1971 088c 67D8253F 		.word	1059444839
 1972 0890 00000000 		.word	.LANCHOR0
 1973 0894 0000E03F 		.word	1071644672
 1974 0898 00000000 		.word	sys
 1975 089c 50A9AB4E 		.word	1319872848
 1976              	.L118:
 924:stepper.c     ****         else { prep_segment->amass_level = 3; }
 1977              		.loc 1 924 0 is_stmt 1
 1978 08a0 374B     		ldr	r3, .L168
 1979 08a2 079A     		ldr	r2, [sp, #28]
 1980 08a4 03EBC203 		add	r3, r3, r2, lsl #3
 1981 08a8 0322     		movs	r2, #3
 1982 08aa 83F83120 		strb	r2, [r3, #49]
 1983              	.L117:
 925:stepper.c     ****         cycles >>= prep_segment->amass_level;
 1984              		.loc 1 925 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 54


 1985 08ae 344B     		ldr	r3, .L168
 1986 08b0 079A     		ldr	r2, [sp, #28]
 1987 08b2 03EBC203 		add	r3, r3, r2, lsl #3
 1988 08b6 93F83120 		ldrb	r2, [r3, #49]	@ zero_extendqisi2
 1989 08ba D040     		lsrs	r0, r0, r2
 1990              	.LVL274:
 926:stepper.c     ****         prep_segment->n_step <<= prep_segment->amass_level;
 1991              		.loc 1 926 0
 1992 08bc 9740     		lsls	r7, r7, r2
 1993 08be 9F85     		strh	r7, [r3, #44]	@ movhi
 1994              	.L115:
 927:stepper.c     ****       }
 928:stepper.c     ****       if (cycles < (1UL << 16)) { prep_segment->cycles_per_tick = cycles; } // < 65536 (4.1ms @ 16M
 1995              		.loc 1 928 0
 1996 08c0 B0F5803F 		cmp	r0, #65536
 1997 08c4 05D2     		bcs	.L119
 1998              		.loc 1 928 0 is_stmt 0 discriminator 1
 1999 08c6 2E4B     		ldr	r3, .L168
 2000 08c8 079A     		ldr	r2, [sp, #28]
 2001 08ca 03EBC203 		add	r3, r3, r2, lsl #3
 2002 08ce D885     		strh	r0, [r3, #46]	@ movhi
 2003 08d0 06E0     		b	.L120
 2004              	.L119:
 929:stepper.c     ****       else { prep_segment->cycles_per_tick = 0xffff; } // Just set the slowest speed possible.
 2005              		.loc 1 929 0 is_stmt 1
 2006 08d2 2B4B     		ldr	r3, .L168
 2007 08d4 079A     		ldr	r2, [sp, #28]
 2008 08d6 03EBC203 		add	r3, r3, r2, lsl #3
 2009 08da 4FF6FF72 		movw	r2, #65535
 2010 08de DA85     		strh	r2, [r3, #46]	@ movhi
 2011              	.L120:
 930:stepper.c     ****     #else
 931:stepper.c     ****       // Compute step timing and timer prescalar for normal step generation.
 932:stepper.c     ****       if (cycles < (1UL << 16)) { // < 65536  (4.1ms @ 16MHz)
 933:stepper.c     ****         prep_segment->prescaler = 1; // prescaler: 0
 934:stepper.c     ****         prep_segment->cycles_per_tick = cycles;
 935:stepper.c     ****       } else if (cycles < (1UL << 19)) { // < 524288 (32.8ms@16MHz)
 936:stepper.c     ****         prep_segment->prescaler = 2; // prescaler: 8
 937:stepper.c     ****         prep_segment->cycles_per_tick = cycles >> 3;
 938:stepper.c     ****       } else {
 939:stepper.c     ****         prep_segment->prescaler = 3; // prescaler: 64
 940:stepper.c     ****         if (cycles < (1UL << 22)) { // < 4194304 (262ms@16MHz)
 941:stepper.c     ****           prep_segment->cycles_per_tick =  cycles >> 6;
 942:stepper.c     ****         } else { // Just set the slowest speed possible. (Around 4 step/sec.)
 943:stepper.c     ****           prep_segment->cycles_per_tick = 0xffff;
 944:stepper.c     ****         }
 945:stepper.c     ****       }
 946:stepper.c     ****     #endif
 947:stepper.c     **** 
 948:stepper.c     ****     // Segment complete! Increment segment buffer indices, so stepper ISR can immediately execute i
 949:stepper.c     ****     segment_buffer_head = segment_next_head;
 2012              		.loc 1 949 0
 2013 08e0 274A     		ldr	r2, .L168
 2014 08e2 92F80031 		ldrb	r3, [r2, #256]	@ zero_extendqisi2
 2015 08e6 82F82A30 		strb	r3, [r2, #42]
 950:stepper.c     ****     if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 2016              		.loc 1 950 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 55


 2017 08ea 0133     		adds	r3, r3, #1
 2018 08ec DBB2     		uxtb	r3, r3
 2019 08ee 82F80031 		strb	r3, [r2, #256]
 2020 08f2 062B     		cmp	r3, #6
 2021 08f4 03D1     		bne	.L121
 2022              		.loc 1 950 0 is_stmt 0 discriminator 1
 2023 08f6 0022     		movs	r2, #0
 2024 08f8 214B     		ldr	r3, .L168
 2025 08fa 83F80021 		strb	r2, [r3, #256]
 2026              	.L121:
 951:stepper.c     **** 
 952:stepper.c     ****     // Update the appropriate planner and segment data.
 953:stepper.c     ****     pl_block->millimeters = mm_remaining;
 2027              		.loc 1 953 0 is_stmt 1
 2028 08fe 204F     		ldr	r7, .L168
 2029 0900 D7F8FC30 		ldr	r3, [r7, #252]
 2030 0904 C3F82090 		str	r9, [r3, #32]	@ float
 954:stepper.c     ****     prep.steps_remaining = n_steps_remaining;
 2031              		.loc 1 954 0
 2032 0908 C7F8CC40 		str	r4, [r7, #204]	@ float
 955:stepper.c     ****     prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 2033              		.loc 1 955 0
 2034 090c 2046     		mov	r0, r4
 2035              	.LVL275:
 2036 090e 2946     		mov	r1, r5
 2037 0910 FFF7FEFF 		bl	__aeabi_fsub
 2038              	.LVL276:
 2039 0914 3146     		mov	r1, r6
 2040 0916 FFF7FEFF 		bl	__aeabi_fmul
 2041              	.LVL277:
 2042 091a C7F8C800 		str	r0, [r7, #200]	@ float
 956:stepper.c     **** 
 957:stepper.c     ****     // Check for exit conditions and flag to load next planner block.
 958:stepper.c     ****     if (mm_remaining == prep.mm_complete) {
 2043              		.loc 1 958 0
 2044 091e D7F8DC00 		ldr	r0, [r7, #220]	@ float
 2045 0922 4946     		mov	r1, r9
 2046 0924 FFF7FEFF 		bl	__aeabi_fcmpeq
 2047              	.LVL278:
 2048 0928 F0B1     		cbz	r0, .L122
 959:stepper.c     ****       // End of planner block or forced-termination. No more distance to be executed.
 960:stepper.c     ****       if (mm_remaining > 0.0) { // At end of forced-termination.
 2049              		.loc 1 960 0
 2050 092a 4846     		mov	r0, r9
 2051 092c 0021     		movs	r1, #0
 2052 092e FFF7FEFF 		bl	__aeabi_fcmpgt
 2053              	.LVL279:
 2054 0932 28B1     		cbz	r0, .L159
 961:stepper.c     ****         // Reset prep parameters for resuming and then bail. Allow the stepper ISR to complete
 962:stepper.c     ****         // the segment queue, where realtime protocol will set new state upon receiving the
 963:stepper.c     ****         // cycle stop flag from the ISR. Prep_segment is blocked until then.
 964:stepper.c     ****         bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 2055              		.loc 1 964 0
 2056 0934 134A     		ldr	r2, .L168+4
 2057 0936 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 2058 0938 43F00103 		orr	r3, r3, #1
 2059 093c 1371     		strb	r3, [r2, #4]
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 56


 965:stepper.c     ****         #ifdef PARKING_ENABLE
 966:stepper.c     ****           if (!(prep.recalculate_flag & PREP_FLAG_PARKING)) { prep.recalculate_flag |= PREP_FLAG_HO
 967:stepper.c     ****         #endif
 968:stepper.c     ****         return; // Bail!
 2060              		.loc 1 968 0
 2061 093e 1CE0     		b	.L53
 2062              	.L159:
 969:stepper.c     ****       } else { // End of planner block
 970:stepper.c     ****         // The planner block is complete. All steps are set to be executed in the segment buffer.
 971:stepper.c     ****         if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 2063              		.loc 1 971 0
 2064 0940 104B     		ldr	r3, .L168+4
 2065 0942 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2066 0944 13F0040F 		tst	r3, #4
 2067 0948 04D0     		beq	.L126
 972:stepper.c     ****           bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 2068              		.loc 1 972 0
 2069 094a 43F00103 		orr	r3, r3, #1
 2070 094e 0D4A     		ldr	r2, .L168+4
 2071 0950 1371     		strb	r3, [r2, #4]
 973:stepper.c     ****           return;
 2072              		.loc 1 973 0
 2073 0952 12E0     		b	.L53
 2074              	.L126:
 974:stepper.c     ****         }
 975:stepper.c     ****         pl_block = NULL; // Set pointer to indicate check and load next planner block.
 2075              		.loc 1 975 0
 2076 0954 0022     		movs	r2, #0
 2077 0956 0A4B     		ldr	r3, .L168
 2078 0958 C3F8FC20 		str	r2, [r3, #252]
 976:stepper.c     ****         plan_discard_current_block();
 2079              		.loc 1 976 0
 2080 095c FFF7FEFF 		bl	plan_discard_current_block
 2081              	.LVL280:
 2082 0960 02E0     		b	.L122
 2083              	.LVL281:
 2084              	.L161:
 2085              		.cfi_def_cfa_offset 0
 2086              		.cfi_restore 4
 2087              		.cfi_restore 5
 2088              		.cfi_restore 6
 2089              		.cfi_restore 7
 2090              		.cfi_restore 8
 2091              		.cfi_restore 9
 2092              		.cfi_restore 10
 2093              		.cfi_restore 11
 2094              		.cfi_restore 14
 2095              	.LBE2:
 576:stepper.c     ****   // Block step prep buffer, while in a suspend state and there is no suspend motion to execute.
 2096              		.loc 1 576 0
 2097 0962 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2098              		.cfi_def_cfa_offset 36
 2099              		.cfi_offset 4, -36
 2100              		.cfi_offset 5, -32
 2101              		.cfi_offset 6, -28
 2102              		.cfi_offset 7, -24
 2103              		.cfi_offset 8, -20
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 57


 2104              		.cfi_offset 9, -16
 2105              		.cfi_offset 10, -12
 2106              		.cfi_offset 11, -8
 2107              		.cfi_offset 14, -4
 2108 0966 89B0     		sub	sp, sp, #36
 2109              		.cfi_def_cfa_offset 72
 2110              	.L122:
 580:stepper.c     **** 
 2111              		.loc 1 580 0
 2112 0968 054A     		ldr	r2, .L168
 2113 096a 92F82B30 		ldrb	r3, [r2, #43]	@ zero_extendqisi2
 2114 096e DBB2     		uxtb	r3, r3
 2115 0970 92F80021 		ldrb	r2, [r2, #256]	@ zero_extendqisi2
 2116 0974 9342     		cmp	r3, r2
 2117 0976 7FF44AAB 		bne	.L127
 2118              	.L53:
 977:stepper.c     ****       }
 978:stepper.c     ****     }
 979:stepper.c     **** 
 980:stepper.c     ****   }
 981:stepper.c     **** }
 2119              		.loc 1 981 0
 2120 097a 09B0     		add	sp, sp, #36
 2121              		.cfi_def_cfa_offset 36
 2122              		@ sp needed
 2123 097c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2124              	.L169:
 2125              		.align	2
 2126              	.L168:
 2127 0980 00000000 		.word	.LANCHOR0
 2128 0984 00000000 		.word	sys
 2129              		.cfi_endproc
 2130              	.LFE71:
 2131              		.size	st_prep_buffer, .-st_prep_buffer
 2132              		.section	.text.st_get_realtime_rate,"ax",%progbits
 2133              		.align	2
 2134              		.global	st_get_realtime_rate
 2135              		.thumb
 2136              		.thumb_func
 2137              		.type	st_get_realtime_rate, %function
 2138              	st_get_realtime_rate:
 2139              	.LFB72:
 982:stepper.c     **** 
 983:stepper.c     **** 
 984:stepper.c     **** // Called by realtime status reporting to fetch the current speed being executed. This value
 985:stepper.c     **** // however is not exactly the current speed, but the speed computed in the last step segment
 986:stepper.c     **** // in the segment buffer. It will always be behind by up to the number of segment blocks (-1)
 987:stepper.c     **** // divided by the ACCELERATION TICKS PER SECOND in seconds.
 988:stepper.c     **** float st_get_realtime_rate()
 989:stepper.c     **** {
 2140              		.loc 1 989 0
 2141              		.cfi_startproc
 2142              		@ args = 0, pretend = 0, frame = 0
 2143              		@ frame_needed = 0, uses_anonymous_args = 0
 2144              		@ link register save eliminated.
 990:stepper.c     ****   if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 2145              		.loc 1 990 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 58


 2146 0000 054B     		ldr	r3, .L173
 2147 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2148 0004 13F07C0F 		tst	r3, #124
 2149 0008 03D0     		beq	.L172
 991:stepper.c     ****     return prep.current_speed;
 2150              		.loc 1 991 0
 2151 000a 044B     		ldr	r3, .L173+4
 2152 000c D3F8E000 		ldr	r0, [r3, #224]	@ float
 2153 0010 7047     		bx	lr
 2154              	.L172:
 992:stepper.c     ****   }
 993:stepper.c     ****   return 0.0f;
 2155              		.loc 1 993 0
 2156 0012 0020     		movs	r0, #0
 994:stepper.c     **** }
 2157              		.loc 1 994 0
 2158 0014 7047     		bx	lr
 2159              	.L174:
 2160 0016 00BF     		.align	2
 2161              	.L173:
 2162 0018 00000000 		.word	sys
 2163 001c 00000000 		.word	.LANCHOR0
 2164              		.cfi_endproc
 2165              	.LFE72:
 2166              		.size	st_get_realtime_rate, .-st_get_realtime_rate
 2167              		.comm	exec_lcd_status,1,1
 2168              		.comm	sys_rt_exec_debug,1,1
 2169              		.comm	sys_rt_exec_accessory_override,1,1
 2170              		.comm	sys_rt_exec_motion_override,1,1
 2171              		.comm	sys_rt_exec_alarm,1,1
 2172              		.comm	sys_rt_exec_state,1,1
 2173              		.comm	sys_probe_state,1,1
 2174              		.comm	sys_probe_position,12,4
 2175              		.comm	sys_position,12,4
 2176              		.bss
 2177              		.align	2
 2178              		.set	.LANCHOR0,. + 0
 2179              		.type	st, %object
 2180              		.size	st, 40
 2181              	st:
 2182 0000 00000000 		.space	40
 2182      00000000 
 2182      00000000 
 2182      00000000 
 2182      00000000 
 2183              		.type	step_port_invert_mask, %object
 2184              		.size	step_port_invert_mask, 1
 2185              	step_port_invert_mask:
 2186 0028 00       		.space	1
 2187              		.type	busy, %object
 2188              		.size	busy, 1
 2189              	busy:
 2190 0029 00       		.space	1
 2191              		.type	segment_buffer_head, %object
 2192              		.size	segment_buffer_head, 1
 2193              	segment_buffer_head:
 2194 002a 00       		.space	1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 59


 2195              		.type	segment_buffer_tail, %object
 2196              		.size	segment_buffer_tail, 1
 2197              	segment_buffer_tail:
 2198 002b 00       		.space	1
 2199              		.type	segment_buffer, %object
 2200              		.size	segment_buffer, 48
 2201              	segment_buffer:
 2202 002c 00000000 		.space	48
 2202      00000000 
 2202      00000000 
 2202      00000000 
 2202      00000000 
 2203              		.type	st_block_buffer, %object
 2204              		.size	st_block_buffer, 100
 2205              	st_block_buffer:
 2206 005c 00000000 		.space	100
 2206      00000000 
 2206      00000000 
 2206      00000000 
 2206      00000000 
 2207              		.type	dir_port_invert_mask, %object
 2208              		.size	dir_port_invert_mask, 1
 2209              	dir_port_invert_mask:
 2210 00c0 00       		.space	1
 2211 00c1 000000   		.space	3
 2212              		.type	prep, %object
 2213              		.size	prep, 56
 2214              	prep:
 2215 00c4 00000000 		.space	56
 2215      00000000 
 2215      00000000 
 2215      00000000 
 2215      00000000 
 2216              		.type	pl_block, %object
 2217              		.size	pl_block, 4
 2218              	pl_block:
 2219 00fc 00000000 		.space	4
 2220              		.type	segment_next_head, %object
 2221              		.size	segment_next_head, 1
 2222              	segment_next_head:
 2223 0100 00       		.space	1
 2224 0101 000000   		.space	3
 2225              		.type	st_prep_block, %object
 2226              		.size	st_prep_block, 4
 2227              	st_prep_block:
 2228 0104 00000000 		.space	4
 2229              		.text
 2230              	.Letext0:
 2231              		.file 2 "d:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 2232              		.file 3 "d:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 2233              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2234              		.file 5 "settings.h"
 2235              		.file 6 "system.h"
 2236              		.file 7 "planner.h"
 2237              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 2238              		.file 9 "lcd_report.h"
 2239              		.file 10 "Generated_Source\\PSoC5/Stepper_Timer.h"
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 60


 2240              		.file 11 "Generated_Source\\PSoC5/Control_Step_Enable.h"
 2241              		.file 12 "Generated_Source\\PSoC5/CyLib.h"
 2242              		.file 13 "Generated_Source\\PSoC5/Control_Reg_Dir.h"
 2243              		.file 14 "Generated_Source\\PSoC5/Control_Reg_Step.h"
 2244              		.file 15 "spindle_control.h"
 2245              		.file 16 "Generated_Source\\PSoC5/Clock_Step_Pulse.h"
 2246              		.file 17 "Generated_Source\\PSoC5/isr_Step.h"
 2247              		.file 18 "d:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9
 2248              		.file 19 "probe.h"
 2249              		.section	.debug_info,"",%progbits
 2250              	.Ldebug_info0:
 2251 0000 280D0000 		.4byte	0xd28
 2252 0004 0400     		.2byte	0x4
 2253 0006 00000000 		.4byte	.Ldebug_abbrev0
 2254 000a 04       		.byte	0x4
 2255 000b 01       		.uleb128 0x1
 2256 000c EE080000 		.4byte	.LASF175
 2257 0010 01       		.byte	0x1
 2258 0011 82080000 		.4byte	.LASF176
 2259 0015 A4030000 		.4byte	.LASF177
 2260 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2261 001d 00000000 		.4byte	0
 2262 0021 00000000 		.4byte	.Ldebug_line0
 2263 0025 02       		.uleb128 0x2
 2264 0026 04       		.byte	0x4
 2265 0027 04       		.byte	0x4
 2266 0028 DD010000 		.4byte	.LASF0
 2267 002c 02       		.uleb128 0x2
 2268 002d 01       		.byte	0x1
 2269 002e 06       		.byte	0x6
 2270 002f FC090000 		.4byte	.LASF1
 2271 0033 03       		.uleb128 0x3
 2272 0034 D9070000 		.4byte	.LASF4
 2273 0038 02       		.byte	0x2
 2274 0039 1D       		.byte	0x1d
 2275 003a 3E000000 		.4byte	0x3e
 2276 003e 02       		.uleb128 0x2
 2277 003f 01       		.byte	0x1
 2278 0040 08       		.byte	0x8
 2279 0041 BA080000 		.4byte	.LASF2
 2280 0045 02       		.uleb128 0x2
 2281 0046 02       		.byte	0x2
 2282 0047 05       		.byte	0x5
 2283 0048 BD060000 		.4byte	.LASF3
 2284 004c 03       		.uleb128 0x3
 2285 004d 60020000 		.4byte	.LASF5
 2286 0051 02       		.byte	0x2
 2287 0052 2B       		.byte	0x2b
 2288 0053 57000000 		.4byte	0x57
 2289 0057 02       		.uleb128 0x2
 2290 0058 02       		.byte	0x2
 2291 0059 07       		.byte	0x7
 2292 005a 1E0A0000 		.4byte	.LASF6
 2293 005e 03       		.uleb128 0x3
 2294 005f E3000000 		.4byte	.LASF7
 2295 0063 02       		.byte	0x2
 2296 0064 3F       		.byte	0x3f
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 61


 2297 0065 69000000 		.4byte	0x69
 2298 0069 02       		.uleb128 0x2
 2299 006a 04       		.byte	0x4
 2300 006b 05       		.byte	0x5
 2301 006c 01070000 		.4byte	.LASF8
 2302 0070 03       		.uleb128 0x3
 2303 0071 E3080000 		.4byte	.LASF9
 2304 0075 02       		.byte	0x2
 2305 0076 41       		.byte	0x41
 2306 0077 7B000000 		.4byte	0x7b
 2307 007b 02       		.uleb128 0x2
 2308 007c 04       		.byte	0x4
 2309 007d 07       		.byte	0x7
 2310 007e 32080000 		.4byte	.LASF10
 2311 0082 02       		.uleb128 0x2
 2312 0083 08       		.byte	0x8
 2313 0084 05       		.byte	0x5
 2314 0085 0C050000 		.4byte	.LASF11
 2315 0089 02       		.uleb128 0x2
 2316 008a 08       		.byte	0x8
 2317 008b 07       		.byte	0x7
 2318 008c 2E020000 		.4byte	.LASF12
 2319 0090 04       		.uleb128 0x4
 2320 0091 04       		.byte	0x4
 2321 0092 05       		.byte	0x5
 2322 0093 696E7400 		.ascii	"int\000"
 2323 0097 02       		.uleb128 0x2
 2324 0098 04       		.byte	0x4
 2325 0099 07       		.byte	0x7
 2326 009a 90000000 		.4byte	.LASF13
 2327 009e 03       		.uleb128 0x3
 2328 009f 96040000 		.4byte	.LASF14
 2329 00a3 03       		.byte	0x3
 2330 00a4 15       		.byte	0x15
 2331 00a5 33000000 		.4byte	0x33
 2332 00a9 03       		.uleb128 0x3
 2333 00aa 2B060000 		.4byte	.LASF15
 2334 00ae 03       		.byte	0x3
 2335 00af 21       		.byte	0x21
 2336 00b0 4C000000 		.4byte	0x4c
 2337 00b4 03       		.uleb128 0x3
 2338 00b5 4F080000 		.4byte	.LASF16
 2339 00b9 03       		.byte	0x3
 2340 00ba 2C       		.byte	0x2c
 2341 00bb 5E000000 		.4byte	0x5e
 2342 00bf 03       		.uleb128 0x3
 2343 00c0 AD010000 		.4byte	.LASF17
 2344 00c4 03       		.byte	0x3
 2345 00c5 2D       		.byte	0x2d
 2346 00c6 70000000 		.4byte	0x70
 2347 00ca 05       		.uleb128 0x5
 2348 00cb 740A0000 		.4byte	.LASF18
 2349 00cf 04       		.byte	0x4
 2350 00d0 9201     		.2byte	0x192
 2351 00d2 3E000000 		.4byte	0x3e
 2352 00d6 05       		.uleb128 0x5
 2353 00d7 5D040000 		.4byte	.LASF19
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 62


 2354 00db 04       		.byte	0x4
 2355 00dc 9301     		.2byte	0x193
 2356 00de 57000000 		.4byte	0x57
 2357 00e2 05       		.uleb128 0x5
 2358 00e3 86050000 		.4byte	.LASF20
 2359 00e7 04       		.byte	0x4
 2360 00e8 9401     		.2byte	0x194
 2361 00ea 7B000000 		.4byte	0x7b
 2362 00ee 02       		.uleb128 0x2
 2363 00ef 08       		.byte	0x8
 2364 00f0 04       		.byte	0x4
 2365 00f1 7A0A0000 		.4byte	.LASF21
 2366 00f5 02       		.uleb128 0x2
 2367 00f6 01       		.byte	0x1
 2368 00f7 08       		.byte	0x8
 2369 00f8 FE030000 		.4byte	.LASF22
 2370 00fc 05       		.uleb128 0x5
 2371 00fd 79050000 		.4byte	.LASF23
 2372 0101 04       		.byte	0x4
 2373 0102 4E02     		.2byte	0x24e
 2374 0104 08010000 		.4byte	0x108
 2375 0108 06       		.uleb128 0x6
 2376 0109 04       		.byte	0x4
 2377 010a 0E010000 		.4byte	0x10e
 2378 010e 07       		.uleb128 0x7
 2379 010f 02       		.uleb128 0x2
 2380 0110 04       		.byte	0x4
 2381 0111 07       		.byte	0x7
 2382 0112 29080000 		.4byte	.LASF24
 2383 0116 08       		.uleb128 0x8
 2384 0117 9E000000 		.4byte	0x9e
 2385 011b 02       		.uleb128 0x2
 2386 011c 08       		.byte	0x8
 2387 011d 04       		.byte	0x4
 2388 011e ED050000 		.4byte	.LASF25
 2389 0122 09       		.uleb128 0x9
 2390 0123 5C       		.byte	0x5c
 2391 0124 05       		.byte	0x5
 2392 0125 4F       		.byte	0x4f
 2393 0126 0F020000 		.4byte	0x20f
 2394 012a 0A       		.uleb128 0xa
 2395 012b 38050000 		.4byte	.LASF26
 2396 012f 05       		.byte	0x5
 2397 0130 51       		.byte	0x51
 2398 0131 0F020000 		.4byte	0x20f
 2399 0135 00       		.byte	0
 2400 0136 0A       		.uleb128 0xa
 2401 0137 34060000 		.4byte	.LASF27
 2402 013b 05       		.byte	0x5
 2403 013c 52       		.byte	0x52
 2404 013d 0F020000 		.4byte	0x20f
 2405 0141 0C       		.byte	0xc
 2406 0142 0A       		.uleb128 0xa
 2407 0143 86010000 		.4byte	.LASF28
 2408 0147 05       		.byte	0x5
 2409 0148 53       		.byte	0x53
 2410 0149 0F020000 		.4byte	0x20f
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 63


 2411 014d 18       		.byte	0x18
 2412 014e 0A       		.uleb128 0xa
 2413 014f E2030000 		.4byte	.LASF29
 2414 0153 05       		.byte	0x5
 2415 0154 54       		.byte	0x54
 2416 0155 0F020000 		.4byte	0x20f
 2417 0159 24       		.byte	0x24
 2418 015a 0A       		.uleb128 0xa
 2419 015b 00000000 		.4byte	.LASF30
 2420 015f 05       		.byte	0x5
 2421 0160 57       		.byte	0x57
 2422 0161 9E000000 		.4byte	0x9e
 2423 0165 30       		.byte	0x30
 2424 0166 0A       		.uleb128 0xa
 2425 0167 CA050000 		.4byte	.LASF31
 2426 016b 05       		.byte	0x5
 2427 016c 58       		.byte	0x58
 2428 016d 9E000000 		.4byte	0x9e
 2429 0171 31       		.byte	0x31
 2430 0172 0A       		.uleb128 0xa
 2431 0173 350B0000 		.4byte	.LASF32
 2432 0177 05       		.byte	0x5
 2433 0178 59       		.byte	0x59
 2434 0179 9E000000 		.4byte	0x9e
 2435 017d 32       		.byte	0x32
 2436 017e 0A       		.uleb128 0xa
 2437 017f 36010000 		.4byte	.LASF33
 2438 0183 05       		.byte	0x5
 2439 0184 5A       		.byte	0x5a
 2440 0185 9E000000 		.4byte	0x9e
 2441 0189 33       		.byte	0x33
 2442 018a 0A       		.uleb128 0xa
 2443 018b 7D000000 		.4byte	.LASF34
 2444 018f 05       		.byte	0x5
 2445 0190 5B       		.byte	0x5b
 2446 0191 9E000000 		.4byte	0x9e
 2447 0195 34       		.byte	0x34
 2448 0196 0A       		.uleb128 0xa
 2449 0197 9B0A0000 		.4byte	.LASF35
 2450 019b 05       		.byte	0x5
 2451 019c 5C       		.byte	0x5c
 2452 019d 25000000 		.4byte	0x25
 2453 01a1 38       		.byte	0x38
 2454 01a2 0A       		.uleb128 0xa
 2455 01a3 5D010000 		.4byte	.LASF36
 2456 01a7 05       		.byte	0x5
 2457 01a8 5D       		.byte	0x5d
 2458 01a9 25000000 		.4byte	0x25
 2459 01ad 3C       		.byte	0x3c
 2460 01ae 0A       		.uleb128 0xa
 2461 01af 03040000 		.4byte	.LASF37
 2462 01b3 05       		.byte	0x5
 2463 01b4 5F       		.byte	0x5f
 2464 01b5 25000000 		.4byte	0x25
 2465 01b9 40       		.byte	0x40
 2466 01ba 0A       		.uleb128 0xa
 2467 01bb 430A0000 		.4byte	.LASF38
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 64


 2468 01bf 05       		.byte	0x5
 2469 01c0 60       		.byte	0x60
 2470 01c1 25000000 		.4byte	0x25
 2471 01c5 44       		.byte	0x44
 2472 01c6 0A       		.uleb128 0xa
 2473 01c7 6A000000 		.4byte	.LASF39
 2474 01cb 05       		.byte	0x5
 2475 01cc 62       		.byte	0x62
 2476 01cd 9E000000 		.4byte	0x9e
 2477 01d1 48       		.byte	0x48
 2478 01d2 0A       		.uleb128 0xa
 2479 01d3 810A0000 		.4byte	.LASF40
 2480 01d7 05       		.byte	0x5
 2481 01d8 64       		.byte	0x64
 2482 01d9 9E000000 		.4byte	0x9e
 2483 01dd 49       		.byte	0x49
 2484 01de 0A       		.uleb128 0xa
 2485 01df B6010000 		.4byte	.LASF41
 2486 01e3 05       		.byte	0x5
 2487 01e4 65       		.byte	0x65
 2488 01e5 25000000 		.4byte	0x25
 2489 01e9 4C       		.byte	0x4c
 2490 01ea 0A       		.uleb128 0xa
 2491 01eb 93010000 		.4byte	.LASF42
 2492 01ef 05       		.byte	0x5
 2493 01f0 66       		.byte	0x66
 2494 01f1 25000000 		.4byte	0x25
 2495 01f5 50       		.byte	0x50
 2496 01f6 0A       		.uleb128 0xa
 2497 01f7 080A0000 		.4byte	.LASF43
 2498 01fb 05       		.byte	0x5
 2499 01fc 67       		.byte	0x67
 2500 01fd A9000000 		.4byte	0xa9
 2501 0201 54       		.byte	0x54
 2502 0202 0A       		.uleb128 0xa
 2503 0203 F1020000 		.4byte	.LASF44
 2504 0207 05       		.byte	0x5
 2505 0208 68       		.byte	0x68
 2506 0209 25000000 		.4byte	0x25
 2507 020d 58       		.byte	0x58
 2508 020e 00       		.byte	0
 2509 020f 0B       		.uleb128 0xb
 2510 0210 25000000 		.4byte	0x25
 2511 0214 1F020000 		.4byte	0x21f
 2512 0218 0C       		.uleb128 0xc
 2513 0219 0F010000 		.4byte	0x10f
 2514 021d 02       		.byte	0x2
 2515 021e 00       		.byte	0
 2516 021f 03       		.uleb128 0x3
 2517 0220 4B0A0000 		.4byte	.LASF45
 2518 0224 05       		.byte	0x5
 2519 0225 69       		.byte	0x69
 2520 0226 22010000 		.4byte	0x122
 2521 022a 09       		.uleb128 0x9
 2522 022b 14       		.byte	0x14
 2523 022c 06       		.byte	0x6
 2524 022d 80       		.byte	0x80
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 65


 2525 022e DB020000 		.4byte	0x2db
 2526 0232 0A       		.uleb128 0xa
 2527 0233 C8090000 		.4byte	.LASF46
 2528 0237 06       		.byte	0x6
 2529 0238 81       		.byte	0x81
 2530 0239 9E000000 		.4byte	0x9e
 2531 023d 00       		.byte	0
 2532 023e 0A       		.uleb128 0xa
 2533 023f D7020000 		.4byte	.LASF47
 2534 0243 06       		.byte	0x6
 2535 0244 82       		.byte	0x82
 2536 0245 9E000000 		.4byte	0x9e
 2537 0249 01       		.byte	0x1
 2538 024a 0A       		.uleb128 0xa
 2539 024b 19030000 		.4byte	.LASF48
 2540 024f 06       		.byte	0x6
 2541 0250 83       		.byte	0x83
 2542 0251 9E000000 		.4byte	0x9e
 2543 0255 02       		.byte	0x2
 2544 0256 0A       		.uleb128 0xa
 2545 0257 7D070000 		.4byte	.LASF49
 2546 025b 06       		.byte	0x6
 2547 025c 84       		.byte	0x84
 2548 025d 9E000000 		.4byte	0x9e
 2549 0261 03       		.byte	0x3
 2550 0262 0A       		.uleb128 0xa
 2551 0263 80060000 		.4byte	.LASF50
 2552 0267 06       		.byte	0x6
 2553 0268 85       		.byte	0x85
 2554 0269 9E000000 		.4byte	0x9e
 2555 026d 04       		.byte	0x4
 2556 026e 0A       		.uleb128 0xa
 2557 026f E3070000 		.4byte	.LASF51
 2558 0273 06       		.byte	0x6
 2559 0274 86       		.byte	0x86
 2560 0275 9E000000 		.4byte	0x9e
 2561 0279 05       		.byte	0x5
 2562 027a 0A       		.uleb128 0xa
 2563 027b CF0A0000 		.4byte	.LASF52
 2564 027f 06       		.byte	0x6
 2565 0280 87       		.byte	0x87
 2566 0281 9E000000 		.4byte	0x9e
 2567 0285 06       		.byte	0x6
 2568 0286 0A       		.uleb128 0xa
 2569 0287 45020000 		.4byte	.LASF53
 2570 028b 06       		.byte	0x6
 2571 028c 88       		.byte	0x88
 2572 028d 9E000000 		.4byte	0x9e
 2573 0291 07       		.byte	0x7
 2574 0292 0A       		.uleb128 0xa
 2575 0293 9D000000 		.4byte	.LASF54
 2576 0297 06       		.byte	0x6
 2577 0298 89       		.byte	0x89
 2578 0299 9E000000 		.4byte	0x9e
 2579 029d 08       		.byte	0x8
 2580 029e 0A       		.uleb128 0xa
 2581 029f 6F040000 		.4byte	.LASF55
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 66


 2582 02a3 06       		.byte	0x6
 2583 02a4 8A       		.byte	0x8a
 2584 02a5 9E000000 		.4byte	0x9e
 2585 02a9 09       		.byte	0x9
 2586 02aa 0A       		.uleb128 0xa
 2587 02ab 92020000 		.4byte	.LASF56
 2588 02af 06       		.byte	0x6
 2589 02b0 8B       		.byte	0x8b
 2590 02b1 9E000000 		.4byte	0x9e
 2591 02b5 0A       		.byte	0xa
 2592 02b6 0A       		.uleb128 0xa
 2593 02b7 4A040000 		.4byte	.LASF57
 2594 02bb 06       		.byte	0x6
 2595 02bc 8C       		.byte	0x8c
 2596 02bd 9E000000 		.4byte	0x9e
 2597 02c1 0B       		.byte	0xb
 2598 02c2 0A       		.uleb128 0xa
 2599 02c3 50070000 		.4byte	.LASF58
 2600 02c7 06       		.byte	0x6
 2601 02c8 8D       		.byte	0x8d
 2602 02c9 9E000000 		.4byte	0x9e
 2603 02cd 0C       		.byte	0xc
 2604 02ce 0A       		.uleb128 0xa
 2605 02cf 2B040000 		.4byte	.LASF59
 2606 02d3 06       		.byte	0x6
 2607 02d4 8F       		.byte	0x8f
 2608 02d5 25000000 		.4byte	0x25
 2609 02d9 10       		.byte	0x10
 2610 02da 00       		.byte	0
 2611 02db 03       		.uleb128 0x3
 2612 02dc 47070000 		.4byte	.LASF60
 2613 02e0 06       		.byte	0x6
 2614 02e1 91       		.byte	0x91
 2615 02e2 2A020000 		.4byte	0x22a
 2616 02e6 09       		.uleb128 0x9
 2617 02e7 34       		.byte	0x34
 2618 02e8 07       		.byte	0x7
 2619 02e9 39       		.byte	0x39
 2620 02ea 7F030000 		.4byte	0x37f
 2621 02ee 0A       		.uleb128 0xa
 2622 02ef D7010000 		.4byte	.LASF61
 2623 02f3 07       		.byte	0x7
 2624 02f4 3C       		.byte	0x3c
 2625 02f5 7F030000 		.4byte	0x37f
 2626 02f9 00       		.byte	0
 2627 02fa 0A       		.uleb128 0xa
 2628 02fb 39040000 		.4byte	.LASF62
 2629 02ff 07       		.byte	0x7
 2630 0300 3D       		.byte	0x3d
 2631 0301 BF000000 		.4byte	0xbf
 2632 0305 0C       		.byte	0xc
 2633 0306 0A       		.uleb128 0xa
 2634 0307 77010000 		.4byte	.LASF63
 2635 030b 07       		.byte	0x7
 2636 030c 3E       		.byte	0x3e
 2637 030d 9E000000 		.4byte	0x9e
 2638 0311 10       		.byte	0x10
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 67


 2639 0312 0A       		.uleb128 0xa
 2640 0313 E00A0000 		.4byte	.LASF64
 2641 0317 07       		.byte	0x7
 2642 0318 41       		.byte	0x41
 2643 0319 9E000000 		.4byte	0x9e
 2644 031d 11       		.byte	0x11
 2645 031e 0A       		.uleb128 0xa
 2646 031f C7010000 		.4byte	.LASF65
 2647 0323 07       		.byte	0x7
 2648 0324 48       		.byte	0x48
 2649 0325 25000000 		.4byte	0x25
 2650 0329 14       		.byte	0x14
 2651 032a 0A       		.uleb128 0xa
 2652 032b DD020000 		.4byte	.LASF66
 2653 032f 07       		.byte	0x7
 2654 0330 49       		.byte	0x49
 2655 0331 25000000 		.4byte	0x25
 2656 0335 18       		.byte	0x18
 2657 0336 0A       		.uleb128 0xa
 2658 0337 86010000 		.4byte	.LASF28
 2659 033b 07       		.byte	0x7
 2660 033c 4B       		.byte	0x4b
 2661 033d 25000000 		.4byte	0x25
 2662 0341 1C       		.byte	0x1c
 2663 0342 0A       		.uleb128 0xa
 2664 0343 F0090000 		.4byte	.LASF67
 2665 0347 07       		.byte	0x7
 2666 0348 4C       		.byte	0x4c
 2667 0349 25000000 		.4byte	0x25
 2668 034d 20       		.byte	0x20
 2669 034e 0A       		.uleb128 0xa
 2670 034f 45000000 		.4byte	.LASF68
 2671 0353 07       		.byte	0x7
 2672 0354 50       		.byte	0x50
 2673 0355 25000000 		.4byte	0x25
 2674 0359 24       		.byte	0x24
 2675 035a 0A       		.uleb128 0xa
 2676 035b B2060000 		.4byte	.LASF69
 2677 035f 07       		.byte	0x7
 2678 0360 51       		.byte	0x51
 2679 0361 25000000 		.4byte	0x25
 2680 0365 28       		.byte	0x28
 2681 0366 0A       		.uleb128 0xa
 2682 0367 4D010000 		.4byte	.LASF70
 2683 036b 07       		.byte	0x7
 2684 036c 52       		.byte	0x52
 2685 036d 25000000 		.4byte	0x25
 2686 0371 2C       		.byte	0x2c
 2687 0372 0A       		.uleb128 0xa
 2688 0373 2B040000 		.4byte	.LASF59
 2689 0377 07       		.byte	0x7
 2690 0378 56       		.byte	0x56
 2691 0379 25000000 		.4byte	0x25
 2692 037d 30       		.byte	0x30
 2693 037e 00       		.byte	0
 2694 037f 0B       		.uleb128 0xb
 2695 0380 BF000000 		.4byte	0xbf
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 68


 2696 0384 8F030000 		.4byte	0x38f
 2697 0388 0C       		.uleb128 0xc
 2698 0389 0F010000 		.4byte	0x10f
 2699 038d 02       		.byte	0x2
 2700 038e 00       		.byte	0
 2701 038f 03       		.uleb128 0x3
 2702 0390 70000000 		.4byte	.LASF71
 2703 0394 07       		.byte	0x7
 2704 0395 58       		.byte	0x58
 2705 0396 E6020000 		.4byte	0x2e6
 2706 039a 09       		.uleb128 0x9
 2707 039b 14       		.byte	0x14
 2708 039c 01       		.byte	0x1
 2709 039d 3C       		.byte	0x3c
 2710 039e D3030000 		.4byte	0x3d3
 2711 03a2 0A       		.uleb128 0xa
 2712 03a3 D7010000 		.4byte	.LASF61
 2713 03a7 01       		.byte	0x1
 2714 03a8 3D       		.byte	0x3d
 2715 03a9 7F030000 		.4byte	0x37f
 2716 03ad 00       		.byte	0
 2717 03ae 0A       		.uleb128 0xa
 2718 03af 39040000 		.4byte	.LASF62
 2719 03b3 01       		.byte	0x1
 2720 03b4 3E       		.byte	0x3e
 2721 03b5 BF000000 		.4byte	0xbf
 2722 03b9 0C       		.byte	0xc
 2723 03ba 0A       		.uleb128 0xa
 2724 03bb 77010000 		.4byte	.LASF63
 2725 03bf 01       		.byte	0x1
 2726 03c0 3F       		.byte	0x3f
 2727 03c1 9E000000 		.4byte	0x9e
 2728 03c5 10       		.byte	0x10
 2729 03c6 0A       		.uleb128 0xa
 2730 03c7 81040000 		.4byte	.LASF72
 2731 03cb 01       		.byte	0x1
 2732 03cc 41       		.byte	0x41
 2733 03cd 9E000000 		.4byte	0x9e
 2734 03d1 11       		.byte	0x11
 2735 03d2 00       		.byte	0
 2736 03d3 03       		.uleb128 0x3
 2737 03d4 2D050000 		.4byte	.LASF73
 2738 03d8 01       		.byte	0x1
 2739 03d9 43       		.byte	0x43
 2740 03da 9A030000 		.4byte	0x39a
 2741 03de 09       		.uleb128 0x9
 2742 03df 08       		.byte	0x8
 2743 03e0 01       		.byte	0x1
 2744 03e1 4A       		.byte	0x4a
 2745 03e2 23040000 		.4byte	0x423
 2746 03e6 0A       		.uleb128 0xa
 2747 03e7 2F010000 		.4byte	.LASF74
 2748 03eb 01       		.byte	0x1
 2749 03ec 4B       		.byte	0x4b
 2750 03ed A9000000 		.4byte	0xa9
 2751 03f1 00       		.byte	0
 2752 03f2 0A       		.uleb128 0xa
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 69


 2753 03f3 E0090000 		.4byte	.LASF75
 2754 03f7 01       		.byte	0x1
 2755 03f8 4C       		.byte	0x4c
 2756 03f9 A9000000 		.4byte	0xa9
 2757 03fd 02       		.byte	0x2
 2758 03fe 0A       		.uleb128 0xa
 2759 03ff D4080000 		.4byte	.LASF76
 2760 0403 01       		.byte	0x1
 2761 0404 4D       		.byte	0x4d
 2762 0405 9E000000 		.4byte	0x9e
 2763 0409 04       		.byte	0x4
 2764 040a 0A       		.uleb128 0xa
 2765 040b 9E040000 		.4byte	.LASF77
 2766 040f 01       		.byte	0x1
 2767 0410 4F       		.byte	0x4f
 2768 0411 9E000000 		.4byte	0x9e
 2769 0415 05       		.byte	0x5
 2770 0416 0A       		.uleb128 0xa
 2771 0417 8D060000 		.4byte	.LASF78
 2772 041b 01       		.byte	0x1
 2773 041c 54       		.byte	0x54
 2774 041d 9E000000 		.4byte	0x9e
 2775 0421 06       		.byte	0x6
 2776 0422 00       		.byte	0
 2777 0423 03       		.uleb128 0x3
 2778 0424 12080000 		.4byte	.LASF79
 2779 0428 01       		.byte	0x1
 2780 0429 56       		.byte	0x56
 2781 042a DE030000 		.4byte	0x3de
 2782 042e 09       		.uleb128 0x9
 2783 042f 28       		.byte	0x28
 2784 0430 01       		.byte	0x1
 2785 0431 5A       		.byte	0x5a
 2786 0432 C7040000 		.4byte	0x4c7
 2787 0436 0A       		.uleb128 0xa
 2788 0437 560A0000 		.4byte	.LASF80
 2789 043b 01       		.byte	0x1
 2790 043c 5C       		.byte	0x5c
 2791 043d BF000000 		.4byte	0xbf
 2792 0441 00       		.byte	0
 2793 0442 0A       		.uleb128 0xa
 2794 0443 600A0000 		.4byte	.LASF81
 2795 0447 01       		.byte	0x1
 2796 0448 5D       		.byte	0x5d
 2797 0449 BF000000 		.4byte	0xbf
 2798 044d 04       		.byte	0x4
 2799 044e 0A       		.uleb128 0xa
 2800 044f 6A0A0000 		.4byte	.LASF82
 2801 0453 01       		.byte	0x1
 2802 0454 5E       		.byte	0x5e
 2803 0455 BF000000 		.4byte	0xbf
 2804 0459 08       		.byte	0x8
 2805 045a 0A       		.uleb128 0xa
 2806 045b C1040000 		.4byte	.LASF83
 2807 045f 01       		.byte	0x1
 2808 0460 63       		.byte	0x63
 2809 0461 9E000000 		.4byte	0x9e
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 70


 2810 0465 0C       		.byte	0xc
 2811 0466 0A       		.uleb128 0xa
 2812 0467 50020000 		.4byte	.LASF84
 2813 046b 01       		.byte	0x1
 2814 046c 64       		.byte	0x64
 2815 046d 9E000000 		.4byte	0x9e
 2816 0471 0D       		.byte	0xd
 2817 0472 0A       		.uleb128 0xa
 2818 0473 E3010000 		.4byte	.LASF85
 2819 0477 01       		.byte	0x1
 2820 0478 65       		.byte	0x65
 2821 0479 9E000000 		.4byte	0x9e
 2822 047d 0E       		.byte	0xe
 2823 047e 0A       		.uleb128 0xa
 2824 047f C8080000 		.4byte	.LASF86
 2825 0483 01       		.byte	0x1
 2826 0484 66       		.byte	0x66
 2827 0485 9E000000 		.4byte	0x9e
 2828 0489 0F       		.byte	0xf
 2829 048a 0A       		.uleb128 0xa
 2830 048b D7010000 		.4byte	.LASF61
 2831 048f 01       		.byte	0x1
 2832 0490 68       		.byte	0x68
 2833 0491 7F030000 		.4byte	0x37f
 2834 0495 10       		.byte	0x10
 2835 0496 0A       		.uleb128 0xa
 2836 0497 88070000 		.4byte	.LASF87
 2837 049b 01       		.byte	0x1
 2838 049c 6B       		.byte	0x6b
 2839 049d A9000000 		.4byte	0xa9
 2840 04a1 1C       		.byte	0x1c
 2841 04a2 0A       		.uleb128 0xa
 2842 04a3 ED030000 		.4byte	.LASF88
 2843 04a7 01       		.byte	0x1
 2844 04a8 6C       		.byte	0x6c
 2845 04a9 9E000000 		.4byte	0x9e
 2846 04ad 1E       		.byte	0x1e
 2847 04ae 0A       		.uleb128 0xa
 2848 04af 9C090000 		.4byte	.LASF89
 2849 04b3 01       		.byte	0x1
 2850 04b4 6D       		.byte	0x6d
 2851 04b5 C7040000 		.4byte	0x4c7
 2852 04b9 20       		.byte	0x20
 2853 04ba 0A       		.uleb128 0xa
 2854 04bb 67030000 		.4byte	.LASF90
 2855 04bf 01       		.byte	0x1
 2856 04c0 6E       		.byte	0x6e
 2857 04c1 CD040000 		.4byte	0x4cd
 2858 04c5 24       		.byte	0x24
 2859 04c6 00       		.byte	0
 2860 04c7 06       		.uleb128 0x6
 2861 04c8 04       		.byte	0x4
 2862 04c9 D3030000 		.4byte	0x3d3
 2863 04cd 06       		.uleb128 0x6
 2864 04ce 04       		.byte	0x4
 2865 04cf 23040000 		.4byte	0x423
 2866 04d3 03       		.uleb128 0x3
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 71


 2867 04d4 910A0000 		.4byte	.LASF91
 2868 04d8 01       		.byte	0x1
 2869 04d9 6F       		.byte	0x6f
 2870 04da 2E040000 		.4byte	0x42e
 2871 04de 09       		.uleb128 0x9
 2872 04df 38       		.byte	0x38
 2873 04e0 01       		.byte	0x1
 2874 04e1 85       		.byte	0x85
 2875 04e2 9B050000 		.4byte	0x59b
 2876 04e6 0A       		.uleb128 0xa
 2877 04e7 D4080000 		.4byte	.LASF76
 2878 04eb 01       		.byte	0x1
 2879 04ec 86       		.byte	0x86
 2880 04ed 9E000000 		.4byte	0x9e
 2881 04f1 00       		.byte	0
 2882 04f2 0A       		.uleb128 0xa
 2883 04f3 13000000 		.4byte	.LASF92
 2884 04f7 01       		.byte	0x1
 2885 04f8 87       		.byte	0x87
 2886 04f9 9E000000 		.4byte	0x9e
 2887 04fd 01       		.byte	0x1
 2888 04fe 0A       		.uleb128 0xa
 2889 04ff 7C090000 		.4byte	.LASF93
 2890 0503 01       		.byte	0x1
 2891 0504 89       		.byte	0x89
 2892 0505 25000000 		.4byte	0x25
 2893 0509 04       		.byte	0x4
 2894 050a 0A       		.uleb128 0xa
 2895 050b C9070000 		.4byte	.LASF94
 2896 050f 01       		.byte	0x1
 2897 0510 8A       		.byte	0x8a
 2898 0511 25000000 		.4byte	0x25
 2899 0515 08       		.byte	0x8
 2900 0516 0A       		.uleb128 0xa
 2901 0517 39030000 		.4byte	.LASF95
 2902 051b 01       		.byte	0x1
 2903 051c 8B       		.byte	0x8b
 2904 051d 25000000 		.4byte	0x25
 2905 0521 0C       		.byte	0xc
 2906 0522 0A       		.uleb128 0xa
 2907 0523 1E010000 		.4byte	.LASF96
 2908 0527 01       		.byte	0x1
 2909 0528 8C       		.byte	0x8c
 2910 0529 25000000 		.4byte	0x25
 2911 052d 10       		.byte	0x10
 2912 052e 0A       		.uleb128 0xa
 2913 052f 8C080000 		.4byte	.LASF97
 2914 0533 01       		.byte	0x1
 2915 0534 95       		.byte	0x95
 2916 0535 9E000000 		.4byte	0x9e
 2917 0539 14       		.byte	0x14
 2918 053a 0A       		.uleb128 0xa
 2919 053b BC090000 		.4byte	.LASF98
 2920 053f 01       		.byte	0x1
 2921 0540 96       		.byte	0x96
 2922 0541 25000000 		.4byte	0x25
 2923 0545 18       		.byte	0x18
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 72


 2924 0546 0A       		.uleb128 0xa
 2925 0547 5C000000 		.4byte	.LASF99
 2926 054b 01       		.byte	0x1
 2927 054c 98       		.byte	0x98
 2928 054d 25000000 		.4byte	0x25
 2929 0551 1C       		.byte	0x1c
 2930 0552 0A       		.uleb128 0xa
 2931 0553 F3060000 		.4byte	.LASF100
 2932 0557 01       		.byte	0x1
 2933 0558 99       		.byte	0x99
 2934 0559 25000000 		.4byte	0x25
 2935 055d 20       		.byte	0x20
 2936 055e 0A       		.uleb128 0xa
 2937 055f 87020000 		.4byte	.LASF101
 2938 0563 01       		.byte	0x1
 2939 0564 9A       		.byte	0x9a
 2940 0565 25000000 		.4byte	0x25
 2941 0569 24       		.byte	0x24
 2942 056a 0A       		.uleb128 0xa
 2943 056b B2020000 		.4byte	.LASF102
 2944 056f 01       		.byte	0x1
 2945 0570 9B       		.byte	0x9b
 2946 0571 25000000 		.4byte	0x25
 2947 0575 28       		.byte	0x28
 2948 0576 0A       		.uleb128 0xa
 2949 0577 96080000 		.4byte	.LASF103
 2950 057b 01       		.byte	0x1
 2951 057c 9C       		.byte	0x9c
 2952 057d 25000000 		.4byte	0x25
 2953 0581 2C       		.byte	0x2c
 2954 0582 0A       		.uleb128 0xa
 2955 0583 A4010000 		.4byte	.LASF104
 2956 0587 01       		.byte	0x1
 2957 0588 9F       		.byte	0x9f
 2958 0589 25000000 		.4byte	0x25
 2959 058d 30       		.byte	0x30
 2960 058e 0A       		.uleb128 0xa
 2961 058f F5010000 		.4byte	.LASF105
 2962 0593 01       		.byte	0x1
 2963 0594 A0       		.byte	0xa0
 2964 0595 9E000000 		.4byte	0x9e
 2965 0599 34       		.byte	0x34
 2966 059a 00       		.byte	0
 2967 059b 03       		.uleb128 0x3
 2968 059c 6B020000 		.4byte	.LASF106
 2969 05a0 01       		.byte	0x1
 2970 05a1 A2       		.byte	0xa2
 2971 05a2 DE040000 		.4byte	0x4de
 2972 05a6 0D       		.uleb128 0xd
 2973 05a7 C3020000 		.4byte	.LASF178
 2974 05ab 01       		.byte	0x1
 2975 05ac 0402     		.2byte	0x204
 2976 05ae 9E000000 		.4byte	0x9e
 2977 05b2 00000000 		.4byte	.LFB70
 2978 05b6 0C000000 		.4byte	.LFE70-.LFB70
 2979 05ba 01       		.uleb128 0x1
 2980 05bb 9C       		.byte	0x9c
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 73


 2981 05bc D1050000 		.4byte	0x5d1
 2982 05c0 0E       		.uleb128 0xe
 2983 05c1 A6060000 		.4byte	.LASF179
 2984 05c5 01       		.byte	0x1
 2985 05c6 0402     		.2byte	0x204
 2986 05c8 9E000000 		.4byte	0x9e
 2987 05cc 00000000 		.4byte	.LLST0
 2988 05d0 00       		.byte	0
 2989 05d1 0F       		.uleb128 0xf
 2990 05d2 44080000 		.4byte	.LASF107
 2991 05d6 01       		.byte	0x1
 2992 05d7 CF       		.byte	0xcf
 2993 05d8 00000000 		.4byte	.LFB63
 2994 05dc 34000000 		.4byte	.LFE63-.LFB63
 2995 05e0 01       		.uleb128 0x1
 2996 05e1 9C       		.byte	0x9c
 2997 05e2 03060000 		.4byte	0x603
 2998 05e6 10       		.uleb128 0x10
 2999 05e7 08000000 		.4byte	.LVL4
 3000 05eb BC0B0000 		.4byte	0xbbc
 3001 05ef F9050000 		.4byte	0x5f9
 3002 05f3 11       		.uleb128 0x11
 3003 05f4 01       		.uleb128 0x1
 3004 05f5 50       		.byte	0x50
 3005 05f6 01       		.uleb128 0x1
 3006 05f7 31       		.byte	0x31
 3007 05f8 00       		.byte	0
 3008 05f9 12       		.uleb128 0x12
 3009 05fa 28000000 		.4byte	.LVL5
 3010 05fe CD0B0000 		.4byte	0xbcd
 3011 0602 00       		.byte	0
 3012 0603 0F       		.uleb128 0xf
 3013 0604 23020000 		.4byte	.LASF108
 3014 0608 01       		.byte	0x1
 3015 0609 E9       		.byte	0xe9
 3016 060a 00000000 		.4byte	.LFB64
 3017 060e 50000000 		.4byte	.LFE64-.LFB64
 3018 0612 01       		.uleb128 0x1
 3019 0613 9C       		.byte	0x9c
 3020 0614 49060000 		.4byte	0x649
 3021 0618 13       		.uleb128 0x13
 3022 0619 140B0000 		.4byte	.LASF112
 3023 061d 01       		.byte	0x1
 3024 061e F0       		.byte	0xf0
 3025 061f 49060000 		.4byte	0x649
 3026 0623 2C000000 		.4byte	.LLST1
 3027 0627 12       		.uleb128 0x12
 3028 0628 06000000 		.4byte	.LVL6
 3029 062c D40B0000 		.4byte	0xbd4
 3030 0630 12       		.uleb128 0x12
 3031 0631 36000000 		.4byte	.LVL8
 3032 0635 DB0B0000 		.4byte	0xbdb
 3033 0639 14       		.uleb128 0x14
 3034 063a 3C000000 		.4byte	.LVL9
 3035 063e BC0B0000 		.4byte	0xbbc
 3036 0642 11       		.uleb128 0x11
 3037 0643 01       		.uleb128 0x1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 74


 3038 0644 50       		.byte	0x50
 3039 0645 01       		.uleb128 0x1
 3040 0646 30       		.byte	0x30
 3041 0647 00       		.byte	0
 3042 0648 00       		.byte	0
 3043 0649 02       		.uleb128 0x2
 3044 064a 01       		.byte	0x1
 3045 064b 02       		.byte	0x2
 3046 064c 21030000 		.4byte	.LASF109
 3047 0650 15       		.uleb128 0x15
 3048 0651 8D050000 		.4byte	.LASF110
 3049 0655 01       		.byte	0x1
 3050 0656 2F01     		.2byte	0x12f
 3051 0658 00000000 		.4byte	.LFB65
 3052 065c E0010000 		.4byte	.LFE65-.LFB65
 3053 0660 01       		.uleb128 0x1
 3054 0661 9C       		.byte	0x9c
 3055 0662 D5060000 		.4byte	0x6d5
 3056 0666 12       		.uleb128 0x12
 3057 0667 06000000 		.4byte	.LVL10
 3058 066b EC0B0000 		.4byte	0xbec
 3059 066f 12       		.uleb128 0x12
 3060 0670 1C000000 		.4byte	.LVL11
 3061 0674 F70B0000 		.4byte	0xbf7
 3062 0678 12       		.uleb128 0x12
 3063 0679 22000000 		.4byte	.LVL12
 3064 067d 080C0000 		.4byte	0xc08
 3065 0681 12       		.uleb128 0x12
 3066 0682 2C000000 		.4byte	.LVL13
 3067 0686 CD0B0000 		.4byte	0xbcd
 3068 068a 12       		.uleb128 0x12
 3069 068b 52000000 		.4byte	.LVL14
 3070 068f 190C0000 		.4byte	0xc19
 3071 0693 12       		.uleb128 0x12
 3072 0694 A6000000 		.4byte	.LVL15
 3073 0698 2A0C0000 		.4byte	0xc2a
 3074 069c 12       		.uleb128 0x12
 3075 069d AC000000 		.4byte	.LVL16
 3076 06a1 03060000 		.4byte	0x603
 3077 06a5 10       		.uleb128 0x10
 3078 06a6 BA000000 		.4byte	.LVL17
 3079 06aa 2A0C0000 		.4byte	0xc2a
 3080 06ae B8060000 		.4byte	0x6b8
 3081 06b2 11       		.uleb128 0x11
 3082 06b3 01       		.uleb128 0x1
 3083 06b4 50       		.byte	0x50
 3084 06b5 01       		.uleb128 0x1
 3085 06b6 30       		.byte	0x30
 3086 06b7 00       		.byte	0
 3087 06b8 10       		.uleb128 0x10
 3088 06b9 C0000000 		.4byte	.LVL18
 3089 06bd 3B0C0000 		.4byte	0xc3b
 3090 06c1 CB060000 		.4byte	0x6cb
 3091 06c5 11       		.uleb128 0x11
 3092 06c6 01       		.uleb128 0x1
 3093 06c7 50       		.byte	0x50
 3094 06c8 01       		.uleb128 0x1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 75


 3095 06c9 34       		.byte	0x34
 3096 06ca 00       		.byte	0
 3097 06cb 12       		.uleb128 0x12
 3098 06cc D0000000 		.4byte	.LVL19
 3099 06d0 4C0C0000 		.4byte	0xc4c
 3100 06d4 00       		.byte	0
 3101 06d5 15       		.uleb128 0x15
 3102 06d6 45030000 		.4byte	.LASF111
 3103 06da 01       		.byte	0x1
 3104 06db C901     		.2byte	0x1c9
 3105 06dd 00000000 		.4byte	.LFB66
 3106 06e1 64000000 		.4byte	.LFE66-.LFB66
 3107 06e5 01       		.uleb128 0x1
 3108 06e6 9C       		.byte	0x9c
 3109 06e7 20070000 		.4byte	0x720
 3110 06eb 16       		.uleb128 0x16
 3111 06ec 69647800 		.ascii	"idx\000"
 3112 06f0 01       		.byte	0x1
 3113 06f1 CB01     		.2byte	0x1cb
 3114 06f3 9E000000 		.4byte	0x9e
 3115 06f7 40000000 		.4byte	.LLST2
 3116 06fb 10       		.uleb128 0x10
 3117 06fc 26000000 		.4byte	.LVL22
 3118 0700 590C0000 		.4byte	0xc59
 3119 0704 0F070000 		.4byte	0x70f
 3120 0708 11       		.uleb128 0x11
 3121 0709 01       		.uleb128 0x1
 3122 070a 50       		.byte	0x50
 3123 070b 02       		.uleb128 0x2
 3124 070c 74       		.byte	0x74
 3125 070d 00       		.sleb128 0
 3126 070e 00       		.byte	0
 3127 070f 14       		.uleb128 0x14
 3128 0710 46000000 		.4byte	.LVL23
 3129 0714 6E0C0000 		.4byte	0xc6e
 3130 0718 11       		.uleb128 0x11
 3131 0719 01       		.uleb128 0x1
 3132 071a 50       		.byte	0x50
 3133 071b 02       		.uleb128 0x2
 3134 071c 74       		.byte	0x74
 3135 071d 00       		.sleb128 0
 3136 071e 00       		.byte	0
 3137 071f 00       		.byte	0
 3138 0720 15       		.uleb128 0x15
 3139 0721 00030000 		.4byte	.LASF113
 3140 0725 01       		.byte	0x1
 3141 0726 D601     		.2byte	0x1d6
 3142 0728 00000000 		.4byte	.LFB67
 3143 072c A8000000 		.4byte	.LFE67-.LFB67
 3144 0730 01       		.uleb128 0x1
 3145 0731 9C       		.byte	0x9c
 3146 0732 5B070000 		.4byte	0x75b
 3147 0736 12       		.uleb128 0x12
 3148 0737 06000000 		.4byte	.LVL27
 3149 073b 03060000 		.4byte	0x603
 3150 073f 12       		.uleb128 0x12
 3151 0740 84000000 		.4byte	.LVL28
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 76


 3152 0744 D5060000 		.4byte	0x6d5
 3153 0748 12       		.uleb128 0x12
 3154 0749 96000000 		.4byte	.LVL29
 3155 074d 080C0000 		.4byte	0xc08
 3156 0751 12       		.uleb128 0x12
 3157 0752 A2000000 		.4byte	.LVL30
 3158 0756 F70B0000 		.4byte	0xbf7
 3159 075a 00       		.byte	0
 3160 075b 15       		.uleb128 0x15
 3161 075c 99060000 		.4byte	.LASF114
 3162 0760 01       		.byte	0x1
 3163 0761 F101     		.2byte	0x1f1
 3164 0763 00000000 		.4byte	.LFB68
 3165 0767 14000000 		.4byte	.LFE68-.LFB68
 3166 076b 01       		.uleb128 0x1
 3167 076c 9C       		.byte	0x9c
 3168 076d 8E070000 		.4byte	0x78e
 3169 0771 12       		.uleb128 0x12
 3170 0772 06000000 		.4byte	.LVL31
 3171 0776 830C0000 		.4byte	0xc83
 3172 077a 14       		.uleb128 0x14
 3173 077b 0C000000 		.4byte	.LVL32
 3174 077f 8A0C0000 		.4byte	0xc8a
 3175 0783 11       		.uleb128 0x11
 3176 0784 01       		.uleb128 0x1
 3177 0785 50       		.byte	0x50
 3178 0786 05       		.uleb128 0x5
 3179 0787 03       		.byte	0x3
 3180 0788 00000000 		.4byte	stepper_timer_isr
 3181 078c 00       		.byte	0
 3182 078d 00       		.byte	0
 3183 078e 17       		.uleb128 0x17
 3184 078f 0B040000 		.4byte	.LASF180
 3185 0793 01       		.byte	0x1
 3186 0794 F901     		.2byte	0x1f9
 3187 0796 00000000 		.4byte	.LFB69
 3188 079a 30000000 		.4byte	.LFE69-.LFB69
 3189 079e 01       		.uleb128 0x1
 3190 079f 9C       		.byte	0x9c
 3191 07a0 18       		.uleb128 0x18
 3192 07a1 93070000 		.4byte	.LASF115
 3193 07a5 01       		.byte	0x1
 3194 07a6 3F02     		.2byte	0x23f
 3195 07a8 00000000 		.4byte	.LFB71
 3196 07ac 88090000 		.4byte	.LFE71-.LFB71
 3197 07b0 01       		.uleb128 0x1
 3198 07b1 9C       		.byte	0x9c
 3199 07b2 E5090000 		.4byte	0x9e5
 3200 07b6 19       		.uleb128 0x19
 3201 07b7 0E000000 		.4byte	.LBB2
 3202 07bb 54090000 		.4byte	.LBE2-.LBB2
 3203 07bf 1A       		.uleb128 0x1a
 3204 07c0 EA0A0000 		.4byte	.LASF116
 3205 07c4 01       		.byte	0x1
 3206 07c5 EC02     		.2byte	0x2ec
 3207 07c7 CD040000 		.4byte	0x4cd
 3208 07cb 6A000000 		.4byte	.LLST3
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 77


 3209 07cf 1A       		.uleb128 0x1a
 3210 07d0 6B010000 		.4byte	.LASF117
 3211 07d4 01       		.byte	0x1
 3212 07d5 FF02     		.2byte	0x2ff
 3213 07d7 25000000 		.4byte	0x25
 3214 07db 9D000000 		.4byte	.LLST4
 3215 07df 16       		.uleb128 0x16
 3216 07e0 647400   		.ascii	"dt\000"
 3217 07e3 01       		.byte	0x1
 3218 07e4 0003     		.2byte	0x300
 3219 07e6 25000000 		.4byte	0x25
 3220 07ea D8000000 		.4byte	.LLST5
 3221 07ee 1A       		.uleb128 0x1a
 3222 07ef 24000000 		.4byte	.LASF118
 3223 07f3 01       		.byte	0x1
 3224 07f4 0103     		.2byte	0x301
 3225 07f6 25000000 		.4byte	0x25
 3226 07fa 2B010000 		.4byte	.LLST6
 3227 07fe 1A       		.uleb128 0x1a
 3228 07ff C3050000 		.4byte	.LASF119
 3229 0803 01       		.byte	0x1
 3230 0804 0203     		.2byte	0x302
 3231 0806 25000000 		.4byte	0x25
 3232 080a D2010000 		.4byte	.LLST7
 3233 080e 1A       		.uleb128 0x1a
 3234 080f 74030000 		.4byte	.LASF120
 3235 0813 01       		.byte	0x1
 3236 0814 0303     		.2byte	0x303
 3237 0816 25000000 		.4byte	0x25
 3238 081a 32020000 		.4byte	.LLST8
 3239 081e 1A       		.uleb128 0x1a
 3240 081f 1C080000 		.4byte	.LASF121
 3241 0823 01       		.byte	0x1
 3242 0824 0403     		.2byte	0x304
 3243 0826 25000000 		.4byte	0x25
 3244 082a 92020000 		.4byte	.LLST9
 3245 082e 1A       		.uleb128 0x1a
 3246 082f 63070000 		.4byte	.LASF122
 3247 0833 01       		.byte	0x1
 3248 0834 0503     		.2byte	0x305
 3249 0836 25000000 		.4byte	0x25
 3250 083a 61030000 		.4byte	.LLST10
 3251 083e 1A       		.uleb128 0x1a
 3252 083f 57080000 		.4byte	.LASF123
 3253 0843 01       		.byte	0x1
 3254 0844 7503     		.2byte	0x375
 3255 0846 25000000 		.4byte	0x25
 3256 084a 8C030000 		.4byte	.LLST11
 3257 084e 1A       		.uleb128 0x1a
 3258 084f DB050000 		.4byte	.LASF124
 3259 0853 01       		.byte	0x1
 3260 0854 7603     		.2byte	0x376
 3261 0856 25000000 		.4byte	0x25
 3262 085a AA030000 		.4byte	.LLST12
 3263 085e 1A       		.uleb128 0x1a
 3264 085f F9050000 		.4byte	.LASF125
 3265 0863 01       		.byte	0x1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 78


 3266 0864 7703     		.2byte	0x377
 3267 0866 25000000 		.4byte	0x25
 3268 086a C8030000 		.4byte	.LLST13
 3269 086e 1A       		.uleb128 0x1a
 3270 086f A4010000 		.4byte	.LASF104
 3271 0873 01       		.byte	0x1
 3272 0874 9003     		.2byte	0x390
 3273 0876 25000000 		.4byte	0x25
 3274 087a E6030000 		.4byte	.LLST14
 3275 087e 1A       		.uleb128 0x1a
 3276 087f AE0A0000 		.4byte	.LASF126
 3277 0883 01       		.byte	0x1
 3278 0884 9303     		.2byte	0x393
 3279 0886 BF000000 		.4byte	0xbf
 3280 088a 04040000 		.4byte	.LLST15
 3281 088e 1B       		.uleb128 0x1b
 3282 088f 1A000000 		.4byte	.LBB3
 3283 0893 B2030000 		.4byte	.LBE3-.LBB3
 3284 0897 90090000 		.4byte	0x990
 3285 089b 1A       		.uleb128 0x1a
 3286 089c A2070000 		.4byte	.LASF127
 3287 08a0 01       		.byte	0x1
 3288 08a1 9202     		.2byte	0x292
 3289 08a3 25000000 		.4byte	0x25
 3290 08a7 17040000 		.4byte	.LLST16
 3291 08ab 1B       		.uleb128 0x1b
 3292 08ac 5A000000 		.4byte	.LBB4
 3293 08b0 E8000000 		.4byte	.LBE4-.LBB4
 3294 08b4 DB080000 		.4byte	0x8db
 3295 08b8 16       		.uleb128 0x16
 3296 08b9 69647800 		.ascii	"idx\000"
 3297 08bd 01       		.byte	0x1
 3298 08be 6202     		.2byte	0x262
 3299 08c0 9E000000 		.4byte	0x9e
 3300 08c4 61040000 		.4byte	.LLST17
 3301 08c8 12       		.uleb128 0x12
 3302 08c9 64000000 		.4byte	.LVL36
 3303 08cd A6050000 		.4byte	0x5a6
 3304 08d1 12       		.uleb128 0x12
 3305 08d2 00010000 		.4byte	.LVL47
 3306 08d6 9B0C0000 		.4byte	0xc9b
 3307 08da 00       		.byte	0
 3308 08db 1B       		.uleb128 0x1b
 3309 08dc 66010000 		.4byte	.LBB5
 3310 08e0 64000000 		.4byte	.LBE5-.LBB5
 3311 08e4 02090000 		.4byte	0x902
 3312 08e8 1A       		.uleb128 0x1a
 3313 08e9 64040000 		.4byte	.LASF128
 3314 08ed 01       		.byte	0x1
 3315 08ee 9802     		.2byte	0x298
 3316 08f0 25000000 		.4byte	0x25
 3317 08f4 8B040000 		.4byte	.LLST18
 3318 08f8 12       		.uleb128 0x12
 3319 08f9 B0010000 		.4byte	.LVL61
 3320 08fd 9B0C0000 		.4byte	0xc9b
 3321 0901 00       		.byte	0
 3322 0902 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 79


 3323 0903 CA010000 		.4byte	.LBB6
 3324 0907 F8010000 		.4byte	.LBE6-.LBB6
 3325 090b 7D090000 		.4byte	0x97d
 3326 090f 1A       		.uleb128 0x1a
 3327 0910 A3020000 		.4byte	.LASF129
 3328 0914 01       		.byte	0x1
 3329 0915 A502     		.2byte	0x2a5
 3330 0917 25000000 		.4byte	0x25
 3331 091b A9040000 		.4byte	.LLST19
 3332 091f 1A       		.uleb128 0x1a
 3333 0920 6B050000 		.4byte	.LASF130
 3334 0924 01       		.byte	0x1
 3335 0925 A602     		.2byte	0x2a6
 3336 0927 25000000 		.4byte	0x25
 3337 092b ED040000 		.4byte	.LLST20
 3338 092f 1A       		.uleb128 0x1a
 3339 0930 310A0000 		.4byte	.LASF131
 3340 0934 01       		.byte	0x1
 3341 0935 AF02     		.2byte	0x2af
 3342 0937 25000000 		.4byte	0x25
 3343 093b 0B050000 		.4byte	.LLST21
 3344 093f 1A       		.uleb128 0x1a
 3345 0940 89090000 		.4byte	.LASF132
 3346 0944 01       		.byte	0x1
 3347 0945 B002     		.2byte	0x2b0
 3348 0947 25000000 		.4byte	0x25
 3349 094b 34050000 		.4byte	.LLST22
 3350 094f 12       		.uleb128 0x12
 3351 0950 EA010000 		.4byte	.LVL66
 3352 0954 B00C0000 		.4byte	0xcb0
 3353 0958 12       		.uleb128 0x12
 3354 0959 F6010000 		.4byte	.LVL69
 3355 095d 9B0C0000 		.4byte	0xc9b
 3356 0961 12       		.uleb128 0x12
 3357 0962 0A020000 		.4byte	.LVL72
 3358 0966 C10C0000 		.4byte	0xcc1
 3359 096a 12       		.uleb128 0x12
 3360 096b 9C020000 		.4byte	.LVL94
 3361 096f 9B0C0000 		.4byte	0xc9b
 3362 0973 12       		.uleb128 0x12
 3363 0974 9E030000 		.4byte	.LVL118
 3364 0978 9B0C0000 		.4byte	0xc9b
 3365 097c 00       		.byte	0
 3366 097d 12       		.uleb128 0x12
 3367 097e 28000000 		.4byte	.LVL34
 3368 0982 D60C0000 		.4byte	0xcd6
 3369 0986 12       		.uleb128 0x12
 3370 0987 34000000 		.4byte	.LVL35
 3371 098b E70C0000 		.4byte	0xce7
 3372 098f 00       		.byte	0
 3373 0990 1B       		.uleb128 0x1b
 3374 0991 64070000 		.4byte	.LBB7
 3375 0995 2A000000 		.4byte	.LBE7-.LBB7
 3376 0999 BF090000 		.4byte	0x9bf
 3377 099d 16       		.uleb128 0x16
 3378 099e 72706D00 		.ascii	"rpm\000"
 3379 09a2 01       		.byte	0x1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 80


 3380 09a3 5B03     		.2byte	0x35b
 3381 09a5 25000000 		.4byte	0x25
 3382 09a9 52050000 		.4byte	.LLST23
 3383 09ad 14       		.uleb128 0x14
 3384 09ae 88070000 		.4byte	.LVL249
 3385 09b2 F80C0000 		.4byte	0xcf8
 3386 09b6 11       		.uleb128 0x11
 3387 09b7 01       		.uleb128 0x1
 3388 09b8 50       		.byte	0x50
 3389 09b9 03       		.uleb128 0x3
 3390 09ba F5       		.byte	0xf5
 3391 09bb 04       		.uleb128 0x4
 3392 09bc 25       		.uleb128 0x25
 3393 09bd 00       		.byte	0
 3394 09be 00       		.byte	0
 3395 09bf 12       		.uleb128 0x12
 3396 09c0 CC070000 		.4byte	.LVL254
 3397 09c4 0D0D0000 		.4byte	0xd0d
 3398 09c8 12       		.uleb128 0x12
 3399 09c9 DE070000 		.4byte	.LVL259
 3400 09cd 0D0D0000 		.4byte	0xd0d
 3401 09d1 12       		.uleb128 0x12
 3402 09d2 38080000 		.4byte	.LVL272
 3403 09d6 0D0D0000 		.4byte	0xd0d
 3404 09da 12       		.uleb128 0x12
 3405 09db 60090000 		.4byte	.LVL280
 3406 09df 220D0000 		.4byte	0xd22
 3407 09e3 00       		.byte	0
 3408 09e4 00       		.byte	0
 3409 09e5 1C       		.uleb128 0x1c
 3410 09e6 6B060000 		.4byte	.LASF181
 3411 09ea 01       		.byte	0x1
 3412 09eb DC03     		.2byte	0x3dc
 3413 09ed 25000000 		.4byte	0x25
 3414 09f1 00000000 		.4byte	.LFB72
 3415 09f5 20000000 		.4byte	.LFE72-.LFB72
 3416 09f9 01       		.uleb128 0x1
 3417 09fa 9C       		.byte	0x9c
 3418 09fb 0B       		.uleb128 0xb
 3419 09fc D3030000 		.4byte	0x3d3
 3420 0a00 0B0A0000 		.4byte	0xa0b
 3421 0a04 0C       		.uleb128 0xc
 3422 0a05 0F010000 		.4byte	0x10f
 3423 0a09 04       		.byte	0x4
 3424 0a0a 00       		.byte	0
 3425 0a0b 1D       		.uleb128 0x1d
 3426 0a0c 35000000 		.4byte	.LASF133
 3427 0a10 01       		.byte	0x1
 3428 0a11 44       		.byte	0x44
 3429 0a12 FB090000 		.4byte	0x9fb
 3430 0a16 05       		.uleb128 0x5
 3431 0a17 03       		.byte	0x3
 3432 0a18 5C000000 		.4byte	st_block_buffer
 3433 0a1c 0B       		.uleb128 0xb
 3434 0a1d 23040000 		.4byte	0x423
 3435 0a21 2C0A0000 		.4byte	0xa2c
 3436 0a25 0C       		.uleb128 0xc
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 81


 3437 0a26 0F010000 		.4byte	0x10f
 3438 0a2a 05       		.byte	0x5
 3439 0a2b 00       		.byte	0
 3440 0a2c 1D       		.uleb128 0x1d
 3441 0a2d 6E070000 		.4byte	.LASF134
 3442 0a31 01       		.byte	0x1
 3443 0a32 57       		.byte	0x57
 3444 0a33 1C0A0000 		.4byte	0xa1c
 3445 0a37 05       		.uleb128 0x5
 3446 0a38 03       		.byte	0x3
 3447 0a39 2C000000 		.4byte	segment_buffer
 3448 0a3d 1E       		.uleb128 0x1e
 3449 0a3e 737400   		.ascii	"st\000"
 3450 0a41 01       		.byte	0x1
 3451 0a42 70       		.byte	0x70
 3452 0a43 D3040000 		.4byte	0x4d3
 3453 0a47 05       		.uleb128 0x5
 3454 0a48 03       		.byte	0x3
 3455 0a49 00000000 		.4byte	st
 3456 0a4d 1D       		.uleb128 0x1d
 3457 0a4e 57050000 		.4byte	.LASF135
 3458 0a52 01       		.byte	0x1
 3459 0a53 73       		.byte	0x73
 3460 0a54 16010000 		.4byte	0x116
 3461 0a58 05       		.uleb128 0x5
 3462 0a59 03       		.byte	0x3
 3463 0a5a 2B000000 		.4byte	segment_buffer_tail
 3464 0a5e 1D       		.uleb128 0x1d
 3465 0a5f A8000000 		.4byte	.LASF136
 3466 0a63 01       		.byte	0x1
 3467 0a64 74       		.byte	0x74
 3468 0a65 9E000000 		.4byte	0x9e
 3469 0a69 05       		.uleb128 0x5
 3470 0a6a 03       		.byte	0x3
 3471 0a6b 2A000000 		.4byte	segment_buffer_head
 3472 0a6f 1D       		.uleb128 0x1d
 3473 0a70 75020000 		.4byte	.LASF137
 3474 0a74 01       		.byte	0x1
 3475 0a75 75       		.byte	0x75
 3476 0a76 9E000000 		.4byte	0x9e
 3477 0a7a 05       		.uleb128 0x5
 3478 0a7b 03       		.byte	0x3
 3479 0a7c 00010000 		.4byte	segment_next_head
 3480 0a80 1D       		.uleb128 0x1d
 3481 0a81 B3070000 		.4byte	.LASF138
 3482 0a85 01       		.byte	0x1
 3483 0a86 78       		.byte	0x78
 3484 0a87 9E000000 		.4byte	0x9e
 3485 0a8b 05       		.uleb128 0x5
 3486 0a8c 03       		.byte	0x3
 3487 0a8d 28000000 		.4byte	step_port_invert_mask
 3488 0a91 1D       		.uleb128 0x1d
 3489 0a92 A7090000 		.4byte	.LASF139
 3490 0a96 01       		.byte	0x1
 3491 0a97 79       		.byte	0x79
 3492 0a98 9E000000 		.4byte	0x9e
 3493 0a9c 05       		.uleb128 0x5
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 82


 3494 0a9d 03       		.byte	0x3
 3495 0a9e C0000000 		.4byte	dir_port_invert_mask
 3496 0aa2 1D       		.uleb128 0x1d
 3497 0aa3 72010000 		.4byte	.LASF140
 3498 0aa7 01       		.byte	0x1
 3499 0aa8 7C       		.byte	0x7c
 3500 0aa9 16010000 		.4byte	0x116
 3501 0aad 05       		.uleb128 0x5
 3502 0aae 03       		.byte	0x3
 3503 0aaf 29000000 		.4byte	busy
 3504 0ab3 1D       		.uleb128 0x1d
 3505 0ab4 EA060000 		.4byte	.LASF141
 3506 0ab8 01       		.byte	0x1
 3507 0ab9 80       		.byte	0x80
 3508 0aba C40A0000 		.4byte	0xac4
 3509 0abe 05       		.uleb128 0x5
 3510 0abf 03       		.byte	0x3
 3511 0ac0 FC000000 		.4byte	pl_block
 3512 0ac4 06       		.uleb128 0x6
 3513 0ac5 04       		.byte	0x4
 3514 0ac6 8F030000 		.4byte	0x38f
 3515 0aca 1D       		.uleb128 0x1d
 3516 0acb C1000000 		.4byte	.LASF142
 3517 0acf 01       		.byte	0x1
 3518 0ad0 81       		.byte	0x81
 3519 0ad1 C7040000 		.4byte	0x4c7
 3520 0ad5 05       		.uleb128 0x5
 3521 0ad6 03       		.byte	0x3
 3522 0ad7 04010000 		.4byte	st_prep_block
 3523 0adb 1D       		.uleb128 0x1d
 3524 0adc BC000000 		.4byte	.LASF143
 3525 0ae0 01       		.byte	0x1
 3526 0ae1 A3       		.byte	0xa3
 3527 0ae2 9B050000 		.4byte	0x59b
 3528 0ae6 05       		.uleb128 0x5
 3529 0ae7 03       		.byte	0x3
 3530 0ae8 C4000000 		.4byte	prep
 3531 0aec 1F       		.uleb128 0x1f
 3532 0aed 0A070000 		.4byte	.LASF144
 3533 0af1 08       		.byte	0x8
 3534 0af2 9606     		.2byte	0x696
 3535 0af4 F80A0000 		.4byte	0xaf8
 3536 0af8 08       		.uleb128 0x8
 3537 0af9 B4000000 		.4byte	0xb4
 3538 0afd 20       		.uleb128 0x20
 3539 0afe D9030000 		.4byte	.LASF145
 3540 0b02 05       		.byte	0x5
 3541 0b03 6A       		.byte	0x6a
 3542 0b04 1F020000 		.4byte	0x21f
 3543 0b08 21       		.uleb128 0x21
 3544 0b09 73797300 		.ascii	"sys\000"
 3545 0b0d 06       		.byte	0x6
 3546 0b0e 92       		.byte	0x92
 3547 0b0f DB020000 		.4byte	0x2db
 3548 0b13 0B       		.uleb128 0xb
 3549 0b14 B4000000 		.4byte	0xb4
 3550 0b18 230B0000 		.4byte	0xb23
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 83


 3551 0b1c 0C       		.uleb128 0xc
 3552 0b1d 0F010000 		.4byte	0x10f
 3553 0b21 02       		.byte	0x2
 3554 0b22 00       		.byte	0
 3555 0b23 22       		.uleb128 0x22
 3556 0b24 B6050000 		.4byte	.LASF146
 3557 0b28 06       		.byte	0x6
 3558 0b29 95       		.byte	0x95
 3559 0b2a 130B0000 		.4byte	0xb13
 3560 0b2e 05       		.uleb128 0x5
 3561 0b2f 03       		.byte	0x3
 3562 0b30 00000000 		.4byte	sys_position
 3563 0b34 22       		.uleb128 0x22
 3564 0b35 1A050000 		.4byte	.LASF147
 3565 0b39 06       		.byte	0x6
 3566 0b3a 96       		.byte	0x96
 3567 0b3b 130B0000 		.4byte	0xb13
 3568 0b3f 05       		.uleb128 0x5
 3569 0b40 03       		.byte	0x3
 3570 0b41 00000000 		.4byte	sys_probe_position
 3571 0b45 22       		.uleb128 0x22
 3572 0b46 0E010000 		.4byte	.LASF148
 3573 0b4a 06       		.byte	0x6
 3574 0b4b 98       		.byte	0x98
 3575 0b4c 16010000 		.4byte	0x116
 3576 0b50 05       		.uleb128 0x5
 3577 0b51 03       		.byte	0x3
 3578 0b52 00000000 		.4byte	sys_probe_state
 3579 0b56 22       		.uleb128 0x22
 3580 0b57 27030000 		.4byte	.LASF149
 3581 0b5b 06       		.byte	0x6
 3582 0b5c 99       		.byte	0x99
 3583 0b5d 16010000 		.4byte	0x116
 3584 0b61 05       		.uleb128 0x5
 3585 0b62 03       		.byte	0x3
 3586 0b63 00000000 		.4byte	sys_rt_exec_state
 3587 0b67 22       		.uleb128 0x22
 3588 0b68 CE090000 		.4byte	.LASF150
 3589 0b6c 06       		.byte	0x6
 3590 0b6d 9A       		.byte	0x9a
 3591 0b6e 16010000 		.4byte	0x116
 3592 0b72 05       		.uleb128 0x5
 3593 0b73 03       		.byte	0x3
 3594 0b74 00000000 		.4byte	sys_rt_exec_alarm
 3595 0b78 22       		.uleb128 0x22
 3596 0b79 3D060000 		.4byte	.LASF151
 3597 0b7d 06       		.byte	0x6
 3598 0b7e 9B       		.byte	0x9b
 3599 0b7f 16010000 		.4byte	0x116
 3600 0b83 05       		.uleb128 0x5
 3601 0b84 03       		.byte	0x3
 3602 0b85 00000000 		.4byte	sys_rt_exec_motion_override
 3603 0b89 22       		.uleb128 0x22
 3604 0b8a F3070000 		.4byte	.LASF152
 3605 0b8e 06       		.byte	0x6
 3606 0b8f 9C       		.byte	0x9c
 3607 0b90 16010000 		.4byte	0x116
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 84


 3608 0b94 05       		.uleb128 0x5
 3609 0b95 03       		.byte	0x3
 3610 0b96 00000000 		.4byte	sys_rt_exec_accessory_override
 3611 0b9a 22       		.uleb128 0x22
 3612 0b9b 92030000 		.4byte	.LASF153
 3613 0b9f 06       		.byte	0x6
 3614 0ba0 A0       		.byte	0xa0
 3615 0ba1 16010000 		.4byte	0x116
 3616 0ba5 05       		.uleb128 0x5
 3617 0ba6 03       		.byte	0x3
 3618 0ba7 00000000 		.4byte	sys_rt_exec_debug
 3619 0bab 22       		.uleb128 0x22
 3620 0bac 09030000 		.4byte	.LASF154
 3621 0bb0 09       		.byte	0x9
 3622 0bb1 11       		.byte	0x11
 3623 0bb2 9E000000 		.4byte	0x9e
 3624 0bb6 05       		.uleb128 0x5
 3625 0bb7 03       		.byte	0x3
 3626 0bb8 00000000 		.4byte	exec_lcd_status
 3627 0bbc 23       		.uleb128 0x23
 3628 0bbd 17070000 		.4byte	.LASF157
 3629 0bc1 0B       		.byte	0xb
 3630 0bc2 27       		.byte	0x27
 3631 0bc3 CD0B0000 		.4byte	0xbcd
 3632 0bc7 24       		.uleb128 0x24
 3633 0bc8 CA000000 		.4byte	0xca
 3634 0bcc 00       		.byte	0
 3635 0bcd 25       		.uleb128 0x25
 3636 0bce CF000000 		.4byte	.LASF155
 3637 0bd2 0A       		.byte	0xa
 3638 0bd3 5A       		.byte	0x5a
 3639 0bd4 25       		.uleb128 0x25
 3640 0bd5 A7080000 		.4byte	.LASF156
 3641 0bd9 0A       		.byte	0xa
 3642 0bda 5B       		.byte	0x5b
 3643 0bdb 23       		.uleb128 0x23
 3644 0bdc 2D000000 		.4byte	.LASF158
 3645 0be0 0C       		.byte	0xc
 3646 0be1 76       		.byte	0x76
 3647 0be2 EC0B0000 		.4byte	0xbec
 3648 0be6 24       		.uleb128 0x24
 3649 0be7 E2000000 		.4byte	0xe2
 3650 0beb 00       		.byte	0
 3651 0bec 26       		.uleb128 0x26
 3652 0bed ED000000 		.4byte	.LASF182
 3653 0bf1 0A       		.byte	0xa
 3654 0bf2 5E       		.byte	0x5e
 3655 0bf3 CA000000 		.4byte	0xca
 3656 0bf7 23       		.uleb128 0x23
 3657 0bf8 31070000 		.4byte	.LASF159
 3658 0bfc 0D       		.byte	0xd
 3659 0bfd 27       		.byte	0x27
 3660 0bfe 080C0000 		.4byte	0xc08
 3661 0c02 24       		.uleb128 0x24
 3662 0c03 CA000000 		.4byte	0xca
 3663 0c07 00       		.byte	0
 3664 0c08 23       		.uleb128 0x23
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 85


 3665 0c09 9F050000 		.4byte	.LASF160
 3666 0c0d 0E       		.byte	0xe
 3667 0c0e 27       		.byte	0x27
 3668 0c0f 190C0000 		.4byte	0xc19
 3669 0c13 24       		.uleb128 0x24
 3670 0c14 CA000000 		.4byte	0xca
 3671 0c18 00       		.byte	0
 3672 0c19 23       		.uleb128 0x23
 3673 0c1a 09020000 		.4byte	.LASF161
 3674 0c1e 0A       		.byte	0xa
 3675 0c1f 68       		.byte	0x68
 3676 0c20 2A0C0000 		.4byte	0xc2a
 3677 0c24 24       		.uleb128 0x24
 3678 0c25 D6000000 		.4byte	0xd6
 3679 0c29 00       		.byte	0
 3680 0c2a 23       		.uleb128 0x23
 3681 0c2b 59060000 		.4byte	.LASF162
 3682 0c2f 0F       		.byte	0xf
 3683 0c30 37       		.byte	0x37
 3684 0c31 3B0C0000 		.4byte	0xc3b
 3685 0c35 24       		.uleb128 0x24
 3686 0c36 9E000000 		.4byte	0x9e
 3687 0c3a 00       		.byte	0
 3688 0c3b 23       		.uleb128 0x23
 3689 0c3c F1040000 		.4byte	.LASF163
 3690 0c40 06       		.byte	0x6
 3691 0c41 C5       		.byte	0xc5
 3692 0c42 4C0C0000 		.4byte	0xc4c
 3693 0c46 24       		.uleb128 0x24
 3694 0c47 9E000000 		.4byte	0x9e
 3695 0c4b 00       		.byte	0
 3696 0c4c 27       		.uleb128 0x27
 3697 0c4d 7E030000 		.4byte	.LASF183
 3698 0c51 13       		.byte	0x13
 3699 0c52 2E       		.byte	0x2e
 3700 0c53 590C0000 		.4byte	0xc59
 3701 0c57 28       		.uleb128 0x28
 3702 0c58 00       		.byte	0
 3703 0c59 29       		.uleb128 0x29
 3704 0c5a 45050000 		.4byte	.LASF164
 3705 0c5e 05       		.byte	0x5
 3706 0c5f 88       		.byte	0x88
 3707 0c60 9E000000 		.4byte	0x9e
 3708 0c64 6E0C0000 		.4byte	0xc6e
 3709 0c68 24       		.uleb128 0x24
 3710 0c69 9E000000 		.4byte	0x9e
 3711 0c6d 00       		.byte	0
 3712 0c6e 29       		.uleb128 0x29
 3713 0c6f 1E0B0000 		.4byte	.LASF165
 3714 0c73 05       		.byte	0x5
 3715 0c74 8B       		.byte	0x8b
 3716 0c75 9E000000 		.4byte	0x9e
 3717 0c79 830C0000 		.4byte	0xc83
 3718 0c7d 24       		.uleb128 0x24
 3719 0c7e 9E000000 		.4byte	0x9e
 3720 0c82 00       		.byte	0
 3721 0c83 25       		.uleb128 0x25
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 86


 3722 0c84 AA040000 		.4byte	.LASF166
 3723 0c88 10       		.byte	0x10
 3724 0c89 27       		.byte	0x27
 3725 0c8a 23       		.uleb128 0x23
 3726 0c8b 450B0000 		.4byte	.LASF167
 3727 0c8f 11       		.byte	0x11
 3728 0c90 18       		.byte	0x18
 3729 0c91 9B0C0000 		.4byte	0xc9b
 3730 0c95 24       		.uleb128 0x24
 3731 0c96 FC000000 		.4byte	0xfc
 3732 0c9a 00       		.byte	0
 3733 0c9b 29       		.uleb128 0x29
 3734 0c9c F0010000 		.4byte	.LASF168
 3735 0ca0 12       		.byte	0x12
 3736 0ca1 86       		.byte	0x86
 3737 0ca2 EE000000 		.4byte	0xee
 3738 0ca6 B00C0000 		.4byte	0xcb0
 3739 0caa 24       		.uleb128 0x24
 3740 0cab EE000000 		.4byte	0xee
 3741 0caf 00       		.byte	0
 3742 0cb0 2A       		.uleb128 0x2a
 3743 0cb1 C7060000 		.4byte	.LASF169
 3744 0cb5 07       		.byte	0x7
 3745 0cb6 7D       		.byte	0x7d
 3746 0cb7 25000000 		.4byte	0x25
 3747 0cbb C10C0000 		.4byte	0xcc1
 3748 0cbf 28       		.uleb128 0x28
 3749 0cc0 00       		.byte	0
 3750 0cc1 29       		.uleb128 0x29
 3751 0cc2 CE040000 		.4byte	.LASF170
 3752 0cc6 07       		.byte	0x7
 3753 0cc7 80       		.byte	0x80
 3754 0cc8 25000000 		.4byte	0x25
 3755 0ccc D60C0000 		.4byte	0xcd6
 3756 0cd0 24       		.uleb128 0x24
 3757 0cd1 C40A0000 		.4byte	0xac4
 3758 0cd5 00       		.byte	0
 3759 0cd6 2A       		.uleb128 0x2a
 3760 0cd7 F70A0000 		.4byte	.LASF171
 3761 0cdb 07       		.byte	0x7
 3762 0cdc 74       		.byte	0x74
 3763 0cdd C40A0000 		.4byte	0xac4
 3764 0ce1 E70C0000 		.4byte	0xce7
 3765 0ce5 28       		.uleb128 0x28
 3766 0ce6 00       		.byte	0
 3767 0ce7 2A       		.uleb128 0x2a
 3768 0ce8 6B080000 		.4byte	.LASF172
 3769 0cec 07       		.byte	0x7
 3770 0ced 77       		.byte	0x77
 3771 0cee C40A0000 		.4byte	0xac4
 3772 0cf2 F80C0000 		.4byte	0xcf8
 3773 0cf6 28       		.uleb128 0x28
 3774 0cf7 00       		.byte	0
 3775 0cf8 29       		.uleb128 0x29
 3776 0cf9 B50A0000 		.4byte	.LASF173
 3777 0cfd 0F       		.byte	0xf
 3778 0cfe 3A       		.byte	0x3a
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 87


 3779 0cff 9E000000 		.4byte	0x9e
 3780 0d03 0D0D0000 		.4byte	0xd0d
 3781 0d07 24       		.uleb128 0x24
 3782 0d08 25000000 		.4byte	0x25
 3783 0d0c 00       		.byte	0
 3784 0d0d 29       		.uleb128 0x29
 3785 0d0e AE070000 		.4byte	.LASF174
 3786 0d12 12       		.byte	0x12
 3787 0d13 73       		.byte	0x73
 3788 0d14 EE000000 		.4byte	0xee
 3789 0d18 220D0000 		.4byte	0xd22
 3790 0d1c 24       		.uleb128 0x24
 3791 0d1d EE000000 		.4byte	0xee
 3792 0d21 00       		.byte	0
 3793 0d22 2B       		.uleb128 0x2b
 3794 0d23 10060000 		.4byte	.LASF184
 3795 0d27 07       		.byte	0x7
 3796 0d28 71       		.byte	0x71
 3797 0d29 28       		.uleb128 0x28
 3798 0d2a 00       		.byte	0
 3799 0d2b 00       		.byte	0
 3800              		.section	.debug_abbrev,"",%progbits
 3801              	.Ldebug_abbrev0:
 3802 0000 01       		.uleb128 0x1
 3803 0001 11       		.uleb128 0x11
 3804 0002 01       		.byte	0x1
 3805 0003 25       		.uleb128 0x25
 3806 0004 0E       		.uleb128 0xe
 3807 0005 13       		.uleb128 0x13
 3808 0006 0B       		.uleb128 0xb
 3809 0007 03       		.uleb128 0x3
 3810 0008 0E       		.uleb128 0xe
 3811 0009 1B       		.uleb128 0x1b
 3812 000a 0E       		.uleb128 0xe
 3813 000b 55       		.uleb128 0x55
 3814 000c 17       		.uleb128 0x17
 3815 000d 11       		.uleb128 0x11
 3816 000e 01       		.uleb128 0x1
 3817 000f 10       		.uleb128 0x10
 3818 0010 17       		.uleb128 0x17
 3819 0011 00       		.byte	0
 3820 0012 00       		.byte	0
 3821 0013 02       		.uleb128 0x2
 3822 0014 24       		.uleb128 0x24
 3823 0015 00       		.byte	0
 3824 0016 0B       		.uleb128 0xb
 3825 0017 0B       		.uleb128 0xb
 3826 0018 3E       		.uleb128 0x3e
 3827 0019 0B       		.uleb128 0xb
 3828 001a 03       		.uleb128 0x3
 3829 001b 0E       		.uleb128 0xe
 3830 001c 00       		.byte	0
 3831 001d 00       		.byte	0
 3832 001e 03       		.uleb128 0x3
 3833 001f 16       		.uleb128 0x16
 3834 0020 00       		.byte	0
 3835 0021 03       		.uleb128 0x3
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 88


 3836 0022 0E       		.uleb128 0xe
 3837 0023 3A       		.uleb128 0x3a
 3838 0024 0B       		.uleb128 0xb
 3839 0025 3B       		.uleb128 0x3b
 3840 0026 0B       		.uleb128 0xb
 3841 0027 49       		.uleb128 0x49
 3842 0028 13       		.uleb128 0x13
 3843 0029 00       		.byte	0
 3844 002a 00       		.byte	0
 3845 002b 04       		.uleb128 0x4
 3846 002c 24       		.uleb128 0x24
 3847 002d 00       		.byte	0
 3848 002e 0B       		.uleb128 0xb
 3849 002f 0B       		.uleb128 0xb
 3850 0030 3E       		.uleb128 0x3e
 3851 0031 0B       		.uleb128 0xb
 3852 0032 03       		.uleb128 0x3
 3853 0033 08       		.uleb128 0x8
 3854 0034 00       		.byte	0
 3855 0035 00       		.byte	0
 3856 0036 05       		.uleb128 0x5
 3857 0037 16       		.uleb128 0x16
 3858 0038 00       		.byte	0
 3859 0039 03       		.uleb128 0x3
 3860 003a 0E       		.uleb128 0xe
 3861 003b 3A       		.uleb128 0x3a
 3862 003c 0B       		.uleb128 0xb
 3863 003d 3B       		.uleb128 0x3b
 3864 003e 05       		.uleb128 0x5
 3865 003f 49       		.uleb128 0x49
 3866 0040 13       		.uleb128 0x13
 3867 0041 00       		.byte	0
 3868 0042 00       		.byte	0
 3869 0043 06       		.uleb128 0x6
 3870 0044 0F       		.uleb128 0xf
 3871 0045 00       		.byte	0
 3872 0046 0B       		.uleb128 0xb
 3873 0047 0B       		.uleb128 0xb
 3874 0048 49       		.uleb128 0x49
 3875 0049 13       		.uleb128 0x13
 3876 004a 00       		.byte	0
 3877 004b 00       		.byte	0
 3878 004c 07       		.uleb128 0x7
 3879 004d 15       		.uleb128 0x15
 3880 004e 00       		.byte	0
 3881 004f 27       		.uleb128 0x27
 3882 0050 19       		.uleb128 0x19
 3883 0051 00       		.byte	0
 3884 0052 00       		.byte	0
 3885 0053 08       		.uleb128 0x8
 3886 0054 35       		.uleb128 0x35
 3887 0055 00       		.byte	0
 3888 0056 49       		.uleb128 0x49
 3889 0057 13       		.uleb128 0x13
 3890 0058 00       		.byte	0
 3891 0059 00       		.byte	0
 3892 005a 09       		.uleb128 0x9
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 89


 3893 005b 13       		.uleb128 0x13
 3894 005c 01       		.byte	0x1
 3895 005d 0B       		.uleb128 0xb
 3896 005e 0B       		.uleb128 0xb
 3897 005f 3A       		.uleb128 0x3a
 3898 0060 0B       		.uleb128 0xb
 3899 0061 3B       		.uleb128 0x3b
 3900 0062 0B       		.uleb128 0xb
 3901 0063 01       		.uleb128 0x1
 3902 0064 13       		.uleb128 0x13
 3903 0065 00       		.byte	0
 3904 0066 00       		.byte	0
 3905 0067 0A       		.uleb128 0xa
 3906 0068 0D       		.uleb128 0xd
 3907 0069 00       		.byte	0
 3908 006a 03       		.uleb128 0x3
 3909 006b 0E       		.uleb128 0xe
 3910 006c 3A       		.uleb128 0x3a
 3911 006d 0B       		.uleb128 0xb
 3912 006e 3B       		.uleb128 0x3b
 3913 006f 0B       		.uleb128 0xb
 3914 0070 49       		.uleb128 0x49
 3915 0071 13       		.uleb128 0x13
 3916 0072 38       		.uleb128 0x38
 3917 0073 0B       		.uleb128 0xb
 3918 0074 00       		.byte	0
 3919 0075 00       		.byte	0
 3920 0076 0B       		.uleb128 0xb
 3921 0077 01       		.uleb128 0x1
 3922 0078 01       		.byte	0x1
 3923 0079 49       		.uleb128 0x49
 3924 007a 13       		.uleb128 0x13
 3925 007b 01       		.uleb128 0x1
 3926 007c 13       		.uleb128 0x13
 3927 007d 00       		.byte	0
 3928 007e 00       		.byte	0
 3929 007f 0C       		.uleb128 0xc
 3930 0080 21       		.uleb128 0x21
 3931 0081 00       		.byte	0
 3932 0082 49       		.uleb128 0x49
 3933 0083 13       		.uleb128 0x13
 3934 0084 2F       		.uleb128 0x2f
 3935 0085 0B       		.uleb128 0xb
 3936 0086 00       		.byte	0
 3937 0087 00       		.byte	0
 3938 0088 0D       		.uleb128 0xd
 3939 0089 2E       		.uleb128 0x2e
 3940 008a 01       		.byte	0x1
 3941 008b 03       		.uleb128 0x3
 3942 008c 0E       		.uleb128 0xe
 3943 008d 3A       		.uleb128 0x3a
 3944 008e 0B       		.uleb128 0xb
 3945 008f 3B       		.uleb128 0x3b
 3946 0090 05       		.uleb128 0x5
 3947 0091 27       		.uleb128 0x27
 3948 0092 19       		.uleb128 0x19
 3949 0093 49       		.uleb128 0x49
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 90


 3950 0094 13       		.uleb128 0x13
 3951 0095 11       		.uleb128 0x11
 3952 0096 01       		.uleb128 0x1
 3953 0097 12       		.uleb128 0x12
 3954 0098 06       		.uleb128 0x6
 3955 0099 40       		.uleb128 0x40
 3956 009a 18       		.uleb128 0x18
 3957 009b 9742     		.uleb128 0x2117
 3958 009d 19       		.uleb128 0x19
 3959 009e 01       		.uleb128 0x1
 3960 009f 13       		.uleb128 0x13
 3961 00a0 00       		.byte	0
 3962 00a1 00       		.byte	0
 3963 00a2 0E       		.uleb128 0xe
 3964 00a3 05       		.uleb128 0x5
 3965 00a4 00       		.byte	0
 3966 00a5 03       		.uleb128 0x3
 3967 00a6 0E       		.uleb128 0xe
 3968 00a7 3A       		.uleb128 0x3a
 3969 00a8 0B       		.uleb128 0xb
 3970 00a9 3B       		.uleb128 0x3b
 3971 00aa 05       		.uleb128 0x5
 3972 00ab 49       		.uleb128 0x49
 3973 00ac 13       		.uleb128 0x13
 3974 00ad 02       		.uleb128 0x2
 3975 00ae 17       		.uleb128 0x17
 3976 00af 00       		.byte	0
 3977 00b0 00       		.byte	0
 3978 00b1 0F       		.uleb128 0xf
 3979 00b2 2E       		.uleb128 0x2e
 3980 00b3 01       		.byte	0x1
 3981 00b4 3F       		.uleb128 0x3f
 3982 00b5 19       		.uleb128 0x19
 3983 00b6 03       		.uleb128 0x3
 3984 00b7 0E       		.uleb128 0xe
 3985 00b8 3A       		.uleb128 0x3a
 3986 00b9 0B       		.uleb128 0xb
 3987 00ba 3B       		.uleb128 0x3b
 3988 00bb 0B       		.uleb128 0xb
 3989 00bc 11       		.uleb128 0x11
 3990 00bd 01       		.uleb128 0x1
 3991 00be 12       		.uleb128 0x12
 3992 00bf 06       		.uleb128 0x6
 3993 00c0 40       		.uleb128 0x40
 3994 00c1 18       		.uleb128 0x18
 3995 00c2 9742     		.uleb128 0x2117
 3996 00c4 19       		.uleb128 0x19
 3997 00c5 01       		.uleb128 0x1
 3998 00c6 13       		.uleb128 0x13
 3999 00c7 00       		.byte	0
 4000 00c8 00       		.byte	0
 4001 00c9 10       		.uleb128 0x10
 4002 00ca 898201   		.uleb128 0x4109
 4003 00cd 01       		.byte	0x1
 4004 00ce 11       		.uleb128 0x11
 4005 00cf 01       		.uleb128 0x1
 4006 00d0 31       		.uleb128 0x31
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 91


 4007 00d1 13       		.uleb128 0x13
 4008 00d2 01       		.uleb128 0x1
 4009 00d3 13       		.uleb128 0x13
 4010 00d4 00       		.byte	0
 4011 00d5 00       		.byte	0
 4012 00d6 11       		.uleb128 0x11
 4013 00d7 8A8201   		.uleb128 0x410a
 4014 00da 00       		.byte	0
 4015 00db 02       		.uleb128 0x2
 4016 00dc 18       		.uleb128 0x18
 4017 00dd 9142     		.uleb128 0x2111
 4018 00df 18       		.uleb128 0x18
 4019 00e0 00       		.byte	0
 4020 00e1 00       		.byte	0
 4021 00e2 12       		.uleb128 0x12
 4022 00e3 898201   		.uleb128 0x4109
 4023 00e6 00       		.byte	0
 4024 00e7 11       		.uleb128 0x11
 4025 00e8 01       		.uleb128 0x1
 4026 00e9 31       		.uleb128 0x31
 4027 00ea 13       		.uleb128 0x13
 4028 00eb 00       		.byte	0
 4029 00ec 00       		.byte	0
 4030 00ed 13       		.uleb128 0x13
 4031 00ee 34       		.uleb128 0x34
 4032 00ef 00       		.byte	0
 4033 00f0 03       		.uleb128 0x3
 4034 00f1 0E       		.uleb128 0xe
 4035 00f2 3A       		.uleb128 0x3a
 4036 00f3 0B       		.uleb128 0xb
 4037 00f4 3B       		.uleb128 0x3b
 4038 00f5 0B       		.uleb128 0xb
 4039 00f6 49       		.uleb128 0x49
 4040 00f7 13       		.uleb128 0x13
 4041 00f8 02       		.uleb128 0x2
 4042 00f9 17       		.uleb128 0x17
 4043 00fa 00       		.byte	0
 4044 00fb 00       		.byte	0
 4045 00fc 14       		.uleb128 0x14
 4046 00fd 898201   		.uleb128 0x4109
 4047 0100 01       		.byte	0x1
 4048 0101 11       		.uleb128 0x11
 4049 0102 01       		.uleb128 0x1
 4050 0103 31       		.uleb128 0x31
 4051 0104 13       		.uleb128 0x13
 4052 0105 00       		.byte	0
 4053 0106 00       		.byte	0
 4054 0107 15       		.uleb128 0x15
 4055 0108 2E       		.uleb128 0x2e
 4056 0109 01       		.byte	0x1
 4057 010a 3F       		.uleb128 0x3f
 4058 010b 19       		.uleb128 0x19
 4059 010c 03       		.uleb128 0x3
 4060 010d 0E       		.uleb128 0xe
 4061 010e 3A       		.uleb128 0x3a
 4062 010f 0B       		.uleb128 0xb
 4063 0110 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 92


 4064 0111 05       		.uleb128 0x5
 4065 0112 11       		.uleb128 0x11
 4066 0113 01       		.uleb128 0x1
 4067 0114 12       		.uleb128 0x12
 4068 0115 06       		.uleb128 0x6
 4069 0116 40       		.uleb128 0x40
 4070 0117 18       		.uleb128 0x18
 4071 0118 9742     		.uleb128 0x2117
 4072 011a 19       		.uleb128 0x19
 4073 011b 01       		.uleb128 0x1
 4074 011c 13       		.uleb128 0x13
 4075 011d 00       		.byte	0
 4076 011e 00       		.byte	0
 4077 011f 16       		.uleb128 0x16
 4078 0120 34       		.uleb128 0x34
 4079 0121 00       		.byte	0
 4080 0122 03       		.uleb128 0x3
 4081 0123 08       		.uleb128 0x8
 4082 0124 3A       		.uleb128 0x3a
 4083 0125 0B       		.uleb128 0xb
 4084 0126 3B       		.uleb128 0x3b
 4085 0127 05       		.uleb128 0x5
 4086 0128 49       		.uleb128 0x49
 4087 0129 13       		.uleb128 0x13
 4088 012a 02       		.uleb128 0x2
 4089 012b 17       		.uleb128 0x17
 4090 012c 00       		.byte	0
 4091 012d 00       		.byte	0
 4092 012e 17       		.uleb128 0x17
 4093 012f 2E       		.uleb128 0x2e
 4094 0130 00       		.byte	0
 4095 0131 3F       		.uleb128 0x3f
 4096 0132 19       		.uleb128 0x19
 4097 0133 03       		.uleb128 0x3
 4098 0134 0E       		.uleb128 0xe
 4099 0135 3A       		.uleb128 0x3a
 4100 0136 0B       		.uleb128 0xb
 4101 0137 3B       		.uleb128 0x3b
 4102 0138 05       		.uleb128 0x5
 4103 0139 11       		.uleb128 0x11
 4104 013a 01       		.uleb128 0x1
 4105 013b 12       		.uleb128 0x12
 4106 013c 06       		.uleb128 0x6
 4107 013d 40       		.uleb128 0x40
 4108 013e 18       		.uleb128 0x18
 4109 013f 9642     		.uleb128 0x2116
 4110 0141 19       		.uleb128 0x19
 4111 0142 00       		.byte	0
 4112 0143 00       		.byte	0
 4113 0144 18       		.uleb128 0x18
 4114 0145 2E       		.uleb128 0x2e
 4115 0146 01       		.byte	0x1
 4116 0147 3F       		.uleb128 0x3f
 4117 0148 19       		.uleb128 0x19
 4118 0149 03       		.uleb128 0x3
 4119 014a 0E       		.uleb128 0xe
 4120 014b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 93


 4121 014c 0B       		.uleb128 0xb
 4122 014d 3B       		.uleb128 0x3b
 4123 014e 05       		.uleb128 0x5
 4124 014f 11       		.uleb128 0x11
 4125 0150 01       		.uleb128 0x1
 4126 0151 12       		.uleb128 0x12
 4127 0152 06       		.uleb128 0x6
 4128 0153 40       		.uleb128 0x40
 4129 0154 18       		.uleb128 0x18
 4130 0155 9642     		.uleb128 0x2116
 4131 0157 19       		.uleb128 0x19
 4132 0158 01       		.uleb128 0x1
 4133 0159 13       		.uleb128 0x13
 4134 015a 00       		.byte	0
 4135 015b 00       		.byte	0
 4136 015c 19       		.uleb128 0x19
 4137 015d 0B       		.uleb128 0xb
 4138 015e 01       		.byte	0x1
 4139 015f 11       		.uleb128 0x11
 4140 0160 01       		.uleb128 0x1
 4141 0161 12       		.uleb128 0x12
 4142 0162 06       		.uleb128 0x6
 4143 0163 00       		.byte	0
 4144 0164 00       		.byte	0
 4145 0165 1A       		.uleb128 0x1a
 4146 0166 34       		.uleb128 0x34
 4147 0167 00       		.byte	0
 4148 0168 03       		.uleb128 0x3
 4149 0169 0E       		.uleb128 0xe
 4150 016a 3A       		.uleb128 0x3a
 4151 016b 0B       		.uleb128 0xb
 4152 016c 3B       		.uleb128 0x3b
 4153 016d 05       		.uleb128 0x5
 4154 016e 49       		.uleb128 0x49
 4155 016f 13       		.uleb128 0x13
 4156 0170 02       		.uleb128 0x2
 4157 0171 17       		.uleb128 0x17
 4158 0172 00       		.byte	0
 4159 0173 00       		.byte	0
 4160 0174 1B       		.uleb128 0x1b
 4161 0175 0B       		.uleb128 0xb
 4162 0176 01       		.byte	0x1
 4163 0177 11       		.uleb128 0x11
 4164 0178 01       		.uleb128 0x1
 4165 0179 12       		.uleb128 0x12
 4166 017a 06       		.uleb128 0x6
 4167 017b 01       		.uleb128 0x1
 4168 017c 13       		.uleb128 0x13
 4169 017d 00       		.byte	0
 4170 017e 00       		.byte	0
 4171 017f 1C       		.uleb128 0x1c
 4172 0180 2E       		.uleb128 0x2e
 4173 0181 00       		.byte	0
 4174 0182 3F       		.uleb128 0x3f
 4175 0183 19       		.uleb128 0x19
 4176 0184 03       		.uleb128 0x3
 4177 0185 0E       		.uleb128 0xe
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 94


 4178 0186 3A       		.uleb128 0x3a
 4179 0187 0B       		.uleb128 0xb
 4180 0188 3B       		.uleb128 0x3b
 4181 0189 05       		.uleb128 0x5
 4182 018a 49       		.uleb128 0x49
 4183 018b 13       		.uleb128 0x13
 4184 018c 11       		.uleb128 0x11
 4185 018d 01       		.uleb128 0x1
 4186 018e 12       		.uleb128 0x12
 4187 018f 06       		.uleb128 0x6
 4188 0190 40       		.uleb128 0x40
 4189 0191 18       		.uleb128 0x18
 4190 0192 9742     		.uleb128 0x2117
 4191 0194 19       		.uleb128 0x19
 4192 0195 00       		.byte	0
 4193 0196 00       		.byte	0
 4194 0197 1D       		.uleb128 0x1d
 4195 0198 34       		.uleb128 0x34
 4196 0199 00       		.byte	0
 4197 019a 03       		.uleb128 0x3
 4198 019b 0E       		.uleb128 0xe
 4199 019c 3A       		.uleb128 0x3a
 4200 019d 0B       		.uleb128 0xb
 4201 019e 3B       		.uleb128 0x3b
 4202 019f 0B       		.uleb128 0xb
 4203 01a0 49       		.uleb128 0x49
 4204 01a1 13       		.uleb128 0x13
 4205 01a2 02       		.uleb128 0x2
 4206 01a3 18       		.uleb128 0x18
 4207 01a4 00       		.byte	0
 4208 01a5 00       		.byte	0
 4209 01a6 1E       		.uleb128 0x1e
 4210 01a7 34       		.uleb128 0x34
 4211 01a8 00       		.byte	0
 4212 01a9 03       		.uleb128 0x3
 4213 01aa 08       		.uleb128 0x8
 4214 01ab 3A       		.uleb128 0x3a
 4215 01ac 0B       		.uleb128 0xb
 4216 01ad 3B       		.uleb128 0x3b
 4217 01ae 0B       		.uleb128 0xb
 4218 01af 49       		.uleb128 0x49
 4219 01b0 13       		.uleb128 0x13
 4220 01b1 02       		.uleb128 0x2
 4221 01b2 18       		.uleb128 0x18
 4222 01b3 00       		.byte	0
 4223 01b4 00       		.byte	0
 4224 01b5 1F       		.uleb128 0x1f
 4225 01b6 34       		.uleb128 0x34
 4226 01b7 00       		.byte	0
 4227 01b8 03       		.uleb128 0x3
 4228 01b9 0E       		.uleb128 0xe
 4229 01ba 3A       		.uleb128 0x3a
 4230 01bb 0B       		.uleb128 0xb
 4231 01bc 3B       		.uleb128 0x3b
 4232 01bd 05       		.uleb128 0x5
 4233 01be 49       		.uleb128 0x49
 4234 01bf 13       		.uleb128 0x13
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 95


 4235 01c0 3F       		.uleb128 0x3f
 4236 01c1 19       		.uleb128 0x19
 4237 01c2 3C       		.uleb128 0x3c
 4238 01c3 19       		.uleb128 0x19
 4239 01c4 00       		.byte	0
 4240 01c5 00       		.byte	0
 4241 01c6 20       		.uleb128 0x20
 4242 01c7 34       		.uleb128 0x34
 4243 01c8 00       		.byte	0
 4244 01c9 03       		.uleb128 0x3
 4245 01ca 0E       		.uleb128 0xe
 4246 01cb 3A       		.uleb128 0x3a
 4247 01cc 0B       		.uleb128 0xb
 4248 01cd 3B       		.uleb128 0x3b
 4249 01ce 0B       		.uleb128 0xb
 4250 01cf 49       		.uleb128 0x49
 4251 01d0 13       		.uleb128 0x13
 4252 01d1 3F       		.uleb128 0x3f
 4253 01d2 19       		.uleb128 0x19
 4254 01d3 3C       		.uleb128 0x3c
 4255 01d4 19       		.uleb128 0x19
 4256 01d5 00       		.byte	0
 4257 01d6 00       		.byte	0
 4258 01d7 21       		.uleb128 0x21
 4259 01d8 34       		.uleb128 0x34
 4260 01d9 00       		.byte	0
 4261 01da 03       		.uleb128 0x3
 4262 01db 08       		.uleb128 0x8
 4263 01dc 3A       		.uleb128 0x3a
 4264 01dd 0B       		.uleb128 0xb
 4265 01de 3B       		.uleb128 0x3b
 4266 01df 0B       		.uleb128 0xb
 4267 01e0 49       		.uleb128 0x49
 4268 01e1 13       		.uleb128 0x13
 4269 01e2 3F       		.uleb128 0x3f
 4270 01e3 19       		.uleb128 0x19
 4271 01e4 3C       		.uleb128 0x3c
 4272 01e5 19       		.uleb128 0x19
 4273 01e6 00       		.byte	0
 4274 01e7 00       		.byte	0
 4275 01e8 22       		.uleb128 0x22
 4276 01e9 34       		.uleb128 0x34
 4277 01ea 00       		.byte	0
 4278 01eb 03       		.uleb128 0x3
 4279 01ec 0E       		.uleb128 0xe
 4280 01ed 3A       		.uleb128 0x3a
 4281 01ee 0B       		.uleb128 0xb
 4282 01ef 3B       		.uleb128 0x3b
 4283 01f0 0B       		.uleb128 0xb
 4284 01f1 49       		.uleb128 0x49
 4285 01f2 13       		.uleb128 0x13
 4286 01f3 3F       		.uleb128 0x3f
 4287 01f4 19       		.uleb128 0x19
 4288 01f5 02       		.uleb128 0x2
 4289 01f6 18       		.uleb128 0x18
 4290 01f7 00       		.byte	0
 4291 01f8 00       		.byte	0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 96


 4292 01f9 23       		.uleb128 0x23
 4293 01fa 2E       		.uleb128 0x2e
 4294 01fb 01       		.byte	0x1
 4295 01fc 3F       		.uleb128 0x3f
 4296 01fd 19       		.uleb128 0x19
 4297 01fe 03       		.uleb128 0x3
 4298 01ff 0E       		.uleb128 0xe
 4299 0200 3A       		.uleb128 0x3a
 4300 0201 0B       		.uleb128 0xb
 4301 0202 3B       		.uleb128 0x3b
 4302 0203 0B       		.uleb128 0xb
 4303 0204 27       		.uleb128 0x27
 4304 0205 19       		.uleb128 0x19
 4305 0206 3C       		.uleb128 0x3c
 4306 0207 19       		.uleb128 0x19
 4307 0208 01       		.uleb128 0x1
 4308 0209 13       		.uleb128 0x13
 4309 020a 00       		.byte	0
 4310 020b 00       		.byte	0
 4311 020c 24       		.uleb128 0x24
 4312 020d 05       		.uleb128 0x5
 4313 020e 00       		.byte	0
 4314 020f 49       		.uleb128 0x49
 4315 0210 13       		.uleb128 0x13
 4316 0211 00       		.byte	0
 4317 0212 00       		.byte	0
 4318 0213 25       		.uleb128 0x25
 4319 0214 2E       		.uleb128 0x2e
 4320 0215 00       		.byte	0
 4321 0216 3F       		.uleb128 0x3f
 4322 0217 19       		.uleb128 0x19
 4323 0218 03       		.uleb128 0x3
 4324 0219 0E       		.uleb128 0xe
 4325 021a 3A       		.uleb128 0x3a
 4326 021b 0B       		.uleb128 0xb
 4327 021c 3B       		.uleb128 0x3b
 4328 021d 0B       		.uleb128 0xb
 4329 021e 27       		.uleb128 0x27
 4330 021f 19       		.uleb128 0x19
 4331 0220 3C       		.uleb128 0x3c
 4332 0221 19       		.uleb128 0x19
 4333 0222 00       		.byte	0
 4334 0223 00       		.byte	0
 4335 0224 26       		.uleb128 0x26
 4336 0225 2E       		.uleb128 0x2e
 4337 0226 00       		.byte	0
 4338 0227 3F       		.uleb128 0x3f
 4339 0228 19       		.uleb128 0x19
 4340 0229 03       		.uleb128 0x3
 4341 022a 0E       		.uleb128 0xe
 4342 022b 3A       		.uleb128 0x3a
 4343 022c 0B       		.uleb128 0xb
 4344 022d 3B       		.uleb128 0x3b
 4345 022e 0B       		.uleb128 0xb
 4346 022f 27       		.uleb128 0x27
 4347 0230 19       		.uleb128 0x19
 4348 0231 49       		.uleb128 0x49
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 97


 4349 0232 13       		.uleb128 0x13
 4350 0233 3C       		.uleb128 0x3c
 4351 0234 19       		.uleb128 0x19
 4352 0235 00       		.byte	0
 4353 0236 00       		.byte	0
 4354 0237 27       		.uleb128 0x27
 4355 0238 2E       		.uleb128 0x2e
 4356 0239 01       		.byte	0x1
 4357 023a 3F       		.uleb128 0x3f
 4358 023b 19       		.uleb128 0x19
 4359 023c 03       		.uleb128 0x3
 4360 023d 0E       		.uleb128 0xe
 4361 023e 3A       		.uleb128 0x3a
 4362 023f 0B       		.uleb128 0xb
 4363 0240 3B       		.uleb128 0x3b
 4364 0241 0B       		.uleb128 0xb
 4365 0242 3C       		.uleb128 0x3c
 4366 0243 19       		.uleb128 0x19
 4367 0244 01       		.uleb128 0x1
 4368 0245 13       		.uleb128 0x13
 4369 0246 00       		.byte	0
 4370 0247 00       		.byte	0
 4371 0248 28       		.uleb128 0x28
 4372 0249 18       		.uleb128 0x18
 4373 024a 00       		.byte	0
 4374 024b 00       		.byte	0
 4375 024c 00       		.byte	0
 4376 024d 29       		.uleb128 0x29
 4377 024e 2E       		.uleb128 0x2e
 4378 024f 01       		.byte	0x1
 4379 0250 3F       		.uleb128 0x3f
 4380 0251 19       		.uleb128 0x19
 4381 0252 03       		.uleb128 0x3
 4382 0253 0E       		.uleb128 0xe
 4383 0254 3A       		.uleb128 0x3a
 4384 0255 0B       		.uleb128 0xb
 4385 0256 3B       		.uleb128 0x3b
 4386 0257 0B       		.uleb128 0xb
 4387 0258 27       		.uleb128 0x27
 4388 0259 19       		.uleb128 0x19
 4389 025a 49       		.uleb128 0x49
 4390 025b 13       		.uleb128 0x13
 4391 025c 3C       		.uleb128 0x3c
 4392 025d 19       		.uleb128 0x19
 4393 025e 01       		.uleb128 0x1
 4394 025f 13       		.uleb128 0x13
 4395 0260 00       		.byte	0
 4396 0261 00       		.byte	0
 4397 0262 2A       		.uleb128 0x2a
 4398 0263 2E       		.uleb128 0x2e
 4399 0264 01       		.byte	0x1
 4400 0265 3F       		.uleb128 0x3f
 4401 0266 19       		.uleb128 0x19
 4402 0267 03       		.uleb128 0x3
 4403 0268 0E       		.uleb128 0xe
 4404 0269 3A       		.uleb128 0x3a
 4405 026a 0B       		.uleb128 0xb
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 98


 4406 026b 3B       		.uleb128 0x3b
 4407 026c 0B       		.uleb128 0xb
 4408 026d 49       		.uleb128 0x49
 4409 026e 13       		.uleb128 0x13
 4410 026f 3C       		.uleb128 0x3c
 4411 0270 19       		.uleb128 0x19
 4412 0271 01       		.uleb128 0x1
 4413 0272 13       		.uleb128 0x13
 4414 0273 00       		.byte	0
 4415 0274 00       		.byte	0
 4416 0275 2B       		.uleb128 0x2b
 4417 0276 2E       		.uleb128 0x2e
 4418 0277 01       		.byte	0x1
 4419 0278 3F       		.uleb128 0x3f
 4420 0279 19       		.uleb128 0x19
 4421 027a 03       		.uleb128 0x3
 4422 027b 0E       		.uleb128 0xe
 4423 027c 3A       		.uleb128 0x3a
 4424 027d 0B       		.uleb128 0xb
 4425 027e 3B       		.uleb128 0x3b
 4426 027f 0B       		.uleb128 0xb
 4427 0280 3C       		.uleb128 0x3c
 4428 0281 19       		.uleb128 0x19
 4429 0282 00       		.byte	0
 4430 0283 00       		.byte	0
 4431 0284 00       		.byte	0
 4432              		.section	.debug_loc,"",%progbits
 4433              	.Ldebug_loc0:
 4434              	.LLST0:
 4435 0000 00000000 		.4byte	.LVL0
 4436 0004 02000000 		.4byte	.LVL1
 4437 0008 0100     		.2byte	0x1
 4438 000a 50       		.byte	0x50
 4439 000b 02000000 		.4byte	.LVL1
 4440 000f 04000000 		.4byte	.LVL2
 4441 0013 0400     		.2byte	0x4
 4442 0015 F3       		.byte	0xf3
 4443 0016 01       		.uleb128 0x1
 4444 0017 50       		.byte	0x50
 4445 0018 9F       		.byte	0x9f
 4446 0019 04000000 		.4byte	.LVL2
 4447 001d 0A000000 		.4byte	.LVL3
 4448 0021 0100     		.2byte	0x1
 4449 0023 50       		.byte	0x50
 4450 0024 00000000 		.4byte	0
 4451 0028 00000000 		.4byte	0
 4452              	.LLST1:
 4453 002c 0E000000 		.4byte	.LVL7
 4454 0030 36000000 		.4byte	.LVL8
 4455 0034 0200     		.2byte	0x2
 4456 0036 30       		.byte	0x30
 4457 0037 9F       		.byte	0x9f
 4458 0038 00000000 		.4byte	0
 4459 003c 00000000 		.4byte	0
 4460              	.LLST2:
 4461 0040 0E000000 		.4byte	.LVL20
 4462 0044 10000000 		.4byte	.LVL21
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 99


 4463 0048 0200     		.2byte	0x2
 4464 004a 30       		.byte	0x30
 4465 004b 9F       		.byte	0x9f
 4466 004c 10000000 		.4byte	.LVL21
 4467 0050 54000000 		.4byte	.LVL24
 4468 0054 0100     		.2byte	0x1
 4469 0056 54       		.byte	0x54
 4470 0057 56000000 		.4byte	.LVL25
 4471 005b 5C000000 		.4byte	.LVL26
 4472 005f 0100     		.2byte	0x1
 4473 0061 54       		.byte	0x54
 4474 0062 00000000 		.4byte	0
 4475 0066 00000000 		.4byte	0
 4476              	.LLST3:
 4477 006a D4030000 		.4byte	.LVL122
 4478 006e DC030000 		.4byte	.LVL123
 4479 0072 0B00     		.2byte	0xb
 4480 0074 72       		.byte	0x72
 4481 0075 00       		.sleb128 0
 4482 0076 33       		.byte	0x33
 4483 0077 24       		.byte	0x24
 4484 0078 03       		.byte	0x3
 4485 0079 2C000000 		.4byte	segment_buffer
 4486 007d 22       		.byte	0x22
 4487 007e 9F       		.byte	0x9f
 4488 007f DC030000 		.4byte	.LVL123
 4489 0083 62090000 		.4byte	.LVL281
 4490 0087 0C00     		.2byte	0xc
 4491 0089 91       		.byte	0x91
 4492 008a 54       		.sleb128 -44
 4493 008b 06       		.byte	0x6
 4494 008c 33       		.byte	0x33
 4495 008d 24       		.byte	0x24
 4496 008e 03       		.byte	0x3
 4497 008f 2C000000 		.4byte	segment_buffer
 4498 0093 22       		.byte	0x22
 4499 0094 9F       		.byte	0x9f
 4500 0095 00000000 		.4byte	0
 4501 0099 00000000 		.4byte	0
 4502              	.LLST4:
 4503 009d E0030000 		.4byte	.LVL124
 4504 00a1 12040000 		.4byte	.LVL130
 4505 00a5 0600     		.2byte	0x6
 4506 00a7 9E       		.byte	0x9e
 4507 00a8 04       		.uleb128 0x4
 4508 00a9 3EC32E39 		.4byte	0x392ec33e
 4509 00ad 12040000 		.4byte	.LVL130
 4510 00b1 2C070000 		.4byte	.LVL240
 4511 00b5 0200     		.2byte	0x2
 4512 00b7 91       		.byte	0x91
 4513 00b8 40       		.sleb128 -64
 4514 00b9 2C070000 		.4byte	.LVL240
 4515 00bd 31070000 		.4byte	.LVL241-1
 4516 00c1 0100     		.2byte	0x1
 4517 00c3 50       		.byte	0x50
 4518 00c4 31070000 		.4byte	.LVL241-1
 4519 00c8 62090000 		.4byte	.LVL281
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 100


 4520 00cc 0200     		.2byte	0x2
 4521 00ce 91       		.byte	0x91
 4522 00cf 40       		.sleb128 -64
 4523 00d0 00000000 		.4byte	0
 4524 00d4 00000000 		.4byte	0
 4525              	.LLST5:
 4526 00d8 E0030000 		.4byte	.LVL124
 4527 00dc 12040000 		.4byte	.LVL130
 4528 00e0 0600     		.2byte	0x6
 4529 00e2 9E       		.byte	0x9e
 4530 00e3 04       		.uleb128 0x4
 4531 00e4 00000000 		.4byte	0
 4532 00e8 12040000 		.4byte	.LVL130
 4533 00ec F8060000 		.4byte	.LVL231
 4534 00f0 0300     		.2byte	0x3
 4535 00f2 91       		.byte	0x91
 4536 00f3 BC7F     		.sleb128 -68
 4537 00f5 F8060000 		.4byte	.LVL231
 4538 00f9 FD060000 		.4byte	.LVL232-1
 4539 00fd 0100     		.2byte	0x1
 4540 00ff 50       		.byte	0x50
 4541 0100 FD060000 		.4byte	.LVL232-1
 4542 0104 18080000 		.4byte	.LVL265
 4543 0108 0300     		.2byte	0x3
 4544 010a 91       		.byte	0x91
 4545 010b BC7F     		.sleb128 -68
 4546 010d 18080000 		.4byte	.LVL265
 4547 0111 1A080000 		.4byte	.LVL266
 4548 0115 0100     		.2byte	0x1
 4549 0117 50       		.byte	0x50
 4550 0118 1A080000 		.4byte	.LVL266
 4551 011c 62090000 		.4byte	.LVL281
 4552 0120 0100     		.2byte	0x1
 4553 0122 58       		.byte	0x58
 4554 0123 00000000 		.4byte	0
 4555 0127 00000000 		.4byte	0
 4556              	.LLST6:
 4557 012b E0030000 		.4byte	.LVL124
 4558 012f 12040000 		.4byte	.LVL130
 4559 0133 0600     		.2byte	0x6
 4560 0135 9E       		.byte	0x9e
 4561 0136 04       		.uleb128 0x4
 4562 0137 3EC32E39 		.4byte	0x392ec33e
 4563 013b 12040000 		.4byte	.LVL130
 4564 013f CE040000 		.4byte	.LVL157
 4565 0143 0100     		.2byte	0x1
 4566 0145 5B       		.byte	0x5b
 4567 0146 CE040000 		.4byte	.LVL157
 4568 014a DA040000 		.4byte	.LVL158
 4569 014e 0100     		.2byte	0x1
 4570 0150 50       		.byte	0x50
 4571 0151 DA040000 		.4byte	.LVL158
 4572 0155 92050000 		.4byte	.LVL184
 4573 0159 0100     		.2byte	0x1
 4574 015b 5B       		.byte	0x5b
 4575 015c 92050000 		.4byte	.LVL184
 4576 0160 94050000 		.4byte	.LVL185
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 101


 4577 0164 0100     		.2byte	0x1
 4578 0166 50       		.byte	0x50
 4579 0167 94050000 		.4byte	.LVL185
 4580 016b 10060000 		.4byte	.LVL197
 4581 016f 0100     		.2byte	0x1
 4582 0171 5B       		.byte	0x5b
 4583 0172 10060000 		.4byte	.LVL197
 4584 0176 1C060000 		.4byte	.LVL198
 4585 017a 0100     		.2byte	0x1
 4586 017c 50       		.byte	0x50
 4587 017d 1C060000 		.4byte	.LVL198
 4588 0181 E4060000 		.4byte	.LVL227
 4589 0185 0100     		.2byte	0x1
 4590 0187 5B       		.byte	0x5b
 4591 0188 E4060000 		.4byte	.LVL227
 4592 018c EC060000 		.4byte	.LVL228
 4593 0190 0100     		.2byte	0x1
 4594 0192 50       		.byte	0x50
 4595 0193 EC060000 		.4byte	.LVL228
 4596 0197 0A070000 		.4byte	.LVL234
 4597 019b 0100     		.2byte	0x1
 4598 019d 5B       		.byte	0x5b
 4599 019e 0A070000 		.4byte	.LVL234
 4600 01a2 0C070000 		.4byte	.LVL235
 4601 01a6 0100     		.2byte	0x1
 4602 01a8 50       		.byte	0x50
 4603 01a9 0C070000 		.4byte	.LVL235
 4604 01ad 34070000 		.4byte	.LVL242
 4605 01b1 0100     		.2byte	0x1
 4606 01b3 5B       		.byte	0x5b
 4607 01b4 34070000 		.4byte	.LVL242
 4608 01b8 3A070000 		.4byte	.LVL243
 4609 01bc 0100     		.2byte	0x1
 4610 01be 50       		.byte	0x50
 4611 01bf 3A070000 		.4byte	.LVL243
 4612 01c3 62090000 		.4byte	.LVL281
 4613 01c7 0100     		.2byte	0x1
 4614 01c9 5B       		.byte	0x5b
 4615 01ca 00000000 		.4byte	0
 4616 01ce 00000000 		.4byte	0
 4617              	.LLST7:
 4618 01d2 70040000 		.4byte	.LVL140
 4619 01d6 72040000 		.4byte	.LVL141
 4620 01da 0100     		.2byte	0x1
 4621 01dc 50       		.byte	0x50
 4622 01dd 72040000 		.4byte	.LVL141
 4623 01e1 AA040000 		.4byte	.LVL151
 4624 01e5 0100     		.2byte	0x1
 4625 01e7 55       		.byte	0x55
 4626 01e8 DA040000 		.4byte	.LVL158
 4627 01ec EC040000 		.4byte	.LVL160
 4628 01f0 0100     		.2byte	0x1
 4629 01f2 55       		.byte	0x55
 4630 01f3 F0050000 		.4byte	.LVL192
 4631 01f7 F6050000 		.4byte	.LVL193
 4632 01fb 0100     		.2byte	0x1
 4633 01fd 50       		.byte	0x50
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 102


 4634 01fe F6050000 		.4byte	.LVL193
 4635 0202 1C060000 		.4byte	.LVL198
 4636 0206 0100     		.2byte	0x1
 4637 0208 55       		.byte	0x55
 4638 0209 84060000 		.4byte	.LVL212
 4639 020d 8A060000 		.4byte	.LVL213
 4640 0211 0100     		.2byte	0x1
 4641 0213 50       		.byte	0x50
 4642 0214 8A060000 		.4byte	.LVL213
 4643 0218 A4060000 		.4byte	.LVL217
 4644 021c 0100     		.2byte	0x1
 4645 021e 56       		.byte	0x56
 4646 021f EC060000 		.4byte	.LVL228
 4647 0223 EE060000 		.4byte	.LVL229
 4648 0227 0100     		.2byte	0x1
 4649 0229 55       		.byte	0x55
 4650 022a 00000000 		.4byte	0
 4651 022e 00000000 		.4byte	0
 4652              	.LLST8:
 4653 0232 34040000 		.4byte	.LVL132
 4654 0236 3D040000 		.4byte	.LVL133-1
 4655 023a 0100     		.2byte	0x1
 4656 023c 50       		.byte	0x50
 4657 023d 3D040000 		.4byte	.LVL133-1
 4658 0241 B0040000 		.4byte	.LVL152
 4659 0245 0100     		.2byte	0x1
 4660 0247 58       		.byte	0x58
 4661 0248 DA040000 		.4byte	.LVL158
 4662 024c EC040000 		.4byte	.LVL160
 4663 0250 0100     		.2byte	0x1
 4664 0252 58       		.byte	0x58
 4665 0253 F8040000 		.4byte	.LVL162
 4666 0257 01050000 		.4byte	.LVL163-1
 4667 025b 0100     		.2byte	0x1
 4668 025d 50       		.byte	0x50
 4669 025e 01050000 		.4byte	.LVL163-1
 4670 0262 74050000 		.4byte	.LVL179
 4671 0266 0100     		.2byte	0x1
 4672 0268 58       		.byte	0x58
 4673 0269 B8050000 		.4byte	.LVL187
 4674 026d D8050000 		.4byte	.LVL189
 4675 0271 0100     		.2byte	0x1
 4676 0273 58       		.byte	0x58
 4677 0274 28060000 		.4byte	.LVL200
 4678 0278 30060000 		.4byte	.LVL201
 4679 027c 0100     		.2byte	0x1
 4680 027e 50       		.byte	0x50
 4681 027f 30060000 		.4byte	.LVL201
 4682 0283 A6060000 		.4byte	.LVL218
 4683 0287 0100     		.2byte	0x1
 4684 0289 55       		.byte	0x55
 4685 028a 00000000 		.4byte	0
 4686 028e 00000000 		.4byte	0
 4687              	.LLST9:
 4688 0292 EA030000 		.4byte	.LVL125
 4689 0296 F3030000 		.4byte	.LVL126-1
 4690 029a 0100     		.2byte	0x1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 103


 4691 029c 52       		.byte	0x52
 4692 029d F3030000 		.4byte	.LVL126-1
 4693 02a1 12040000 		.4byte	.LVL130
 4694 02a5 0200     		.2byte	0x2
 4695 02a7 91       		.byte	0x91
 4696 02a8 50       		.sleb128 -48
 4697 02a9 12040000 		.4byte	.LVL130
 4698 02ad 7A040000 		.4byte	.LVL143
 4699 02b1 0100     		.2byte	0x1
 4700 02b3 59       		.byte	0x59
 4701 02b4 7A040000 		.4byte	.LVL143
 4702 02b8 80040000 		.4byte	.LVL144
 4703 02bc 0100     		.2byte	0x1
 4704 02be 50       		.byte	0x50
 4705 02bf 80040000 		.4byte	.LVL144
 4706 02c3 92040000 		.4byte	.LVL147
 4707 02c7 0100     		.2byte	0x1
 4708 02c9 57       		.byte	0x57
 4709 02ca 92040000 		.4byte	.LVL147
 4710 02ce DA040000 		.4byte	.LVL158
 4711 02d2 0100     		.2byte	0x1
 4712 02d4 59       		.byte	0x59
 4713 02d5 DA040000 		.4byte	.LVL158
 4714 02d9 EC040000 		.4byte	.LVL160
 4715 02dd 0100     		.2byte	0x1
 4716 02df 57       		.byte	0x57
 4717 02e0 EC040000 		.4byte	.LVL160
 4718 02e4 46050000 		.4byte	.LVL172
 4719 02e8 0100     		.2byte	0x1
 4720 02ea 59       		.byte	0x59
 4721 02eb 46050000 		.4byte	.LVL172
 4722 02ef 4C050000 		.4byte	.LVL173
 4723 02f3 0100     		.2byte	0x1
 4724 02f5 50       		.byte	0x50
 4725 02f6 4C050000 		.4byte	.LVL173
 4726 02fa 54050000 		.4byte	.LVL175
 4727 02fe 0100     		.2byte	0x1
 4728 0300 59       		.byte	0x59
 4729 0301 54050000 		.4byte	.LVL175
 4730 0305 B8050000 		.4byte	.LVL187
 4731 0309 0100     		.2byte	0x1
 4732 030b 57       		.byte	0x57
 4733 030c B8050000 		.4byte	.LVL187
 4734 0310 10060000 		.4byte	.LVL197
 4735 0314 0100     		.2byte	0x1
 4736 0316 59       		.byte	0x59
 4737 0317 10060000 		.4byte	.LVL197
 4738 031b 1C060000 		.4byte	.LVL198
 4739 031f 0100     		.2byte	0x1
 4740 0321 54       		.byte	0x54
 4741 0322 1C060000 		.4byte	.LVL198
 4742 0326 92060000 		.4byte	.LVL215
 4743 032a 0100     		.2byte	0x1
 4744 032c 59       		.byte	0x59
 4745 032d 92060000 		.4byte	.LVL215
 4746 0331 A4060000 		.4byte	.LVL217
 4747 0335 0100     		.2byte	0x1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 104


 4748 0337 56       		.byte	0x56
 4749 0338 A4060000 		.4byte	.LVL217
 4750 033c C6060000 		.4byte	.LVL222
 4751 0340 0100     		.2byte	0x1
 4752 0342 59       		.byte	0x59
 4753 0343 E4060000 		.4byte	.LVL227
 4754 0347 EC060000 		.4byte	.LVL228
 4755 034b 0100     		.2byte	0x1
 4756 034d 58       		.byte	0x58
 4757 034e EC060000 		.4byte	.LVL228
 4758 0352 62090000 		.4byte	.LVL281
 4759 0356 0100     		.2byte	0x1
 4760 0358 59       		.byte	0x59
 4761 0359 00000000 		.4byte	0
 4762 035d 00000000 		.4byte	0
 4763              	.LLST10:
 4764 0361 F6030000 		.4byte	.LVL127
 4765 0365 FB030000 		.4byte	.LVL128-1
 4766 0369 0100     		.2byte	0x1
 4767 036b 50       		.byte	0x50
 4768 036c FB030000 		.4byte	.LVL128-1
 4769 0370 02040000 		.4byte	.LVL129
 4770 0374 0200     		.2byte	0x2
 4771 0376 91       		.byte	0x91
 4772 0377 44       		.sleb128 -60
 4773 0378 12040000 		.4byte	.LVL130
 4774 037c 62090000 		.4byte	.LVL281
 4775 0380 0200     		.2byte	0x2
 4776 0382 91       		.byte	0x91
 4777 0383 44       		.sleb128 -60
 4778 0384 00000000 		.4byte	0
 4779 0388 00000000 		.4byte	0
 4780              	.LLST11:
 4781 038c C4070000 		.4byte	.LVL252
 4782 0390 C7070000 		.4byte	.LVL253-1
 4783 0394 0100     		.2byte	0x1
 4784 0396 50       		.byte	0x50
 4785 0397 C7070000 		.4byte	.LVL253-1
 4786 039b 62090000 		.4byte	.LVL281
 4787 039f 0100     		.2byte	0x1
 4788 03a1 55       		.byte	0x55
 4789 03a2 00000000 		.4byte	0
 4790 03a6 00000000 		.4byte	0
 4791              	.LLST12:
 4792 03aa D2070000 		.4byte	.LVL256
 4793 03ae D6070000 		.4byte	.LVL257
 4794 03b2 0100     		.2byte	0x1
 4795 03b4 50       		.byte	0x50
 4796 03b5 D6070000 		.4byte	.LVL257
 4797 03b9 62090000 		.4byte	.LVL281
 4798 03bd 0100     		.2byte	0x1
 4799 03bf 54       		.byte	0x54
 4800 03c0 00000000 		.4byte	0
 4801 03c4 00000000 		.4byte	0
 4802              	.LLST13:
 4803 03c8 E4070000 		.4byte	.LVL261
 4804 03cc E9070000 		.4byte	.LVL262-1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 105


 4805 03d0 0100     		.2byte	0x1
 4806 03d2 50       		.byte	0x50
 4807 03d3 E9070000 		.4byte	.LVL262-1
 4808 03d7 2A080000 		.4byte	.LVL269
 4809 03db 0100     		.2byte	0x1
 4810 03dd 56       		.byte	0x56
 4811 03de 00000000 		.4byte	0
 4812 03e2 00000000 		.4byte	0
 4813              	.LLST14:
 4814 03e6 2A080000 		.4byte	.LVL269
 4815 03ea 2F080000 		.4byte	.LVL270-1
 4816 03ee 0100     		.2byte	0x1
 4817 03f0 50       		.byte	0x50
 4818 03f1 2F080000 		.4byte	.LVL270-1
 4819 03f5 62090000 		.4byte	.LVL281
 4820 03f9 0100     		.2byte	0x1
 4821 03fb 56       		.byte	0x56
 4822 03fc 00000000 		.4byte	0
 4823 0400 00000000 		.4byte	0
 4824              	.LLST15:
 4825 0404 3C080000 		.4byte	.LVL273
 4826 0408 0E090000 		.4byte	.LVL275
 4827 040c 0100     		.2byte	0x1
 4828 040e 50       		.byte	0x50
 4829 040f 00000000 		.4byte	0
 4830 0413 00000000 		.4byte	0
 4831              	.LLST16:
 4832 0417 5C010000 		.4byte	.LVL51
 4833 041b 74010000 		.4byte	.LVL52
 4834 041f 0100     		.2byte	0x1
 4835 0421 50       		.byte	0x50
 4836 0422 74010000 		.4byte	.LVL52
 4837 0426 84010000 		.4byte	.LVL55
 4838 042a 0100     		.2byte	0x1
 4839 042c 55       		.byte	0x55
 4840 042d CA010000 		.4byte	.LVL63
 4841 0431 E9010000 		.4byte	.LVL66-1
 4842 0435 0100     		.2byte	0x1
 4843 0437 50       		.byte	0x50
 4844 0438 E9010000 		.4byte	.LVL66-1
 4845 043c 7A020000 		.4byte	.LVL89
 4846 0440 0100     		.2byte	0x1
 4847 0442 55       		.byte	0x55
 4848 0443 B2020000 		.4byte	.LVL96
 4849 0447 58030000 		.4byte	.LVL110
 4850 044b 0100     		.2byte	0x1
 4851 044d 55       		.byte	0x55
 4852 044e A8030000 		.4byte	.LVL120
 4853 0452 C2030000 		.4byte	.LVL121
 4854 0456 0100     		.2byte	0x1
 4855 0458 55       		.byte	0x55
 4856 0459 00000000 		.4byte	0
 4857 045d 00000000 		.4byte	0
 4858              	.LLST17:
 4859 0461 7C000000 		.4byte	.LVL37
 4860 0465 80000000 		.4byte	.LVL38
 4861 0469 0200     		.2byte	0x2
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 106


 4862 046b 30       		.byte	0x30
 4863 046c 9F       		.byte	0x9f
 4864 046d 80000000 		.4byte	.LVL38
 4865 0471 8C000000 		.4byte	.LVL39
 4866 0475 0100     		.2byte	0x1
 4867 0477 53       		.byte	0x53
 4868 0478 8E000000 		.4byte	.LVL40
 4869 047c 94000000 		.4byte	.LVL41
 4870 0480 0100     		.2byte	0x1
 4871 0482 53       		.byte	0x53
 4872 0483 00000000 		.4byte	0
 4873 0487 00000000 		.4byte	0
 4874              	.LLST18:
 4875 048b 84010000 		.4byte	.LVL55
 4876 048f 89010000 		.4byte	.LVL56-1
 4877 0493 0100     		.2byte	0x1
 4878 0495 50       		.byte	0x50
 4879 0496 89010000 		.4byte	.LVL56-1
 4880 049a CA010000 		.4byte	.LVL63
 4881 049e 0100     		.2byte	0x1
 4882 04a0 55       		.byte	0x55
 4883 04a1 00000000 		.4byte	0
 4884 04a5 00000000 		.4byte	0
 4885              	.LLST19:
 4886 04a9 DE010000 		.4byte	.LVL64
 4887 04ad E6010000 		.4byte	.LVL65
 4888 04b1 0600     		.2byte	0x6
 4889 04b3 9E       		.byte	0x9e
 4890 04b4 04       		.uleb128 0x4
 4891 04b5 00000000 		.4byte	0
 4892 04b9 EC010000 		.4byte	.LVL67
 4893 04bd F1010000 		.4byte	.LVL68-1
 4894 04c1 0100     		.2byte	0x1
 4895 04c3 50       		.byte	0x50
 4896 04c4 F1010000 		.4byte	.LVL68-1
 4897 04c8 72020000 		.4byte	.LVL88
 4898 04cc 0100     		.2byte	0x1
 4899 04ce 54       		.byte	0x54
 4900 04cf B2020000 		.4byte	.LVL96
 4901 04d3 22030000 		.4byte	.LVL104
 4902 04d7 0100     		.2byte	0x1
 4903 04d9 54       		.byte	0x54
 4904 04da 56030000 		.4byte	.LVL109
 4905 04de C2030000 		.4byte	.LVL121
 4906 04e2 0100     		.2byte	0x1
 4907 04e4 54       		.byte	0x54
 4908 04e5 00000000 		.4byte	0
 4909 04e9 00000000 		.4byte	0
 4910              	.LLST20:
 4911 04ed 0C020000 		.4byte	.LVL73
 4912 04f1 11020000 		.4byte	.LVL74-1
 4913 04f5 0100     		.2byte	0x1
 4914 04f7 50       		.byte	0x50
 4915 04f8 11020000 		.4byte	.LVL74-1
 4916 04fc C2030000 		.4byte	.LVL121
 4917 0500 0100     		.2byte	0x1
 4918 0502 5A       		.byte	0x5a
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 107


 4919 0503 00000000 		.4byte	0
 4920 0507 00000000 		.4byte	0
 4921              	.LLST21:
 4922 050b 14020000 		.4byte	.LVL75
 4923 050f 22020000 		.4byte	.LVL76
 4924 0513 0100     		.2byte	0x1
 4925 0515 50       		.byte	0x50
 4926 0516 22020000 		.4byte	.LVL76
 4927 051a 72030000 		.4byte	.LVL113
 4928 051e 0100     		.2byte	0x1
 4929 0520 57       		.byte	0x57
 4930 0521 A8030000 		.4byte	.LVL120
 4931 0525 C2030000 		.4byte	.LVL121
 4932 0529 0100     		.2byte	0x1
 4933 052b 57       		.byte	0x57
 4934 052c 00000000 		.4byte	0
 4935 0530 00000000 		.4byte	0
 4936              	.LLST22:
 4937 0534 40020000 		.4byte	.LVL81
 4938 0538 42020000 		.4byte	.LVL82
 4939 053c 0100     		.2byte	0x1
 4940 053e 50       		.byte	0x50
 4941 053f 42020000 		.4byte	.LVL82
 4942 0543 C2030000 		.4byte	.LVL121
 4943 0547 0100     		.2byte	0x1
 4944 0549 59       		.byte	0x59
 4945 054a 00000000 		.4byte	0
 4946 054e 00000000 		.4byte	0
 4947              	.LLST23:
 4948 0552 68070000 		.4byte	.LVL245
 4949 0556 90070000 		.4byte	.LVL250
 4950 055a 0100     		.2byte	0x1
 4951 055c 54       		.byte	0x54
 4952 055d 00000000 		.4byte	0
 4953 0561 00000000 		.4byte	0
 4954              		.section	.debug_aranges,"",%progbits
 4955 0000 64000000 		.4byte	0x64
 4956 0004 0200     		.2byte	0x2
 4957 0006 00000000 		.4byte	.Ldebug_info0
 4958 000a 04       		.byte	0x4
 4959 000b 00       		.byte	0
 4960 000c 0000     		.2byte	0
 4961 000e 0000     		.2byte	0
 4962 0010 00000000 		.4byte	.LFB70
 4963 0014 0C000000 		.4byte	.LFE70-.LFB70
 4964 0018 00000000 		.4byte	.LFB63
 4965 001c 34000000 		.4byte	.LFE63-.LFB63
 4966 0020 00000000 		.4byte	.LFB64
 4967 0024 50000000 		.4byte	.LFE64-.LFB64
 4968 0028 00000000 		.4byte	.LFB65
 4969 002c E0010000 		.4byte	.LFE65-.LFB65
 4970 0030 00000000 		.4byte	.LFB66
 4971 0034 64000000 		.4byte	.LFE66-.LFB66
 4972 0038 00000000 		.4byte	.LFB67
 4973 003c A8000000 		.4byte	.LFE67-.LFB67
 4974 0040 00000000 		.4byte	.LFB68
 4975 0044 14000000 		.4byte	.LFE68-.LFB68
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 108


 4976 0048 00000000 		.4byte	.LFB69
 4977 004c 30000000 		.4byte	.LFE69-.LFB69
 4978 0050 00000000 		.4byte	.LFB71
 4979 0054 88090000 		.4byte	.LFE71-.LFB71
 4980 0058 00000000 		.4byte	.LFB72
 4981 005c 20000000 		.4byte	.LFE72-.LFB72
 4982 0060 00000000 		.4byte	0
 4983 0064 00000000 		.4byte	0
 4984              		.section	.debug_ranges,"",%progbits
 4985              	.Ldebug_ranges0:
 4986 0000 00000000 		.4byte	.LFB70
 4987 0004 0C000000 		.4byte	.LFE70
 4988 0008 00000000 		.4byte	.LFB63
 4989 000c 34000000 		.4byte	.LFE63
 4990 0010 00000000 		.4byte	.LFB64
 4991 0014 50000000 		.4byte	.LFE64
 4992 0018 00000000 		.4byte	.LFB65
 4993 001c E0010000 		.4byte	.LFE65
 4994 0020 00000000 		.4byte	.LFB66
 4995 0024 64000000 		.4byte	.LFE66
 4996 0028 00000000 		.4byte	.LFB67
 4997 002c A8000000 		.4byte	.LFE67
 4998 0030 00000000 		.4byte	.LFB68
 4999 0034 14000000 		.4byte	.LFE68
 5000 0038 00000000 		.4byte	.LFB69
 5001 003c 30000000 		.4byte	.LFE69
 5002 0040 00000000 		.4byte	.LFB71
 5003 0044 88090000 		.4byte	.LFE71
 5004 0048 00000000 		.4byte	.LFB72
 5005 004c 20000000 		.4byte	.LFE72
 5006 0050 00000000 		.4byte	0
 5007 0054 00000000 		.4byte	0
 5008              		.section	.debug_line,"",%progbits
 5009              	.Ldebug_line0:
 5010 0000 B9040000 		.section	.debug_str,"MS",%progbits,1
 5010      02003102 
 5010      00000201 
 5010      FB0E0D00 
 5010      01010101 
 5011              	.LASF30:
 5012 0000 70756C73 		.ascii	"pulse_microseconds\000"
 5012      655F6D69 
 5012      63726F73 
 5012      65636F6E 
 5012      647300
 5013              	.LASF92:
 5014 0013 72656361 		.ascii	"recalculate_flag\000"
 5014      6C63756C 
 5014      6174655F 
 5014      666C6167 
 5014      00
 5015              	.LASF118:
 5016 0024 74696D65 		.ascii	"time_var\000"
 5016      5F766172 
 5016      00
 5017              	.LASF158:
 5018 002d 43794465 		.ascii	"CyDelay\000"
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 109


 5018      6C617900 
 5019              	.LASF133:
 5020 0035 73745F62 		.ascii	"st_block_buffer\000"
 5020      6C6F636B 
 5020      5F627566 
 5020      66657200 
 5021              	.LASF68:
 5022 0045 6D61785F 		.ascii	"max_junction_speed_sqr\000"
 5022      6A756E63 
 5022      74696F6E 
 5022      5F737065 
 5022      65645F73 
 5023              	.LASF99:
 5024 005c 63757272 		.ascii	"current_speed\000"
 5024      656E745F 
 5024      73706565 
 5024      6400
 5025              	.LASF39:
 5026 006a 666C6167 		.ascii	"flags\000"
 5026      7300
 5027              	.LASF71:
 5028 0070 706C616E 		.ascii	"plan_block_t\000"
 5028      5F626C6F 
 5028      636B5F74 
 5028      00
 5029              	.LASF34:
 5030 007d 73746174 		.ascii	"status_report_mask\000"
 5030      75735F72 
 5030      65706F72 
 5030      745F6D61 
 5030      736B00
 5031              	.LASF13:
 5032 0090 756E7369 		.ascii	"unsigned int\000"
 5032      676E6564 
 5032      20696E74 
 5032      00
 5033              	.LASF54:
 5034 009d 725F6F76 		.ascii	"r_override\000"
 5034      65727269 
 5034      646500
 5035              	.LASF136:
 5036 00a8 7365676D 		.ascii	"segment_buffer_head\000"
 5036      656E745F 
 5036      62756666 
 5036      65725F68 
 5036      65616400 
 5037              	.LASF143:
 5038 00bc 70726570 		.ascii	"prep\000"
 5038      00
 5039              	.LASF142:
 5040 00c1 73745F70 		.ascii	"st_prep_block\000"
 5040      7265705F 
 5040      626C6F63 
 5040      6B00
 5041              	.LASF155:
 5042 00cf 53746570 		.ascii	"Stepper_Timer_Start\000"
 5042      7065725F 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 110


 5042      54696D65 
 5042      725F5374 
 5042      61727400 
 5043              	.LASF7:
 5044 00e3 5F5F696E 		.ascii	"__int32_t\000"
 5044      7433325F 
 5044      7400
 5045              	.LASF182:
 5046 00ed 53746570 		.ascii	"Stepper_Timer_ReadStatusRegister\000"
 5046      7065725F 
 5046      54696D65 
 5046      725F5265 
 5046      61645374 
 5047              	.LASF148:
 5048 010e 7379735F 		.ascii	"sys_probe_state\000"
 5048      70726F62 
 5048      655F7374 
 5048      61746500 
 5049              	.LASF96:
 5050 011e 7265715F 		.ascii	"req_mm_increment\000"
 5050      6D6D5F69 
 5050      6E637265 
 5050      6D656E74 
 5050      00
 5051              	.LASF74:
 5052 012f 6E5F7374 		.ascii	"n_step\000"
 5052      657000
 5053              	.LASF33:
 5054 0136 73746570 		.ascii	"stepper_idle_lock_time\000"
 5054      7065725F 
 5054      69646C65 
 5054      5F6C6F63 
 5054      6B5F7469 
 5055              	.LASF70:
 5056 014d 70726F67 		.ascii	"programmed_rate\000"
 5056      72616D6D 
 5056      65645F72 
 5056      61746500 
 5057              	.LASF36:
 5058 015d 6172635F 		.ascii	"arc_tolerance\000"
 5058      746F6C65 
 5058      72616E63 
 5058      6500
 5059              	.LASF117:
 5060 016b 64745F6D 		.ascii	"dt_max\000"
 5060      617800
 5061              	.LASF140:
 5062 0172 62757379 		.ascii	"busy\000"
 5062      00
 5063              	.LASF63:
 5064 0177 64697265 		.ascii	"direction_bits\000"
 5064      6374696F 
 5064      6E5F6269 
 5064      747300
 5065              	.LASF28:
 5066 0186 61636365 		.ascii	"acceleration\000"
 5066      6C657261 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 111


 5066      74696F6E 
 5066      00
 5067              	.LASF42:
 5068 0193 686F6D69 		.ascii	"homing_seek_rate\000"
 5068      6E675F73 
 5068      65656B5F 
 5068      72617465 
 5068      00
 5069              	.LASF104:
 5070 01a4 696E765F 		.ascii	"inv_rate\000"
 5070      72617465 
 5070      00
 5071              	.LASF17:
 5072 01ad 75696E74 		.ascii	"uint32_t\000"
 5072      33325F74 
 5072      00
 5073              	.LASF41:
 5074 01b6 686F6D69 		.ascii	"homing_feed_rate\000"
 5074      6E675F66 
 5074      6565645F 
 5074      72617465 
 5074      00
 5075              	.LASF65:
 5076 01c7 656E7472 		.ascii	"entry_speed_sqr\000"
 5076      795F7370 
 5076      6565645F 
 5076      73717200 
 5077              	.LASF61:
 5078 01d7 73746570 		.ascii	"steps\000"
 5078      7300
 5079              	.LASF0:
 5080 01dd 666C6F61 		.ascii	"float\000"
 5080      7400
 5081              	.LASF85:
 5082 01e3 73746570 		.ascii	"step_outbits\000"
 5082      5F6F7574 
 5082      62697473 
 5082      00
 5083              	.LASF168:
 5084 01f0 73717274 		.ascii	"sqrt\000"
 5084      00
 5085              	.LASF105:
 5086 01f5 63757272 		.ascii	"current_spindle_pwm\000"
 5086      656E745F 
 5086      7370696E 
 5086      646C655F 
 5086      70776D00 
 5087              	.LASF161:
 5088 0209 53746570 		.ascii	"Stepper_Timer_WritePeriod\000"
 5088      7065725F 
 5088      54696D65 
 5088      725F5772 
 5088      69746550 
 5089              	.LASF108:
 5090 0223 73745F67 		.ascii	"st_go_idle\000"
 5090      6F5F6964 
 5090      6C6500
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 112


 5091              	.LASF12:
 5092 022e 6C6F6E67 		.ascii	"long long unsigned int\000"
 5092      206C6F6E 
 5092      6720756E 
 5092      7369676E 
 5092      65642069 
 5093              	.LASF53:
 5094 0245 665F6F76 		.ascii	"f_override\000"
 5094      65727269 
 5094      646500
 5095              	.LASF84:
 5096 0250 73746570 		.ascii	"step_pulse_time\000"
 5096      5F70756C 
 5096      73655F74 
 5096      696D6500 
 5097              	.LASF5:
 5098 0260 5F5F7569 		.ascii	"__uint16_t\000"
 5098      6E743136 
 5098      5F7400
 5099              	.LASF106:
 5100 026b 73745F70 		.ascii	"st_prep_t\000"
 5100      7265705F 
 5100      7400
 5101              	.LASF137:
 5102 0275 7365676D 		.ascii	"segment_next_head\000"
 5102      656E745F 
 5102      6E657874 
 5102      5F686561 
 5102      6400
 5103              	.LASF101:
 5104 0287 65786974 		.ascii	"exit_speed\000"
 5104      5F737065 
 5104      656400
 5105              	.LASF56:
 5106 0292 7370696E 		.ascii	"spindle_stop_ovr\000"
 5106      646C655F 
 5106      73746F70 
 5106      5F6F7672 
 5106      00
 5107              	.LASF129:
 5108 02a3 65786974 		.ascii	"exit_speed_sqr\000"
 5108      5F737065 
 5108      65645F73 
 5108      717200
 5109              	.LASF102:
 5110 02b2 61636365 		.ascii	"accelerate_until\000"
 5110      6C657261 
 5110      74655F75 
 5110      6E74696C 
 5110      00
 5111              	.LASF178:
 5112 02c3 73745F6E 		.ascii	"st_next_block_index\000"
 5112      6578745F 
 5112      626C6F63 
 5112      6B5F696E 
 5112      64657800 
 5113              	.LASF47:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 113


 5114 02d7 61626F72 		.ascii	"abort\000"
 5114      7400
 5115              	.LASF66:
 5116 02dd 6D61785F 		.ascii	"max_entry_speed_sqr\000"
 5116      656E7472 
 5116      795F7370 
 5116      6565645F 
 5116      73717200 
 5117              	.LASF44:
 5118 02f1 686F6D69 		.ascii	"homing_pulloff\000"
 5118      6E675F70 
 5118      756C6C6F 
 5118      666600
 5119              	.LASF113:
 5120 0300 73745F72 		.ascii	"st_reset\000"
 5120      65736574 
 5120      00
 5121              	.LASF154:
 5122 0309 65786563 		.ascii	"exec_lcd_status\000"
 5122      5F6C6364 
 5122      5F737461 
 5122      74757300 
 5123              	.LASF48:
 5124 0319 73757370 		.ascii	"suspend\000"
 5124      656E6400 
 5125              	.LASF109:
 5126 0321 5F426F6F 		.ascii	"_Bool\000"
 5126      6C00
 5127              	.LASF149:
 5128 0327 7379735F 		.ascii	"sys_rt_exec_state\000"
 5128      72745F65 
 5128      7865635F 
 5128      73746174 
 5128      6500
 5129              	.LASF95:
 5130 0339 73746570 		.ascii	"step_per_mm\000"
 5130      5F706572 
 5130      5F6D6D00 
 5131              	.LASF111:
 5132 0345 73745F67 		.ascii	"st_generate_step_dir_invert_masks\000"
 5132      656E6572 
 5132      6174655F 
 5132      73746570 
 5132      5F646972 
 5133              	.LASF90:
 5134 0367 65786563 		.ascii	"exec_segment\000"
 5134      5F736567 
 5134      6D656E74 
 5134      00
 5135              	.LASF120:
 5136 0374 73706565 		.ascii	"speed_var\000"
 5136      645F7661 
 5136      7200
 5137              	.LASF183:
 5138 037e 70726F62 		.ascii	"probe_state_monitor\000"
 5138      655F7374 
 5138      6174655F 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 114


 5138      6D6F6E69 
 5138      746F7200 
 5139              	.LASF153:
 5140 0392 7379735F 		.ascii	"sys_rt_exec_debug\000"
 5140      72745F65 
 5140      7865635F 
 5140      64656275 
 5140      6700
 5141              	.LASF177:
 5142 03a4 433A5C55 		.ascii	"C:\\Users\\Bart\\Dropbox\\PSoC\\PSoC_Grbl\\PSoC_Grb"
 5142      73657273 
 5142      5C426172 
 5142      745C4472 
 5142      6F70626F 
 5143 03d1 6C2E6379 		.ascii	"l.cydsn\000"
 5143      64736E00 
 5144              	.LASF145:
 5145 03d9 73657474 		.ascii	"settings\000"
 5145      696E6773 
 5145      00
 5146              	.LASF29:
 5147 03e2 6D61785F 		.ascii	"max_travel\000"
 5147      74726176 
 5147      656C00
 5148              	.LASF88:
 5149 03ed 65786563 		.ascii	"exec_block_index\000"
 5149      5F626C6F 
 5149      636B5F69 
 5149      6E646578 
 5149      00
 5150              	.LASF22:
 5151 03fe 63686172 		.ascii	"char\000"
 5151      00
 5152              	.LASF37:
 5153 0403 72706D5F 		.ascii	"rpm_max\000"
 5153      6D617800 
 5154              	.LASF180:
 5155 040b 73745F75 		.ascii	"st_update_plan_block_parameters\000"
 5155      70646174 
 5155      655F706C 
 5155      616E5F62 
 5155      6C6F636B 
 5156              	.LASF59:
 5157 042b 7370696E 		.ascii	"spindle_speed\000"
 5157      646C655F 
 5157      73706565 
 5157      6400
 5158              	.LASF62:
 5159 0439 73746570 		.ascii	"step_event_count\000"
 5159      5F657665 
 5159      6E745F63 
 5159      6F756E74 
 5159      00
 5160              	.LASF57:
 5161 044a 7265706F 		.ascii	"report_ovr_counter\000"
 5161      72745F6F 
 5161      76725F63 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 115


 5161      6F756E74 
 5161      657200
 5162              	.LASF19:
 5163 045d 75696E74 		.ascii	"uint16\000"
 5163      313600
 5164              	.LASF128:
 5165 0464 64656365 		.ascii	"decel_dist\000"
 5165      6C5F6469 
 5165      737400
 5166              	.LASF55:
 5167 046f 7370696E 		.ascii	"spindle_speed_ovr\000"
 5167      646C655F 
 5167      73706565 
 5167      645F6F76 
 5167      7200
 5168              	.LASF72:
 5169 0481 69735F70 		.ascii	"is_pwm_rate_adjusted\000"
 5169      776D5F72 
 5169      6174655F 
 5169      61646A75 
 5169      73746564 
 5170              	.LASF14:
 5171 0496 75696E74 		.ascii	"uint8_t\000"
 5171      385F7400 
 5172              	.LASF77:
 5173 049e 616D6173 		.ascii	"amass_level\000"
 5173      735F6C65 
 5173      76656C00 
 5174              	.LASF166:
 5175 04aa 436C6F63 		.ascii	"Clock_Step_Pulse_Start\000"
 5175      6B5F5374 
 5175      65705F50 
 5175      756C7365 
 5175      5F537461 
 5176              	.LASF83:
 5177 04c1 65786563 		.ascii	"execute_step\000"
 5177      7574655F 
 5177      73746570 
 5177      00
 5178              	.LASF170:
 5179 04ce 706C616E 		.ascii	"plan_compute_profile_nominal_speed\000"
 5179      5F636F6D 
 5179      70757465 
 5179      5F70726F 
 5179      66696C65 
 5180              	.LASF163:
 5181 04f1 73797374 		.ascii	"system_set_exec_state_flag\000"
 5181      656D5F73 
 5181      65745F65 
 5181      7865635F 
 5181      73746174 
 5182              	.LASF11:
 5183 050c 6C6F6E67 		.ascii	"long long int\000"
 5183      206C6F6E 
 5183      6720696E 
 5183      7400
 5184              	.LASF147:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 116


 5185 051a 7379735F 		.ascii	"sys_probe_position\000"
 5185      70726F62 
 5185      655F706F 
 5185      73697469 
 5185      6F6E00
 5186              	.LASF73:
 5187 052d 73745F62 		.ascii	"st_block_t\000"
 5187      6C6F636B 
 5187      5F7400
 5188              	.LASF26:
 5189 0538 73746570 		.ascii	"steps_per_mm\000"
 5189      735F7065 
 5189      725F6D6D 
 5189      00
 5190              	.LASF164:
 5191 0545 6765745F 		.ascii	"get_step_pin_mask\000"
 5191      73746570 
 5191      5F70696E 
 5191      5F6D6173 
 5191      6B00
 5192              	.LASF135:
 5193 0557 7365676D 		.ascii	"segment_buffer_tail\000"
 5193      656E745F 
 5193      62756666 
 5193      65725F74 
 5193      61696C00 
 5194              	.LASF130:
 5195 056b 6E6F6D69 		.ascii	"nominal_speed\000"
 5195      6E616C5F 
 5195      73706565 
 5195      6400
 5196              	.LASF23:
 5197 0579 63796973 		.ascii	"cyisraddress\000"
 5197      72616464 
 5197      72657373 
 5197      00
 5198              	.LASF20:
 5199 0586 75696E74 		.ascii	"uint32\000"
 5199      333200
 5200              	.LASF110:
 5201 058d 73746570 		.ascii	"stepper_timer_isr\000"
 5201      7065725F 
 5201      74696D65 
 5201      725F6973 
 5201      7200
 5202              	.LASF160:
 5203 059f 436F6E74 		.ascii	"Control_Reg_Step_Write\000"
 5203      726F6C5F 
 5203      5265675F 
 5203      53746570 
 5203      5F577269 
 5204              	.LASF146:
 5205 05b6 7379735F 		.ascii	"sys_position\000"
 5205      706F7369 
 5205      74696F6E 
 5205      00
 5206              	.LASF119:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 117


 5207 05c3 6D6D5F76 		.ascii	"mm_var\000"
 5207      617200
 5208              	.LASF31:
 5209 05ca 73746570 		.ascii	"step_invert_mask\000"
 5209      5F696E76 
 5209      6572745F 
 5209      6D61736B 
 5209      00
 5210              	.LASF124:
 5211 05db 6E5F7374 		.ascii	"n_steps_remaining\000"
 5211      6570735F 
 5211      72656D61 
 5211      696E696E 
 5211      6700
 5212              	.LASF25:
 5213 05ed 6C6F6E67 		.ascii	"long double\000"
 5213      20646F75 
 5213      626C6500 
 5214              	.LASF125:
 5215 05f9 6C617374 		.ascii	"last_n_steps_remaining\000"
 5215      5F6E5F73 
 5215      74657073 
 5215      5F72656D 
 5215      61696E69 
 5216              	.LASF184:
 5217 0610 706C616E 		.ascii	"plan_discard_current_block\000"
 5217      5F646973 
 5217      63617264 
 5217      5F637572 
 5217      72656E74 
 5218              	.LASF15:
 5219 062b 75696E74 		.ascii	"uint16_t\000"
 5219      31365F74 
 5219      00
 5220              	.LASF27:
 5221 0634 6D61785F 		.ascii	"max_rate\000"
 5221      72617465 
 5221      00
 5222              	.LASF151:
 5223 063d 7379735F 		.ascii	"sys_rt_exec_motion_override\000"
 5223      72745F65 
 5223      7865635F 
 5223      6D6F7469 
 5223      6F6E5F6F 
 5224              	.LASF162:
 5225 0659 7370696E 		.ascii	"spindle_set_speed\000"
 5225      646C655F 
 5225      7365745F 
 5225      73706565 
 5225      6400
 5226              	.LASF181:
 5227 066b 73745F67 		.ascii	"st_get_realtime_rate\000"
 5227      65745F72 
 5227      65616C74 
 5227      696D655F 
 5227      72617465 
 5228              	.LASF50:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 118


 5229 0680 73746570 		.ascii	"step_control\000"
 5229      5F636F6E 
 5229      74726F6C 
 5229      00
 5230              	.LASF78:
 5231 068d 7370696E 		.ascii	"spindle_pwm\000"
 5231      646C655F 
 5231      70776D00 
 5232              	.LASF114:
 5233 0699 73746570 		.ascii	"stepper_init\000"
 5233      7065725F 
 5233      696E6974 
 5233      00
 5234              	.LASF179:
 5235 06a6 626C6F63 		.ascii	"block_index\000"
 5235      6B5F696E 
 5235      64657800 
 5236              	.LASF69:
 5237 06b2 72617069 		.ascii	"rapid_rate\000"
 5237      645F7261 
 5237      746500
 5238              	.LASF3:
 5239 06bd 73686F72 		.ascii	"short int\000"
 5239      7420696E 
 5239      7400
 5240              	.LASF169:
 5241 06c7 706C616E 		.ascii	"plan_get_exec_block_exit_speed_sqr\000"
 5241      5F676574 
 5241      5F657865 
 5241      635F626C 
 5241      6F636B5F 
 5242              	.LASF141:
 5243 06ea 706C5F62 		.ascii	"pl_block\000"
 5243      6C6F636B 
 5243      00
 5244              	.LASF100:
 5245 06f3 6D617869 		.ascii	"maximum_speed\000"
 5245      6D756D5F 
 5245      73706565 
 5245      6400
 5246              	.LASF8:
 5247 0701 6C6F6E67 		.ascii	"long int\000"
 5247      20696E74 
 5247      00
 5248              	.LASF144:
 5249 070a 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5249      52784275 
 5249      66666572 
 5249      00
 5250              	.LASF157:
 5251 0717 436F6E74 		.ascii	"Control_Step_Enable_Write\000"
 5251      726F6C5F 
 5251      53746570 
 5251      5F456E61 
 5251      626C655F 
 5252              	.LASF159:
 5253 0731 436F6E74 		.ascii	"Control_Reg_Dir_Write\000"
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 119


 5253      726F6C5F 
 5253      5265675F 
 5253      4469725F 
 5253      57726974 
 5254              	.LASF60:
 5255 0747 73797374 		.ascii	"system_t\000"
 5255      656D5F74 
 5255      00
 5256              	.LASF58:
 5257 0750 7265706F 		.ascii	"report_wco_counter\000"
 5257      72745F77 
 5257      636F5F63 
 5257      6F756E74 
 5257      657200
 5258              	.LASF122:
 5259 0763 6D696E69 		.ascii	"minimum_mm\000"
 5259      6D756D5F 
 5259      6D6D00
 5260              	.LASF134:
 5261 076e 7365676D 		.ascii	"segment_buffer\000"
 5261      656E745F 
 5261      62756666 
 5261      657200
 5262              	.LASF49:
 5263 077d 736F6674 		.ascii	"soft_limit\000"
 5263      5F6C696D 
 5263      697400
 5264              	.LASF87:
 5265 0788 73746570 		.ascii	"step_count\000"
 5265      5F636F75 
 5265      6E7400
 5266              	.LASF115:
 5267 0793 73745F70 		.ascii	"st_prep_buffer\000"
 5267      7265705F 
 5267      62756666 
 5267      657200
 5268              	.LASF127:
 5269 07a2 696E765F 		.ascii	"inv_2_accel\000"
 5269      325F6163 
 5269      63656C00 
 5270              	.LASF174:
 5271 07ae 6365696C 		.ascii	"ceil\000"
 5271      00
 5272              	.LASF138:
 5273 07b3 73746570 		.ascii	"step_port_invert_mask\000"
 5273      5F706F72 
 5273      745F696E 
 5273      76657274 
 5273      5F6D6173 
 5274              	.LASF94:
 5275 07c9 73746570 		.ascii	"steps_remaining\000"
 5275      735F7265 
 5275      6D61696E 
 5275      696E6700 
 5276              	.LASF4:
 5277 07d9 5F5F7569 		.ascii	"__uint8_t\000"
 5277      6E74385F 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 120


 5277      7400
 5278              	.LASF51:
 5279 07e3 70726F62 		.ascii	"probe_succeeded\000"
 5279      655F7375 
 5279      63636565 
 5279      64656400 
 5280              	.LASF152:
 5281 07f3 7379735F 		.ascii	"sys_rt_exec_accessory_override\000"
 5281      72745F65 
 5281      7865635F 
 5281      61636365 
 5281      73736F72 
 5282              	.LASF79:
 5283 0812 7365676D 		.ascii	"segment_t\000"
 5283      656E745F 
 5283      7400
 5284              	.LASF121:
 5285 081c 6D6D5F72 		.ascii	"mm_remaining\000"
 5285      656D6169 
 5285      6E696E67 
 5285      00
 5286              	.LASF24:
 5287 0829 73697A65 		.ascii	"sizetype\000"
 5287      74797065 
 5287      00
 5288              	.LASF10:
 5289 0832 6C6F6E67 		.ascii	"long unsigned int\000"
 5289      20756E73 
 5289      69676E65 
 5289      6420696E 
 5289      7400
 5290              	.LASF107:
 5291 0844 73745F77 		.ascii	"st_wake_up\000"
 5291      616B655F 
 5291      757000
 5292              	.LASF16:
 5293 084f 696E7433 		.ascii	"int32_t\000"
 5293      325F7400 
 5294              	.LASF123:
 5295 0857 73746570 		.ascii	"step_dist_remaining\000"
 5295      5F646973 
 5295      745F7265 
 5295      6D61696E 
 5295      696E6700 
 5296              	.LASF172:
 5297 086b 706C616E 		.ascii	"plan_get_current_block\000"
 5297      5F676574 
 5297      5F637572 
 5297      72656E74 
 5297      5F626C6F 
 5298              	.LASF176:
 5299 0882 73746570 		.ascii	"stepper.c\000"
 5299      7065722E 
 5299      6300
 5300              	.LASF97:
 5301 088c 72616D70 		.ascii	"ramp_type\000"
 5301      5F747970 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 121


 5301      6500
 5302              	.LASF103:
 5303 0896 64656365 		.ascii	"decelerate_after\000"
 5303      6C657261 
 5303      74655F61 
 5303      66746572 
 5303      00
 5304              	.LASF156:
 5305 08a7 53746570 		.ascii	"Stepper_Timer_Stop\000"
 5305      7065725F 
 5305      54696D65 
 5305      725F5374 
 5305      6F7000
 5306              	.LASF2:
 5307 08ba 756E7369 		.ascii	"unsigned char\000"
 5307      676E6564 
 5307      20636861 
 5307      7200
 5308              	.LASF86:
 5309 08c8 6469725F 		.ascii	"dir_outbits\000"
 5309      6F757462 
 5309      69747300 
 5310              	.LASF76:
 5311 08d4 73745F62 		.ascii	"st_block_index\000"
 5311      6C6F636B 
 5311      5F696E64 
 5311      657800
 5312              	.LASF9:
 5313 08e3 5F5F7569 		.ascii	"__uint32_t\000"
 5313      6E743332 
 5313      5F7400
 5314              	.LASF175:
 5315 08ee 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 5315      4320342E 
 5315      392E3320 
 5315      32303135 
 5315      30333033 
 5316 0921 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 5316      20726576 
 5316      6973696F 
 5316      6E203232 
 5316      31323230 
 5317 0954 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 5317      66756E63 
 5317      74696F6E 
 5317      2D736563 
 5317      74696F6E 
 5318              	.LASF93:
 5319 097c 64745F72 		.ascii	"dt_remainder\000"
 5319      656D6169 
 5319      6E646572 
 5319      00
 5320              	.LASF132:
 5321 0989 696E7465 		.ascii	"intersect_distance\000"
 5321      72736563 
 5321      745F6469 
 5321      7374616E 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 122


 5321      636500
 5322              	.LASF89:
 5323 099c 65786563 		.ascii	"exec_block\000"
 5323      5F626C6F 
 5323      636B00
 5324              	.LASF139:
 5325 09a7 6469725F 		.ascii	"dir_port_invert_mask\000"
 5325      706F7274 
 5325      5F696E76 
 5325      6572745F 
 5325      6D61736B 
 5326              	.LASF98:
 5327 09bc 6D6D5F63 		.ascii	"mm_complete\000"
 5327      6F6D706C 
 5327      65746500 
 5328              	.LASF46:
 5329 09c8 73746174 		.ascii	"state\000"
 5329      6500
 5330              	.LASF150:
 5331 09ce 7379735F 		.ascii	"sys_rt_exec_alarm\000"
 5331      72745F65 
 5331      7865635F 
 5331      616C6172 
 5331      6D00
 5332              	.LASF75:
 5333 09e0 6379636C 		.ascii	"cycles_per_tick\000"
 5333      65735F70 
 5333      65725F74 
 5333      69636B00 
 5334              	.LASF67:
 5335 09f0 6D696C6C 		.ascii	"millimeters\000"
 5335      696D6574 
 5335      65727300 
 5336              	.LASF1:
 5337 09fc 7369676E 		.ascii	"signed char\000"
 5337      65642063 
 5337      68617200 
 5338              	.LASF43:
 5339 0a08 686F6D69 		.ascii	"homing_debounce_delay\000"
 5339      6E675F64 
 5339      65626F75 
 5339      6E63655F 
 5339      64656C61 
 5340              	.LASF6:
 5341 0a1e 73686F72 		.ascii	"short unsigned int\000"
 5341      7420756E 
 5341      7369676E 
 5341      65642069 
 5341      6E7400
 5342              	.LASF131:
 5343 0a31 6E6F6D69 		.ascii	"nominal_speed_sqr\000"
 5343      6E616C5F 
 5343      73706565 
 5343      645F7371 
 5343      7200
 5344              	.LASF38:
 5345 0a43 72706D5F 		.ascii	"rpm_min\000"
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 123


 5345      6D696E00 
 5346              	.LASF45:
 5347 0a4b 73657474 		.ascii	"settings_t\000"
 5347      696E6773 
 5347      5F7400
 5348              	.LASF80:
 5349 0a56 636F756E 		.ascii	"counter_x\000"
 5349      7465725F 
 5349      7800
 5350              	.LASF81:
 5351 0a60 636F756E 		.ascii	"counter_y\000"
 5351      7465725F 
 5351      7900
 5352              	.LASF82:
 5353 0a6a 636F756E 		.ascii	"counter_z\000"
 5353      7465725F 
 5353      7A00
 5354              	.LASF18:
 5355 0a74 75696E74 		.ascii	"uint8\000"
 5355      3800
 5356              	.LASF21:
 5357 0a7a 646F7562 		.ascii	"double\000"
 5357      6C6500
 5358              	.LASF40:
 5359 0a81 686F6D69 		.ascii	"homing_dir_mask\000"
 5359      6E675F64 
 5359      69725F6D 
 5359      61736B00 
 5360              	.LASF91:
 5361 0a91 73746570 		.ascii	"stepper_t\000"
 5361      7065725F 
 5361      7400
 5362              	.LASF35:
 5363 0a9b 6A756E63 		.ascii	"junction_deviation\000"
 5363      74696F6E 
 5363      5F646576 
 5363      69617469 
 5363      6F6E00
 5364              	.LASF126:
 5365 0aae 6379636C 		.ascii	"cycles\000"
 5365      657300
 5366              	.LASF173:
 5367 0ab5 7370696E 		.ascii	"spindle_compute_pwm_value\000"
 5367      646C655F 
 5367      636F6D70 
 5367      7574655F 
 5367      70776D5F 
 5368              	.LASF52:
 5369 0acf 686F6D69 		.ascii	"homing_axis_lock\000"
 5369      6E675F61 
 5369      7869735F 
 5369      6C6F636B 
 5369      00
 5370              	.LASF64:
 5371 0ae0 636F6E64 		.ascii	"condition\000"
 5371      6974696F 
 5371      6E00
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccM05RYZ.s 			page 124


 5372              	.LASF116:
 5373 0aea 70726570 		.ascii	"prep_segment\000"
 5373      5F736567 
 5373      6D656E74 
 5373      00
 5374              	.LASF171:
 5375 0af7 706C616E 		.ascii	"plan_get_system_motion_block\000"
 5375      5F676574 
 5375      5F737973 
 5375      74656D5F 
 5375      6D6F7469 
 5376              	.LASF112:
 5377 0b14 70696E5F 		.ascii	"pin_state\000"
 5377      73746174 
 5377      6500
 5378              	.LASF165:
 5379 0b1e 6765745F 		.ascii	"get_direction_pin_mask\000"
 5379      64697265 
 5379      6374696F 
 5379      6E5F7069 
 5379      6E5F6D61 
 5380              	.LASF32:
 5381 0b35 6469725F 		.ascii	"dir_invert_mask\000"
 5381      696E7665 
 5381      72745F6D 
 5381      61736B00 
 5382              	.LASF167:
 5383 0b45 6973725F 		.ascii	"isr_Step_StartEx\000"
 5383      53746570 
 5383      5F537461 
 5383      72744578 
 5383      00
 5384              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
