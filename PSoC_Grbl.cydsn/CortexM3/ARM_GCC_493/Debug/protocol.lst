ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"protocol.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.protocol_auto_cycle_start,"ax",%progbits
  19              		.align	2
  20              		.global	protocol_auto_cycle_start
  21              		.thumb
  22              		.thumb_func
  23              		.type	protocol_auto_cycle_start, %function
  24              	protocol_auto_cycle_start:
  25              	.LFB65:
  26              		.file 1 "protocol.c"
   1:protocol.c    **** /*
   2:protocol.c    ****   protocol.c - controls Grbl execution protocol and procedures
   3:protocol.c    ****   Part of Grbl
   4:protocol.c    **** 
   5:protocol.c    ****   Copyright (c) 2011-2016 Sungeun K. Jeon for Gnea Research LLC
   6:protocol.c    ****   Copyright (c) 2009-2011 Simen Svale Skogsrud
   7:protocol.c    **** 
   8:protocol.c    ****   Grbl is free software: you can redistribute it and/or modify
   9:protocol.c    ****   it under the terms of the GNU General Public License as published by
  10:protocol.c    ****   the Free Software Foundation, either version 3 of the License, or
  11:protocol.c    ****   (at your option) any later version.
  12:protocol.c    **** 
  13:protocol.c    ****   Grbl is distributed in the hope that it will be useful,
  14:protocol.c    ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:protocol.c    ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:protocol.c    ****   GNU General Public License for more details.
  17:protocol.c    **** 
  18:protocol.c    ****   You should have received a copy of the GNU General Public License
  19:protocol.c    ****   along with Grbl.  If not, see <http://www.gnu.org/licenses/>.
  20:protocol.c    **** */
  21:protocol.c    **** 
  22:protocol.c    **** #include "grbl.h"
  23:protocol.c    **** 
  24:protocol.c    **** // Define line flags. Includes comment type tracking and line overflow detection.
  25:protocol.c    **** #define LINE_FLAG_OVERFLOW bit(0)
  26:protocol.c    **** #define LINE_FLAG_COMMENT_PARENTHESES bit(1)
  27:protocol.c    **** #define LINE_FLAG_COMMENT_SEMICOLON bit(2)
  28:protocol.c    **** 
  29:protocol.c    **** 
  30:protocol.c    **** static char line[LINE_BUFFER_SIZE]; // Line to be executed. Zero-terminated.
  31:protocol.c    **** 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 2


  32:protocol.c    **** static void protocol_exec_rt_suspend();
  33:protocol.c    **** 
  34:protocol.c    **** 
  35:protocol.c    **** /*
  36:protocol.c    ****   GRBL PRIMARY LOOP:
  37:protocol.c    **** */
  38:protocol.c    **** void protocol_main_loop()
  39:protocol.c    **** {
  40:protocol.c    ****   // Perform some machine checks to make sure everything is good to go.
  41:protocol.c    ****   #ifdef CHECK_LIMITS_AT_INIT
  42:protocol.c    ****     if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
  43:protocol.c    ****       if (limits_get_state()) {
  44:protocol.c    ****         sys.state = STATE_ALARM; // Ensure alarm state is active.
  45:protocol.c    ****         report_feedback_message(MESSAGE_CHECK_LIMITS);
  46:protocol.c    ****       }
  47:protocol.c    ****     }
  48:protocol.c    ****   #endif
  49:protocol.c    ****   // Check for and report alarm state after a reset, error, or an initial power up.
  50:protocol.c    ****   // NOTE: Sleep mode disables the stepper drivers and position can't be guaranteed.
  51:protocol.c    ****   // Re-initialize the sleep state as an ALARM mode to ensure user homes or acknowledges.
  52:protocol.c    ****   if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
  53:protocol.c    ****     report_feedback_message(MESSAGE_ALARM_LOCK);
  54:protocol.c    ****     sys.state = STATE_ALARM; // Ensure alarm state is set.
  55:protocol.c    ****   } else {
  56:protocol.c    ****     // Check if the safety door is open.
  57:protocol.c    ****     sys.state = STATE_IDLE;
  58:protocol.c    ****     if (system_check_safety_door_ajar()) {
  59:protocol.c    ****       bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
  60:protocol.c    ****       protocol_execute_realtime(); // Enter safety door mode. Should return as IDLE state.
  61:protocol.c    ****     }
  62:protocol.c    ****     // All systems go!
  63:protocol.c    ****     system_execute_startup(line); // Execute startup script.
  64:protocol.c    ****   }
  65:protocol.c    **** 
  66:protocol.c    ****   // ---------------------------------------------------------------------------------
  67:protocol.c    ****   // Primary loop! Upon a system abort, this exits back to main() to reset the system.
  68:protocol.c    ****   // This is also where Grbl idles while waiting for something to do.
  69:protocol.c    ****   // ---------------------------------------------------------------------------------
  70:protocol.c    **** 
  71:protocol.c    ****   uint8_t line_flags = 0;
  72:protocol.c    ****   uint8_t char_counter = 0;
  73:protocol.c    ****   uint8_t c;
  74:protocol.c    ****   for (;;) {
  75:protocol.c    **** 
  76:protocol.c    ****     // Process one line of incoming serial data, as the data becomes available. Performs an
  77:protocol.c    ****     // initial filtering by removing spaces and comments and capitalizing all letters.
  78:protocol.c    ****     while((c = serial_read()) != SERIAL_NO_DATA) {
  79:protocol.c    ****       if ((c == '\n') || (c == '\r')) { // End of line reached
  80:protocol.c    **** 
  81:protocol.c    ****         protocol_execute_realtime(); // Runtime command check point.
  82:protocol.c    ****         if (sys.abort) { return; } // Bail to calling function upon system abort
  83:protocol.c    **** 
  84:protocol.c    ****         line[char_counter] = 0; // Set string termination character.
  85:protocol.c    ****         #ifdef REPORT_ECHO_LINE_RECEIVED
  86:protocol.c    ****           report_echo_line_received(line);
  87:protocol.c    ****         #endif
  88:protocol.c    **** 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 3


  89:protocol.c    ****         // Direct and execute one line of formatted input, and report status of execution.
  90:protocol.c    ****         if (line_flags & LINE_FLAG_OVERFLOW) {
  91:protocol.c    ****           // Report line overflow error.
  92:protocol.c    ****           report_status_message(STATUS_OVERFLOW);
  93:protocol.c    ****         } else if (line[0] == 0) {
  94:protocol.c    ****           // Empty or comment line. For syncing purposes.
  95:protocol.c    ****           report_status_message(STATUS_OK);
  96:protocol.c    ****         } else if (line[0] == '$') {
  97:protocol.c    ****           // Grbl '$' system command
  98:protocol.c    ****           report_status_message(system_execute_line(line));
  99:protocol.c    ****         } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 100:protocol.c    ****           // Everything else is gcode. Block if in alarm or jog mode.
 101:protocol.c    ****           report_status_message(STATUS_SYSTEM_GC_LOCK);
 102:protocol.c    ****         } else {
 103:protocol.c    ****           // Parse and execute g-code block.
 104:protocol.c    ****           report_status_message(gc_execute_line(line));
 105:protocol.c    ****         }
 106:protocol.c    **** 
 107:protocol.c    ****         // Reset tracking data for next line.
 108:protocol.c    ****         line_flags = 0;
 109:protocol.c    ****         char_counter = 0;
 110:protocol.c    **** 
 111:protocol.c    ****       } else {
 112:protocol.c    **** 
 113:protocol.c    ****         if (line_flags) {
 114:protocol.c    ****           // Throw away all (except EOL) comment characters and overflow characters.
 115:protocol.c    ****           if (c == ')') {
 116:protocol.c    ****             // End of '()' comment. Resume line allowed.
 117:protocol.c    ****             if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PAR
 118:protocol.c    ****           }
 119:protocol.c    ****         } else {
 120:protocol.c    ****           if (c <= ' ') {
 121:protocol.c    ****             // Throw away whitepace and control characters
 122:protocol.c    ****           } else if (c == '/') {
 123:protocol.c    ****             // Block delete NOT SUPPORTED. Ignore character.
 124:protocol.c    ****             // NOTE: If supported, would simply need to check the system if block delete is enabled
 125:protocol.c    ****           } else if (c == '(') {
 126:protocol.c    ****             // Enable comments flag and ignore all characters until ')' or EOL.
 127:protocol.c    ****             // NOTE: This doesn't follow the NIST definition exactly, but is good enough for now.
 128:protocol.c    ****             // In the future, we could simply remove the items within the comments, but retain the
 129:protocol.c    ****             // comment control characters, so that the g-code parser can error-check it.
 130:protocol.c    ****             line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 131:protocol.c    ****           } else if (c == ';') {
 132:protocol.c    ****             // NOTE: ';' comment to EOL is a LinuxCNC definition. Not NIST.
 133:protocol.c    ****             line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 134:protocol.c    ****           // TODO: Install '%' feature
 135:protocol.c    ****           // } else if (c == '%') {
 136:protocol.c    ****             // Program start-end percent sign NOT SUPPORTED.
 137:protocol.c    ****             // NOTE: This maybe installed to tell Grbl when a program is running vs manual input,
 138:protocol.c    ****             // where, during a program, the system auto-cycle start will continue to execute
 139:protocol.c    ****             // everything until the next '%' sign. This will help fix resuming issues with certain
 140:protocol.c    ****             // functions that empty the planner buffer to execute its task on-time.
 141:protocol.c    ****           } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 142:protocol.c    ****             // Detect line buffer overflow and set flag.
 143:protocol.c    ****             line_flags |= LINE_FLAG_OVERFLOW;
 144:protocol.c    ****           } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 145:protocol.c    ****             line[char_counter++] = c-'a'+'A';
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 4


 146:protocol.c    ****           } else {
 147:protocol.c    ****             line[char_counter++] = c;
 148:protocol.c    ****           }
 149:protocol.c    ****         }
 150:protocol.c    **** 
 151:protocol.c    ****       }
 152:protocol.c    ****       
 153:protocol.c    ****        // Execute and LCD print status PSoc
 154:protocol.c    ****     if (exec_lcd_status) { 
 155:protocol.c    ****       lcd_report_realtime(); 
 156:protocol.c    ****       exec_lcd_status = false;
 157:protocol.c    ****       //printPgmString(PSTR("LCD\r\n"));
 158:protocol.c    ****     }
 159:protocol.c    ****       
 160:protocol.c    ****     }
 161:protocol.c    **** 
 162:protocol.c    ****     // If there are no more characters in the serial read buffer to be processed and executed,
 163:protocol.c    ****     // this indicates that g-code streaming has either filled the planner buffer or has
 164:protocol.c    ****     // completed. In either case, auto-cycle start, if enabled, any queued moves.
 165:protocol.c    ****     protocol_auto_cycle_start();
 166:protocol.c    **** 
 167:protocol.c    ****     protocol_execute_realtime();  // Runtime command check point.
 168:protocol.c    ****     if (sys.abort) { return; } // Bail to main() program loop to reset system.
 169:protocol.c    ****   }
 170:protocol.c    **** 
 171:protocol.c    ****   return; /* Never reached */
 172:protocol.c    **** }
 173:protocol.c    **** 
 174:protocol.c    **** 
 175:protocol.c    **** // Block until all buffered steps are executed or in a cycle state. Works with feed hold
 176:protocol.c    **** // during a synchronize call, if it should happen. Also, waits for clean cycle end.
 177:protocol.c    **** void protocol_buffer_synchronize()
 178:protocol.c    **** {
 179:protocol.c    ****   // If system is queued, ensure cycle resumes if the auto start flag is present.
 180:protocol.c    ****   protocol_auto_cycle_start();
 181:protocol.c    ****   do {
 182:protocol.c    ****     protocol_execute_realtime();   // Check and execute run-time commands
 183:protocol.c    ****     if (sys.abort) { return; } // Check for system abort
 184:protocol.c    ****   } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 185:protocol.c    **** }
 186:protocol.c    **** 
 187:protocol.c    **** 
 188:protocol.c    **** // Auto-cycle start triggers when there is a motion ready to execute and if the main program is not
 189:protocol.c    **** // actively parsing commands.
 190:protocol.c    **** // NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
 191:protocol.c    **** // when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
 192:protocol.c    **** // is finished, single commands), a command that needs to wait for the motions in the buffer to
 193:protocol.c    **** // execute calls a buffer sync, or the planner buffer is full and ready to go.
 194:protocol.c    **** void protocol_auto_cycle_start()
 195:protocol.c    **** {
  27              		.loc 1 195 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 5


  34              		.cfi_offset 14, -4
 196:protocol.c    ****   if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
  35              		.loc 1 196 0
  36 0002 FFF7FEFF 		bl	plan_get_current_block
  37              	.LVL0:
  38 0006 10B1     		cbz	r0, .L1
 197:protocol.c    ****     system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
  39              		.loc 1 197 0
  40 0008 0220     		movs	r0, #2
  41 000a FFF7FEFF 		bl	system_set_exec_state_flag
  42              	.LVL1:
  43              	.L1:
  44 000e 08BD     		pop	{r3, pc}
  45              		.cfi_endproc
  46              	.LFE65:
  47              		.size	protocol_auto_cycle_start, .-protocol_auto_cycle_start
  48              		.section	.text.protocol_exec_rt_system,"ax",%progbits
  49              		.align	2
  50              		.global	protocol_exec_rt_system
  51              		.thumb
  52              		.thumb_func
  53              		.type	protocol_exec_rt_system, %function
  54              	protocol_exec_rt_system:
  55              	.LFB67:
 198:protocol.c    ****   }
 199:protocol.c    **** }
 200:protocol.c    **** 
 201:protocol.c    **** 
 202:protocol.c    **** // This function is the general interface to Grbl's real-time command execution system. It is calle
 203:protocol.c    **** // from various check points in the main program, primarily where there may be a while loop waiting
 204:protocol.c    **** // for a buffer to clear space or any point where the execution time from the last check point may
 205:protocol.c    **** // be more than a fraction of a second. This is a way to execute realtime commands asynchronously
 206:protocol.c    **** // (aka multitasking) with grbl's g-code parsing and planning functions. This function also serves
 207:protocol.c    **** // as an interface for the interrupts to set the system realtime flags, where only the main program
 208:protocol.c    **** // handles them, removing the need to define more computationally-expensive volatile variables. Thi
 209:protocol.c    **** // also provides a controlled way to execute certain tasks without having two or more instances of
 210:protocol.c    **** // the same task, such as the planner recalculating the buffer upon a feedhold or overrides.
 211:protocol.c    **** // NOTE: The sys_rt_exec_state variable flags are set by any process, step or serial interrupts, pi
 212:protocol.c    **** // limit switches, or the main program.
 213:protocol.c    **** void protocol_execute_realtime()
 214:protocol.c    **** {
 215:protocol.c    ****   protocol_exec_rt_system();
 216:protocol.c    ****   if (sys.suspend) { protocol_exec_rt_suspend(); }
 217:protocol.c    ****   
 218:protocol.c    ****    // Execute and LCD print status PSoc
 219:protocol.c    ****     if (exec_lcd_status) { 
 220:protocol.c    ****       lcd_report_realtime(); 
 221:protocol.c    ****       exec_lcd_status = false;
 222:protocol.c    ****     }
 223:protocol.c    ****   
 224:protocol.c    **** }
 225:protocol.c    **** 
 226:protocol.c    **** 
 227:protocol.c    **** // Executes run-time commands, when required. This function primarily operates as Grbl's state
 228:protocol.c    **** // machine and controls the various real-time features Grbl has to offer.
 229:protocol.c    **** // NOTE: Do not alter this unless you know exactly what you are doing!
 230:protocol.c    **** void protocol_exec_rt_system()
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 6


 231:protocol.c    **** {
  56              		.loc 1 231 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60 0000 10B5     		push	{r4, lr}
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 4, -8
  63              		.cfi_offset 14, -4
 232:protocol.c    ****   uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
 233:protocol.c    ****   rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
  64              		.loc 1 233 0
  65 0002 A14B     		ldr	r3, .L63
  66 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  67              	.LVL2:
 234:protocol.c    ****   if (rt_exec) { // Enter only if any bit flag is true
  68              		.loc 1 234 0
  69 0006 03F0FF04 		and	r4, r3, #255
  70 000a B3B1     		cbz	r3, .L5
 235:protocol.c    ****     // System alarm. Everything has shutdown by something that has gone severely wrong. Report
 236:protocol.c    ****     // the source of the error to the user. If critical, Grbl disables by entering an infinite
 237:protocol.c    ****     // loop until system reset/abort.
 238:protocol.c    ****     sys.state = STATE_ALARM; // Set system alarm state
  71              		.loc 1 238 0
  72 000c 0122     		movs	r2, #1
  73 000e 9F4B     		ldr	r3, .L63+4
  74              	.LVL3:
  75 0010 1A70     		strb	r2, [r3]
 239:protocol.c    ****     report_alarm_message(rt_exec);
  76              		.loc 1 239 0
  77 0012 60B2     		sxtb	r0, r4
  78 0014 FFF7FEFF 		bl	report_alarm_message
  79              	.LVL4:
 240:protocol.c    ****     // Halt everything upon a critical event flag. Currently hard and soft limits flag this.
 241:protocol.c    ****     if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
  80              		.loc 1 241 0
  81 0018 013C     		subs	r4, r4, #1
  82 001a E4B2     		uxtb	r4, r4
  83 001c 012C     		cmp	r4, #1
  84 001e 0AD8     		bhi	.L6
 242:protocol.c    ****       report_feedback_message(MESSAGE_CRITICAL_EVENT);
  85              		.loc 1 242 0
  86 0020 0120     		movs	r0, #1
  87 0022 FFF7FEFF 		bl	report_feedback_message
  88              	.LVL5:
 243:protocol.c    ****       system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
  89              		.loc 1 243 0
  90 0026 1020     		movs	r0, #16
  91 0028 FFF7FEFF 		bl	system_clear_exec_state_flag
  92              	.LVL6:
  93              	.L7:
 244:protocol.c    ****       do {
 245:protocol.c    ****         // Block everything, except reset and status reports, until user issues reset or power
 246:protocol.c    ****         // cycles. Hard limits typically occur while unattended or not paying attention. Gives
 247:protocol.c    ****         // the user and a GUI time to do what is needed before resetting, like killing the
 248:protocol.c    ****         // incoming stream. The same could be said about soft limits. While the position is not
 249:protocol.c    ****         // lost, continued streaming could cause a serious crash if by chance it gets executed.
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 7


 250:protocol.c    ****       } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
  94              		.loc 1 250 0 discriminator 1
  95 002c 984B     		ldr	r3, .L63+8
  96 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  97 0030 13F0100F 		tst	r3, #16
  98 0034 FAD0     		beq	.L7
  99              	.L6:
 251:protocol.c    ****     }
 252:protocol.c    ****     system_clear_exec_alarm(); // Clear alarm
 100              		.loc 1 252 0
 101 0036 FFF7FEFF 		bl	system_clear_exec_alarm
 102              	.LVL7:
 103              	.L5:
 253:protocol.c    ****   }
 254:protocol.c    **** 
 255:protocol.c    ****   rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 104              		.loc 1 255 0
 105 003a 954B     		ldr	r3, .L63+8
 106 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 107              	.LVL8:
 256:protocol.c    ****   if (rt_exec) {
 108              		.loc 1 256 0
 109 003e 03F0FF04 		and	r4, r3, #255
 110 0042 002B     		cmp	r3, #0
 111 0044 00F01181 		beq	.L8
 257:protocol.c    **** 
 258:protocol.c    ****     // Execute system abort.
 259:protocol.c    ****     if (rt_exec & EXEC_RESET) {
 112              		.loc 1 259 0
 113 0048 14F0100F 		tst	r4, #16
 114 004c 03D0     		beq	.L9
 260:protocol.c    ****       sys.abort = true;  // Only place this is set true.
 115              		.loc 1 260 0
 116 004e 0122     		movs	r2, #1
 117 0050 8E4B     		ldr	r3, .L63+4
 118              	.LVL9:
 119 0052 5A70     		strb	r2, [r3, #1]
 261:protocol.c    ****       return; // Nothing else to do but exit.
 120              		.loc 1 261 0
 121 0054 10BD     		pop	{r4, pc}
 122              	.LVL10:
 123              	.L9:
 262:protocol.c    ****     }
 263:protocol.c    **** 
 264:protocol.c    ****     // Execute and serial print status
 265:protocol.c    ****     if (rt_exec & EXEC_STATUS_REPORT) {
 124              		.loc 1 265 0
 125 0056 14F0010F 		tst	r4, #1
 126 005a 04D0     		beq	.L11
 266:protocol.c    ****       report_realtime_status();
 127              		.loc 1 266 0
 128 005c FFF7FEFF 		bl	report_realtime_status
 129              	.LVL11:
 267:protocol.c    ****       system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 130              		.loc 1 267 0
 131 0060 0120     		movs	r0, #1
 132 0062 FFF7FEFF 		bl	system_clear_exec_state_flag
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 8


 133              	.LVL12:
 134              	.L11:
 268:protocol.c    ****     }
 269:protocol.c    ****     
 270:protocol.c    ****     
 271:protocol.c    **** 
 272:protocol.c    ****     // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
 273:protocol.c    ****     // main program processes until either reset or resumed. This ensures a hold completes safely.
 274:protocol.c    ****     if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 135              		.loc 1 274 0
 136 0066 14F0E80F 		tst	r4, #232
 137 006a 6AD0     		beq	.L12
 275:protocol.c    **** 
 276:protocol.c    ****       // State check for allowable states for hold methods.
 277:protocol.c    ****       if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 138              		.loc 1 277 0
 139 006c 874B     		ldr	r3, .L63+4
 140 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 141 0070 13F0030F 		tst	r3, #3
 142 0074 53D1     		bne	.L13
 278:protocol.c    ****       
 279:protocol.c    ****         // If in CYCLE or JOG states, immediately initiate a motion HOLD.
 280:protocol.c    ****         if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 143              		.loc 1 280 0
 144 0076 13F0280F 		tst	r3, #40
 145 007a 14D0     		beq	.L14
 281:protocol.c    ****           if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already
 146              		.loc 1 281 0
 147 007c 834B     		ldr	r3, .L63+4
 148 007e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 149 0080 13F0C00F 		tst	r3, #192
 150 0084 0FD1     		bne	.L14
 282:protocol.c    ****             st_update_plan_block_parameters(); // Notify stepper module to recompute for hold decel
 151              		.loc 1 282 0
 152 0086 FFF7FEFF 		bl	st_update_plan_block_parameters
 153              	.LVL13:
 283:protocol.c    ****             sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active fla
 154              		.loc 1 283 0
 155 008a 804B     		ldr	r3, .L63+4
 156 008c 0222     		movs	r2, #2
 157 008e 1A71     		strb	r2, [r3, #4]
 284:protocol.c    ****             if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping
 158              		.loc 1 284 0
 159 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 160 0092 202B     		cmp	r3, #32
 161 0094 07D1     		bne	.L14
 285:protocol.c    ****               if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 162              		.loc 1 285 0
 163 0096 14F0800F 		tst	r4, #128
 164 009a 04D1     		bne	.L14
 165              		.loc 1 285 0 is_stmt 0 discriminator 1
 166 009c 7B4A     		ldr	r2, .L63+4
 167 009e 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 168 00a0 63F07F03 		orn	r3, r3, #127
 169 00a4 9370     		strb	r3, [r2, #2]
 170              	.L14:
 286:protocol.c    ****             }
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 9


 287:protocol.c    ****           }
 288:protocol.c    ****         }
 289:protocol.c    ****         // If IDLE, Grbl is not in motion. Simply indicate suspend state and hold is complete.
 290:protocol.c    ****         if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 171              		.loc 1 290 0 is_stmt 1
 172 00a6 794B     		ldr	r3, .L63+4
 173 00a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 174 00aa 13B9     		cbnz	r3, .L15
 175              		.loc 1 290 0 is_stmt 0 discriminator 1
 176 00ac 0121     		movs	r1, #1
 177 00ae 774A     		ldr	r2, .L63+4
 178 00b0 9170     		strb	r1, [r2, #2]
 179              	.L15:
 291:protocol.c    **** 
 292:protocol.c    ****         // Execute and flag a motion cancel with deceleration and return to idle. Used primarily by
 293:protocol.c    ****         // to halt and cancel the remainder of the motion.
 294:protocol.c    ****         if (rt_exec & EXEC_MOTION_CANCEL) {
 180              		.loc 1 294 0 is_stmt 1
 181 00b2 14F0400F 		tst	r4, #64
 182 00b6 07D0     		beq	.L16
 295:protocol.c    ****           // MOTION_CANCEL only occurs during a CYCLE, but a HOLD and SAFETY_DOOR may been initiate
 296:protocol.c    ****           // to hold the CYCLE. Motion cancel is valid for a single planner block motion only, whil
 297:protocol.c    ****           // will handle and clear multiple planner block motions.
 298:protocol.c    ****           if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is
 183              		.loc 1 298 0
 184 00b8 13F0200F 		tst	r3, #32
 185 00bc 04D1     		bne	.L16
 186              		.loc 1 298 0 is_stmt 0 discriminator 1
 187 00be 7349     		ldr	r1, .L63+4
 188 00c0 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 189 00c2 42F04002 		orr	r2, r2, #64
 190 00c6 8A70     		strb	r2, [r1, #2]
 191              	.L16:
 299:protocol.c    ****         }
 300:protocol.c    **** 
 301:protocol.c    ****         // Execute a feed hold with deceleration, if required. Then, suspend system.
 302:protocol.c    ****         if (rt_exec & EXEC_FEED_HOLD) {
 192              		.loc 1 302 0 is_stmt 1
 193 00c8 14F0080F 		tst	r4, #8
 194 00cc 05D0     		beq	.L17
 303:protocol.c    ****           // Block SAFETY_DOOR, JOG, and SLEEP states from changing to HOLD state.
 304:protocol.c    ****           if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOL
 195              		.loc 1 304 0
 196 00ce 13F0E00F 		tst	r3, #224
 197 00d2 02D1     		bne	.L17
 198              		.loc 1 304 0 is_stmt 0 discriminator 1
 199 00d4 1022     		movs	r2, #16
 200 00d6 6D4B     		ldr	r3, .L63+4
 201 00d8 1A70     		strb	r2, [r3]
 202              	.L17:
 305:protocol.c    ****         }
 306:protocol.c    **** 
 307:protocol.c    ****         // Execute a safety door stop with a feed hold and disable spindle/coolant.
 308:protocol.c    ****         // NOTE: Safety door differs from feed holds by stopping everything no matter state, disabl
 309:protocol.c    ****         // devices (spindle/coolant), and blocks resuming until switch is re-engaged.
 310:protocol.c    ****         if (rt_exec & EXEC_SAFETY_DOOR) {
 203              		.loc 1 310 0 is_stmt 1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 10


 204 00da 14F0200F 		tst	r4, #32
 205 00de 1ED0     		beq	.L13
 311:protocol.c    ****           report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 206              		.loc 1 311 0
 207 00e0 0620     		movs	r0, #6
 208 00e2 FFF7FEFF 		bl	report_feedback_message
 209              	.LVL14:
 312:protocol.c    ****           // If jogging, block safety door methods until jog cancel is complete. Just flag that it 
 313:protocol.c    ****           if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 210              		.loc 1 313 0
 211 00e6 694B     		ldr	r3, .L63+4
 212 00e8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 213 00ea 13F0800F 		tst	r3, #128
 214 00ee 11D1     		bne	.L18
 314:protocol.c    ****             // Check if the safety re-opened during a restore parking motion only. Ignore if
 315:protocol.c    ****             // already retracting, parked or in sleep state.
 316:protocol.c    ****             if (sys.state == STATE_SAFETY_DOOR) {
 215              		.loc 1 316 0
 216 00f0 664A     		ldr	r2, .L63+4
 217 00f2 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 218 00f4 402A     		cmp	r2, #64
 219 00f6 08D1     		bne	.L19
 317:protocol.c    ****               if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 220              		.loc 1 317 0
 221 00f8 13F0080F 		tst	r3, #8
 222 00fc 05D0     		beq	.L19
 318:protocol.c    ****                 #ifdef PARKING_ENABLE
 319:protocol.c    ****                   // Set hold and reset appropriate control flags to restart parking sequence.
 320:protocol.c    ****                   if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 321:protocol.c    ****                     st_update_plan_block_parameters(); // Notify stepper module to recompute for ho
 322:protocol.c    ****                     sys.step_control = (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION
 323:protocol.c    ****                     sys.suspend &= ~(SUSPEND_HOLD_COMPLETE);
 324:protocol.c    ****                   } // else NO_MOTION is active.
 325:protocol.c    ****                 #endif
 326:protocol.c    ****                 sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_REST
 223              		.loc 1 326 0
 224 00fe 03F0E303 		and	r3, r3, #227
 327:protocol.c    ****                 sys.suspend |= SUSPEND_RESTART_RETRACT;
 225              		.loc 1 327 0
 226 0102 43F00203 		orr	r3, r3, #2
 227 0106 6149     		ldr	r1, .L63+4
 228 0108 8B70     		strb	r3, [r1, #2]
 229              	.L19:
 328:protocol.c    ****               }
 329:protocol.c    ****             }
 330:protocol.c    ****             if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 230              		.loc 1 330 0
 231 010a 802A     		cmp	r2, #128
 232 010c 02D0     		beq	.L18
 233              		.loc 1 330 0 is_stmt 0 discriminator 1
 234 010e 4022     		movs	r2, #64
 235 0110 5E4B     		ldr	r3, .L63+4
 236 0112 1A70     		strb	r2, [r3]
 237              	.L18:
 331:protocol.c    ****           }
 332:protocol.c    ****           // NOTE: This flag doesn't change when the door closes, unlike sys.state. Ensures any par
 333:protocol.c    ****           // are executed if the door switch closes and the state returns to HOLD.
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 11


 334:protocol.c    ****           sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 238              		.loc 1 334 0 is_stmt 1
 239 0114 5D4A     		ldr	r2, .L63+4
 240 0116 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 241 0118 43F02003 		orr	r3, r3, #32
 242 011c 9370     		strb	r3, [r2, #2]
 243              	.L13:
 335:protocol.c    ****         }
 336:protocol.c    ****         
 337:protocol.c    ****       }
 338:protocol.c    **** 
 339:protocol.c    ****       if (rt_exec & EXEC_SLEEP) {
 244              		.loc 1 339 0
 245 011e 14F0800F 		tst	r4, #128
 246 0122 0BD0     		beq	.L20
 340:protocol.c    ****         if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPL
 247              		.loc 1 340 0
 248 0124 594B     		ldr	r3, .L63+4
 249 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 250 0128 012B     		cmp	r3, #1
 251 012a 04D1     		bne	.L21
 252              		.loc 1 340 0 is_stmt 0 discriminator 1
 253 012c 574A     		ldr	r2, .L63+4
 254 012e 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 255 0130 43F00503 		orr	r3, r3, #5
 256 0134 9370     		strb	r3, [r2, #2]
 257              	.L21:
 341:protocol.c    ****         sys.state = STATE_SLEEP; 
 258              		.loc 1 341 0 is_stmt 1
 259 0136 8022     		movs	r2, #128
 260 0138 544B     		ldr	r3, .L63+4
 261 013a 1A70     		strb	r2, [r3]
 262              	.L20:
 342:protocol.c    ****       }
 343:protocol.c    **** 
 344:protocol.c    ****       system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_S
 263              		.loc 1 344 0
 264 013c E820     		movs	r0, #232
 265 013e FFF7FEFF 		bl	system_clear_exec_state_flag
 266              	.LVL15:
 267              	.L12:
 345:protocol.c    ****     }
 346:protocol.c    **** 
 347:protocol.c    ****     // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in que
 348:protocol.c    ****     if (rt_exec & EXEC_CYCLE_START) {
 268              		.loc 1 348 0
 269 0142 14F0020F 		tst	r4, #2
 270 0146 4AD0     		beq	.L22
 349:protocol.c    ****       // Block if called at same time as the hold commands: feed hold, motion cancel, and safety do
 350:protocol.c    ****       // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
 351:protocol.c    ****       if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 271              		.loc 1 351 0
 272 0148 14F0680F 		tst	r4, #104
 273 014c 44D1     		bne	.L23
 352:protocol.c    ****         // Resume door state when parking motion has retracted and door has been closed.
 353:protocol.c    ****         if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 274              		.loc 1 353 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 12


 275 014e 4F4B     		ldr	r3, .L63+4
 276 0150 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 277 0152 402B     		cmp	r3, #64
 278 0154 12D1     		bne	.L24
 279              		.loc 1 353 0 is_stmt 0 discriminator 1
 280 0156 4D4B     		ldr	r3, .L63+4
 281 0158 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 282 015a 13F0200F 		tst	r3, #32
 283 015e 0DD1     		bne	.L24
 354:protocol.c    ****           if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 284              		.loc 1 354 0 is_stmt 1
 285 0160 13F0100F 		tst	r3, #16
 286 0164 03D0     		beq	.L25
 355:protocol.c    ****             sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 287              		.loc 1 355 0
 288 0166 0022     		movs	r2, #0
 289 0168 484B     		ldr	r3, .L63+4
 290 016a 1A70     		strb	r2, [r3]
 291 016c 06E0     		b	.L24
 292              	.L25:
 356:protocol.c    ****           } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 293              		.loc 1 356 0
 294 016e 13F0040F 		tst	r3, #4
 295 0172 03D0     		beq	.L24
 357:protocol.c    ****             // Flag to re-energize powered components and restore original position, if disabled by
 358:protocol.c    ****             // NOTE: For a safety door to resume, the switch must be closed, as indicated by HOLD s
 359:protocol.c    ****             // the retraction execution is complete, which implies the initial feed hold is not act
 360:protocol.c    ****             // restore normal operation, the restore procedures must be initiated by the following 
 361:protocol.c    ****             // they are complete, it will call CYCLE_START automatically to resume and exit the sus
 362:protocol.c    ****             sys.suspend |= SUSPEND_INITIATE_RESTORE;
 296              		.loc 1 362 0
 297 0174 43F00803 		orr	r3, r3, #8
 298 0178 444A     		ldr	r2, .L63+4
 299 017a 9370     		strb	r3, [r2, #2]
 300              	.L24:
 363:protocol.c    ****           }
 364:protocol.c    ****         }
 365:protocol.c    ****         // Cycle start only when IDLE or when a hold is complete and ready to resume.
 366:protocol.c    ****         if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_C
 301              		.loc 1 366 0
 302 017c 434B     		ldr	r3, .L63+4
 303 017e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 304 0180 3BB1     		cbz	r3, .L26
 305              		.loc 1 366 0 is_stmt 0 discriminator 1
 306 0182 13F0100F 		tst	r3, #16
 307 0186 27D0     		beq	.L23
 308              		.loc 1 366 0 discriminator 2
 309 0188 404A     		ldr	r2, .L63+4
 310 018a 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 311 018c 12F0010F 		tst	r2, #1
 312 0190 22D0     		beq	.L23
 313              	.L26:
 367:protocol.c    ****           if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 314              		.loc 1 367 0 is_stmt 1
 315 0192 102B     		cmp	r3, #16
 316 0194 07D1     		bne	.L27
 317              		.loc 1 367 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 13


 318 0196 3D4B     		ldr	r3, .L63+4
 319 0198 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 320 019a 23B1     		cbz	r3, .L27
 368:protocol.c    ****             sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend ro
 321              		.loc 1 368 0 is_stmt 1
 322 019c 43F00803 		orr	r3, r3, #8
 323 01a0 3A4A     		ldr	r2, .L63+4
 324 01a2 9372     		strb	r3, [r2, #10]
 325 01a4 18E0     		b	.L23
 326              	.L27:
 369:protocol.c    ****           } else {
 370:protocol.c    ****             // Start cycle only if queued motions exist in planner buffer and the motion is not can
 371:protocol.c    ****             sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 327              		.loc 1 371 0
 328 01a6 0022     		movs	r2, #0
 329 01a8 384B     		ldr	r3, .L63+4
 330 01aa 1A71     		strb	r2, [r3, #4]
 372:protocol.c    ****             if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 331              		.loc 1 372 0
 332 01ac FFF7FEFF 		bl	plan_get_current_block
 333              	.LVL16:
 334 01b0 70B1     		cbz	r0, .L28
 335              		.loc 1 372 0 is_stmt 0 discriminator 1
 336 01b2 364B     		ldr	r3, .L63+4
 337 01b4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 338 01b6 13F0400F 		tst	r3, #64
 339 01ba 09D1     		bne	.L28
 373:protocol.c    ****               sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 340              		.loc 1 373 0 is_stmt 1
 341 01bc 334B     		ldr	r3, .L63+4
 342 01be 0022     		movs	r2, #0
 343 01c0 9A70     		strb	r2, [r3, #2]
 374:protocol.c    ****               sys.state = STATE_CYCLE;
 344              		.loc 1 374 0
 345 01c2 0822     		movs	r2, #8
 346 01c4 1A70     		strb	r2, [r3]
 375:protocol.c    ****               st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 347              		.loc 1 375 0
 348 01c6 FFF7FEFF 		bl	st_prep_buffer
 349              	.LVL17:
 376:protocol.c    ****               st_wake_up();
 350              		.loc 1 376 0
 351 01ca FFF7FEFF 		bl	st_wake_up
 352              	.LVL18:
 353 01ce 03E0     		b	.L23
 354              	.L28:
 377:protocol.c    ****             } else { // Otherwise, do nothing. Set and resume IDLE state.
 378:protocol.c    ****               sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 355              		.loc 1 378 0
 356 01d0 2E4B     		ldr	r3, .L63+4
 357 01d2 0022     		movs	r2, #0
 358 01d4 9A70     		strb	r2, [r3, #2]
 379:protocol.c    ****               sys.state = STATE_IDLE;
 359              		.loc 1 379 0
 360 01d6 1A70     		strb	r2, [r3]
 361              	.L23:
 380:protocol.c    ****             }
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 14


 381:protocol.c    ****           }
 382:protocol.c    ****         }
 383:protocol.c    ****       }
 384:protocol.c    ****       system_clear_exec_state_flag(EXEC_CYCLE_START);
 362              		.loc 1 384 0
 363 01d8 0220     		movs	r0, #2
 364 01da FFF7FEFF 		bl	system_clear_exec_state_flag
 365              	.LVL19:
 366              	.L22:
 385:protocol.c    ****     }
 386:protocol.c    **** 
 387:protocol.c    ****     if (rt_exec & EXEC_CYCLE_STOP) {
 367              		.loc 1 387 0
 368 01de 14F0040F 		tst	r4, #4
 369 01e2 42D0     		beq	.L8
 388:protocol.c    ****       // Reinitializes the cycle plan and stepper system after a feed hold for a resume. Called by
 389:protocol.c    ****       // realtime command execution in the main program, ensuring that the planner re-plans safely.
 390:protocol.c    ****       // NOTE: Bresenham algorithm variables are still maintained through both the planner and step
 391:protocol.c    ****       // cycle reinitializations. The stepper path should continue exactly as if nothing has happen
 392:protocol.c    ****       // NOTE: EXEC_CYCLE_STOP is set by the stepper subsystem when a cycle or feed hold completes.
 393:protocol.c    ****       if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.su
 370              		.loc 1 393 0
 371 01e4 294B     		ldr	r3, .L63+4
 372 01e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 373 01e8 13F0D00F 		tst	r3, #208
 374 01ec 18D0     		beq	.L29
 375              		.loc 1 393 0 is_stmt 0 discriminator 1
 376 01ee 274B     		ldr	r3, .L63+4
 377 01f0 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 378 01f2 ABB9     		cbnz	r3, .L29
 379              		.loc 1 393 0 discriminator 2
 380 01f4 254B     		ldr	r3, .L63+4
 381 01f6 93F90230 		ldrsb	r3, [r3, #2]
 382 01fa 002B     		cmp	r3, #0
 383 01fc 10DB     		blt	.L29
 394:protocol.c    ****         // Hold complete. Set to indicate ready to resume.  Remain in HOLD or DOOR states until use
 395:protocol.c    ****         // has issued a resume command or reset.
 396:protocol.c    ****         plan_cycle_reinitialize();
 384              		.loc 1 396 0 is_stmt 1
 385 01fe FFF7FEFF 		bl	plan_cycle_reinitialize
 386              	.LVL20:
 397:protocol.c    ****         if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 387              		.loc 1 397 0
 388 0202 224B     		ldr	r3, .L63+4
 389 0204 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 390 0206 13F0020F 		tst	r3, #2
 391 020a 04D0     		beq	.L30
 392              		.loc 1 397 0 is_stmt 0 discriminator 1
 393 020c 1F49     		ldr	r1, .L63+4
 394 020e 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 395 0210 42F00102 		orr	r2, r2, #1
 396 0214 8A70     		strb	r2, [r1, #2]
 397              	.L30:
 398:protocol.c    ****         bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 398              		.loc 1 398 0 is_stmt 1
 399 0216 23F00603 		bic	r3, r3, #6
 400 021a 1C4A     		ldr	r2, .L63+4
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 15


 401 021c 1371     		strb	r3, [r2, #4]
 402 021e 21E0     		b	.L31
 403              	.L29:
 399:protocol.c    ****       } else {
 400:protocol.c    ****         // Motion complete. Includes CYCLE/JOG/HOMING states and jog cancel/motion cancel/soft limi
 401:protocol.c    ****         // NOTE: Motion and jog cancel both immediately return to idle after the hold completes.
 402:protocol.c    ****         if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positio
 404              		.loc 1 402 0
 405 0220 1A4B     		ldr	r3, .L63+4
 406 0222 93F90230 		ldrsb	r3, [r3, #2]
 407 0226 002B     		cmp	r3, #0
 408 0228 0ADA     		bge	.L32
 403:protocol.c    ****           sys.step_control = STEP_CONTROL_NORMAL_OP;
 409              		.loc 1 403 0
 410 022a 0022     		movs	r2, #0
 411 022c 174B     		ldr	r3, .L63+4
 412 022e 1A71     		strb	r2, [r3, #4]
 404:protocol.c    ****           plan_reset();
 413              		.loc 1 404 0
 414 0230 FFF7FEFF 		bl	plan_reset
 415              	.LVL21:
 405:protocol.c    ****           st_reset();
 416              		.loc 1 405 0
 417 0234 FFF7FEFF 		bl	st_reset
 418              	.LVL22:
 406:protocol.c    ****           gc_sync_position();
 419              		.loc 1 406 0
 420 0238 FFF7FEFF 		bl	gc_sync_position
 421              	.LVL23:
 407:protocol.c    ****           plan_sync_position();
 422              		.loc 1 407 0
 423 023c FFF7FEFF 		bl	plan_sync_position
 424              	.LVL24:
 425              	.L32:
 408:protocol.c    ****         }
 409:protocol.c    ****         if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during 
 426              		.loc 1 409 0
 427 0240 124B     		ldr	r3, .L63+4
 428 0242 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 429 0244 13F0200F 		tst	r3, #32
 430 0248 08D0     		beq	.L33
 410:protocol.c    ****           sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 431              		.loc 1 410 0
 432 024a 03F07F03 		and	r3, r3, #127
 433 024e 0F4A     		ldr	r2, .L63+4
 411:protocol.c    ****           sys.suspend |= SUSPEND_HOLD_COMPLETE;
 434              		.loc 1 411 0
 435 0250 43F00103 		orr	r3, r3, #1
 436 0254 9370     		strb	r3, [r2, #2]
 412:protocol.c    ****           sys.state = STATE_SAFETY_DOOR;
 437              		.loc 1 412 0
 438 0256 4023     		movs	r3, #64
 439 0258 1370     		strb	r3, [r2]
 440 025a 03E0     		b	.L31
 441              	.L33:
 413:protocol.c    ****         } else {
 414:protocol.c    ****           sys.suspend = SUSPEND_DISABLE;
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 16


 442              		.loc 1 414 0
 443 025c 0B4B     		ldr	r3, .L63+4
 444 025e 0022     		movs	r2, #0
 445 0260 9A70     		strb	r2, [r3, #2]
 415:protocol.c    ****           sys.state = STATE_IDLE;
 446              		.loc 1 415 0
 447 0262 1A70     		strb	r2, [r3]
 448              	.L31:
 416:protocol.c    ****         }
 417:protocol.c    ****       }
 418:protocol.c    ****       system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 449              		.loc 1 418 0
 450 0264 0420     		movs	r0, #4
 451 0266 FFF7FEFF 		bl	system_clear_exec_state_flag
 452              	.LVL25:
 453              	.L8:
 419:protocol.c    ****     }
 420:protocol.c    ****   }
 421:protocol.c    **** 
 422:protocol.c    ****   // Execute overrides.
 423:protocol.c    ****   rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 454              		.loc 1 423 0
 455 026a 0A4B     		ldr	r3, .L63+12
 456 026c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 457              	.LVL26:
 424:protocol.c    ****   if (rt_exec) {
 458              		.loc 1 424 0
 459 026e 03F0FF04 		and	r4, r3, #255
 460 0272 002B     		cmp	r3, #0
 461 0274 48D0     		beq	.L34
 462              	.LBB2:
 425:protocol.c    ****     system_clear_exec_motion_overrides(); // Clear all motion override flags.
 463              		.loc 1 425 0
 464 0276 FFF7FEFF 		bl	system_clear_exec_motion_overrides
 465              	.LVL27:
 426:protocol.c    **** 
 427:protocol.c    ****     uint8_t new_f_override =  sys.f_override;
 466              		.loc 1 427 0
 467 027a 044B     		ldr	r3, .L63+4
 468 027c DA79     		ldrb	r2, [r3, #7]	@ zero_extendqisi2
 469              	.LVL28:
 428:protocol.c    ****     if (rt_exec & EXEC_FEED_OVR_RESET) { new_f_override = DEFAULT_FEED_OVERRIDE; }
 470              		.loc 1 428 0
 471 027e 14F0010F 		tst	r4, #1
 472 0282 09D1     		bne	.L57
 427:protocol.c    ****     if (rt_exec & EXEC_FEED_OVR_RESET) { new_f_override = DEFAULT_FEED_OVERRIDE; }
 473              		.loc 1 427 0
 474 0284 1346     		mov	r3, r2
 475 0286 08E0     		b	.L35
 476              	.L64:
 477              		.align	2
 478              	.L63:
 479 0288 00000000 		.word	sys_rt_exec_alarm
 480 028c 00000000 		.word	sys
 481 0290 00000000 		.word	sys_rt_exec_state
 482 0294 00000000 		.word	sys_rt_exec_motion_override
 483              	.L57:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 17


 484              		.loc 1 428 0
 485 0298 6423     		movs	r3, #100
 486              	.L35:
 487              	.LVL29:
 429:protocol.c    ****     if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 488              		.loc 1 429 0
 489 029a 14F0020F 		tst	r4, #2
 490 029e 01D0     		beq	.L36
 491              		.loc 1 429 0 is_stmt 0 discriminator 1
 492 02a0 0A33     		adds	r3, r3, #10
 493              	.LVL30:
 494 02a2 DBB2     		uxtb	r3, r3
 495              	.LVL31:
 496              	.L36:
 430:protocol.c    ****     if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 497              		.loc 1 430 0 is_stmt 1
 498 02a4 14F0040F 		tst	r4, #4
 499 02a8 01D0     		beq	.L37
 500              		.loc 1 430 0 is_stmt 0 discriminator 1
 501 02aa 0A3B     		subs	r3, r3, #10
 502              	.LVL32:
 503 02ac DBB2     		uxtb	r3, r3
 504              	.LVL33:
 505              	.L37:
 431:protocol.c    ****     if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 506              		.loc 1 431 0 is_stmt 1
 507 02ae 14F0080F 		tst	r4, #8
 508 02b2 01D0     		beq	.L38
 509              		.loc 1 431 0 is_stmt 0 discriminator 1
 510 02b4 0133     		adds	r3, r3, #1
 511              	.LVL34:
 512 02b6 DBB2     		uxtb	r3, r3
 513              	.LVL35:
 514              	.L38:
 432:protocol.c    ****     if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 515              		.loc 1 432 0 is_stmt 1
 516 02b8 14F0100F 		tst	r4, #16
 517 02bc 01D0     		beq	.L39
 518              		.loc 1 432 0 is_stmt 0 discriminator 1
 519 02be 013B     		subs	r3, r3, #1
 520              	.LVL36:
 521 02c0 DBB2     		uxtb	r3, r3
 522              	.LVL37:
 523              	.L39:
 433:protocol.c    ****     new_f_override = min(new_f_override,MAX_FEED_RATE_OVERRIDE);
 434:protocol.c    ****     new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 524              		.loc 1 434 0 is_stmt 1
 525 02c2 C82B     		cmp	r3, #200
 526 02c4 28BF     		it	cs
 527 02c6 C823     		movcs	r3, #200
 528              	.LVL38:
 529 02c8 0A2B     		cmp	r3, #10
 530 02ca 38BF     		it	cc
 531 02cc 0A23     		movcc	r3, #10
 532              	.LVL39:
 435:protocol.c    **** 
 436:protocol.c    ****     uint8_t new_r_override = sys.r_override;
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 18


 533              		.loc 1 436 0
 534 02ce 4849     		ldr	r1, .L65
 535 02d0 087A     		ldrb	r0, [r1, #8]	@ zero_extendqisi2
 536              	.LVL40:
 437:protocol.c    ****     if (rt_exec & EXEC_RAPID_OVR_RESET) { new_r_override = DEFAULT_RAPID_OVERRIDE; }
 537              		.loc 1 437 0
 538 02d2 14F0200F 		tst	r4, #32
 539 02d6 01D1     		bne	.L58
 436:protocol.c    ****     if (rt_exec & EXEC_RAPID_OVR_RESET) { new_r_override = DEFAULT_RAPID_OVERRIDE; }
 540              		.loc 1 436 0
 541 02d8 0146     		mov	r1, r0
 542 02da 00E0     		b	.L40
 543              	.L58:
 544              		.loc 1 437 0
 545 02dc 6421     		movs	r1, #100
 546              	.L40:
 547              	.LVL41:
 438:protocol.c    ****     if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 548              		.loc 1 438 0
 549 02de 14F0400F 		tst	r4, #64
 550 02e2 00D0     		beq	.L41
 551 02e4 3221     		movs	r1, #50
 552              	.LVL42:
 553              	.L41:
 439:protocol.c    ****     if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 554              		.loc 1 439 0
 555 02e6 14F0800F 		tst	r4, #128
 556 02ea 00D0     		beq	.L42
 557 02ec 1921     		movs	r1, #25
 558              	.LVL43:
 559              	.L42:
 440:protocol.c    **** 
 441:protocol.c    ****     if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 560              		.loc 1 441 0
 561 02ee 9A42     		cmp	r2, r3
 562 02f0 01D1     		bne	.L43
 563              		.loc 1 441 0 is_stmt 0 discriminator 1
 564 02f2 8142     		cmp	r1, r0
 565 02f4 08D0     		beq	.L34
 566              	.L43:
 442:protocol.c    ****       sys.f_override = new_f_override;
 567              		.loc 1 442 0 is_stmt 1
 568 02f6 3E4A     		ldr	r2, .L65
 569 02f8 D371     		strb	r3, [r2, #7]
 443:protocol.c    ****       sys.r_override = new_r_override;
 570              		.loc 1 443 0
 571 02fa 1172     		strb	r1, [r2, #8]
 444:protocol.c    ****       sys.report_ovr_counter = 0; // Set to report change immediately
 572              		.loc 1 444 0
 573 02fc 0023     		movs	r3, #0
 574              	.LVL44:
 575 02fe D372     		strb	r3, [r2, #11]
 445:protocol.c    ****       plan_update_velocity_profile_parameters();
 576              		.loc 1 445 0
 577 0300 FFF7FEFF 		bl	plan_update_velocity_profile_parameters
 578              	.LVL45:
 446:protocol.c    ****       plan_cycle_reinitialize();
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 19


 579              		.loc 1 446 0
 580 0304 FFF7FEFF 		bl	plan_cycle_reinitialize
 581              	.LVL46:
 582              	.L34:
 583              	.LBE2:
 447:protocol.c    ****     }
 448:protocol.c    ****   }
 449:protocol.c    **** 
 450:protocol.c    ****   rt_exec = sys_rt_exec_accessory_override;
 584              		.loc 1 450 0
 585 0308 3A4B     		ldr	r3, .L65+4
 586 030a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 587              	.LVL47:
 451:protocol.c    ****   if (rt_exec) {
 588              		.loc 1 451 0
 589 030c 03F0FF04 		and	r4, r3, #255
 590 0310 002B     		cmp	r3, #0
 591 0312 5AD0     		beq	.L44
 592              	.LBB3:
 452:protocol.c    ****     system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 593              		.loc 1 452 0
 594 0314 FFF7FEFF 		bl	system_clear_exec_accessory_overrides
 595              	.LVL48:
 453:protocol.c    **** 
 454:protocol.c    ****     // NOTE: Unlike motion overrides, spindle overrides do not require a planner reinitialization.
 455:protocol.c    ****     uint8_t last_s_override =  sys.spindle_speed_ovr;
 596              		.loc 1 455 0
 597 0318 354B     		ldr	r3, .L65
 598 031a 5A7A     		ldrb	r2, [r3, #9]	@ zero_extendqisi2
 599              	.LVL49:
 456:protocol.c    ****     if (rt_exec & EXEC_SPINDLE_OVR_RESET) { last_s_override = DEFAULT_SPINDLE_SPEED_OVERRIDE; }
 600              		.loc 1 456 0
 601 031c 14F0010F 		tst	r4, #1
 602 0320 01D1     		bne	.L61
 455:protocol.c    ****     if (rt_exec & EXEC_SPINDLE_OVR_RESET) { last_s_override = DEFAULT_SPINDLE_SPEED_OVERRIDE; }
 603              		.loc 1 455 0
 604 0322 1346     		mov	r3, r2
 605 0324 00E0     		b	.L45
 606              	.L61:
 607              		.loc 1 456 0
 608 0326 6423     		movs	r3, #100
 609              	.L45:
 610              	.LVL50:
 457:protocol.c    ****     if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREM
 611              		.loc 1 457 0
 612 0328 14F0020F 		tst	r4, #2
 613 032c 01D0     		beq	.L46
 614              		.loc 1 457 0 is_stmt 0 discriminator 1
 615 032e 0A33     		adds	r3, r3, #10
 616              	.LVL51:
 617 0330 DBB2     		uxtb	r3, r3
 618              	.LVL52:
 619              	.L46:
 458:protocol.c    ****     if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCRE
 620              		.loc 1 458 0 is_stmt 1
 621 0332 14F0040F 		tst	r4, #4
 622 0336 01D0     		beq	.L47
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 20


 623              		.loc 1 458 0 is_stmt 0 discriminator 1
 624 0338 0A3B     		subs	r3, r3, #10
 625              	.LVL53:
 626 033a DBB2     		uxtb	r3, r3
 627              	.LVL54:
 628              	.L47:
 459:protocol.c    ****     if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT;
 629              		.loc 1 459 0 is_stmt 1
 630 033c 14F0080F 		tst	r4, #8
 631 0340 01D0     		beq	.L48
 632              		.loc 1 459 0 is_stmt 0 discriminator 1
 633 0342 0133     		adds	r3, r3, #1
 634              	.LVL55:
 635 0344 DBB2     		uxtb	r3, r3
 636              	.LVL56:
 637              	.L48:
 460:protocol.c    ****     if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT
 638              		.loc 1 460 0 is_stmt 1
 639 0346 14F0100F 		tst	r4, #16
 640 034a 01D0     		beq	.L49
 641              		.loc 1 460 0 is_stmt 0 discriminator 1
 642 034c 013B     		subs	r3, r3, #1
 643              	.LVL57:
 644 034e DBB2     		uxtb	r3, r3
 645              	.LVL58:
 646              	.L49:
 461:protocol.c    ****     last_s_override = min(last_s_override,MAX_SPINDLE_SPEED_OVERRIDE);
 462:protocol.c    ****     last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 647              		.loc 1 462 0 is_stmt 1
 648 0350 C82B     		cmp	r3, #200
 649 0352 28BF     		it	cs
 650 0354 C823     		movcs	r3, #200
 651              	.LVL59:
 652 0356 0A2B     		cmp	r3, #10
 653 0358 38BF     		it	cc
 654 035a 0A23     		movcc	r3, #10
 655              	.LVL60:
 463:protocol.c    **** 
 464:protocol.c    ****     if (last_s_override != sys.spindle_speed_ovr) {
 656              		.loc 1 464 0
 657 035c 9A42     		cmp	r2, r3
 658 035e 07D0     		beq	.L50
 465:protocol.c    ****       bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 659              		.loc 1 465 0
 660 0360 234A     		ldr	r2, .L65
 661 0362 1179     		ldrb	r1, [r2, #4]	@ zero_extendqisi2
 662 0364 41F00801 		orr	r1, r1, #8
 663 0368 1171     		strb	r1, [r2, #4]
 466:protocol.c    ****       sys.spindle_speed_ovr = last_s_override;
 664              		.loc 1 466 0
 665 036a 5372     		strb	r3, [r2, #9]
 467:protocol.c    ****       sys.report_ovr_counter = 0; // Set to report change immediately
 666              		.loc 1 467 0
 667 036c 0023     		movs	r3, #0
 668              	.LVL61:
 669 036e D372     		strb	r3, [r2, #11]
 670              	.LVL62:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 21


 671              	.L50:
 468:protocol.c    ****     }
 469:protocol.c    **** 
 470:protocol.c    ****     if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 672              		.loc 1 470 0
 673 0370 14F0200F 		tst	r4, #32
 674 0374 11D0     		beq	.L51
 471:protocol.c    ****       // Spindle stop override allowed only while in HOLD state.
 472:protocol.c    ****       // NOTE: Report counters are set in spindle_set_state() when spindle stop is executed.
 473:protocol.c    ****       if (sys.state == STATE_HOLD) {
 675              		.loc 1 473 0
 676 0376 1E4B     		ldr	r3, .L65
 677 0378 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 678 037a 102B     		cmp	r3, #16
 679 037c 0DD1     		bne	.L51
 474:protocol.c    ****         if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 680              		.loc 1 474 0
 681 037e 1C4B     		ldr	r3, .L65
 682 0380 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 683 0382 1BB9     		cbnz	r3, .L52
 684              		.loc 1 474 0 is_stmt 0 discriminator 1
 685 0384 0222     		movs	r2, #2
 686 0386 1A4B     		ldr	r3, .L65
 687 0388 9A72     		strb	r2, [r3, #10]
 688 038a 06E0     		b	.L51
 689              	.L52:
 475:protocol.c    ****         else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE
 690              		.loc 1 475 0 is_stmt 1
 691 038c 13F0010F 		tst	r3, #1
 692 0390 03D0     		beq	.L51
 693              		.loc 1 475 0 is_stmt 0 discriminator 1
 694 0392 43F00403 		orr	r3, r3, #4
 695 0396 164A     		ldr	r2, .L65
 696 0398 9372     		strb	r3, [r2, #10]
 697              	.L51:
 476:protocol.c    ****       }
 477:protocol.c    ****     }
 478:protocol.c    **** 
 479:protocol.c    ****     // NOTE: Since coolant state always performs a planner sync whenever it changes, the current
 480:protocol.c    ****     // run state can be determined by checking the parser state.
 481:protocol.c    ****     if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 698              		.loc 1 481 0 is_stmt 1
 699 039a 14F0C00F 		tst	r4, #192
 700 039e 14D0     		beq	.L44
 482:protocol.c    ****       if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 701              		.loc 1 482 0
 702 03a0 134B     		ldr	r3, .L65
 703 03a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 704 03a4 13B1     		cbz	r3, .L53
 705              		.loc 1 482 0 is_stmt 0 discriminator 1
 706 03a6 13F0180F 		tst	r3, #24
 707 03aa 0ED0     		beq	.L44
 708              	.L53:
 709              	.LBB4:
 483:protocol.c    ****         uint8_t coolant_state = gc_state.modal.coolant;
 710              		.loc 1 483 0 is_stmt 1
 711 03ac 124B     		ldr	r3, .L65+8
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 22


 712 03ae 1C7A     		ldrb	r4, [r3, #8]	@ zero_extendqisi2
 713              	.LVL63:
 484:protocol.c    ****         #ifdef ENABLE_M7
 485:protocol.c    ****           if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 486:protocol.c    ****             if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE)
 487:protocol.c    ****             else { coolant_state |= COOLANT_MIST_ENABLE; }
 488:protocol.c    ****           }
 489:protocol.c    ****           if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 490:protocol.c    ****             if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABL
 491:protocol.c    ****             else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 492:protocol.c    ****           }
 493:protocol.c    ****         #else
 494:protocol.c    ****           if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE)
 714              		.loc 1 494 0
 715 03b0 14F0400F 		tst	r4, #64
 716 03b4 02D0     		beq	.L54
 717              		.loc 1 494 0 is_stmt 0 discriminator 1
 718 03b6 04F0BF04 		and	r4, r4, #191
 719              	.LVL64:
 720 03ba 01E0     		b	.L55
 721              	.L54:
 495:protocol.c    ****           else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 722              		.loc 1 495 0 is_stmt 1
 723 03bc 44F04004 		orr	r4, r4, #64
 724              	.LVL65:
 725              	.L55:
 496:protocol.c    ****         #endif
 497:protocol.c    ****         coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 726              		.loc 1 497 0
 727 03c0 2046     		mov	r0, r4
 728 03c2 FFF7FEFF 		bl	coolant_set_state
 729              	.LVL66:
 498:protocol.c    ****         gc_state.modal.coolant = coolant_state;
 730              		.loc 1 498 0
 731 03c6 0C4B     		ldr	r3, .L65+8
 732 03c8 1C72     		strb	r4, [r3, #8]
 733              	.LVL67:
 734              	.L44:
 735              	.LBE4:
 736              	.LBE3:
 499:protocol.c    ****       }
 500:protocol.c    ****     }
 501:protocol.c    ****     
 502:protocol.c    ****    
 503:protocol.c    ****     
 504:protocol.c    ****   }
 505:protocol.c    **** 
 506:protocol.c    ****   #ifdef DEBUG
 507:protocol.c    ****     if (sys_rt_exec_debug) {
 737              		.loc 1 507 0
 738 03ca 0C4B     		ldr	r3, .L65+12
 739 03cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 740 03ce 13F0FF0F 		tst	r3, #255
 741 03d2 04D0     		beq	.L56
 508:protocol.c    ****       report_realtime_debug();
 742              		.loc 1 508 0
 743 03d4 FFF7FEFF 		bl	report_realtime_debug
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 23


 744              	.LVL68:
 509:protocol.c    ****       sys_rt_exec_debug = 0;
 745              		.loc 1 509 0
 746 03d8 0022     		movs	r2, #0
 747 03da 084B     		ldr	r3, .L65+12
 748 03dc 1A70     		strb	r2, [r3]
 749              	.L56:
 510:protocol.c    ****     }
 511:protocol.c    ****   #endif
 512:protocol.c    **** 
 513:protocol.c    ****   // Reload step segment buffer
 514:protocol.c    ****   if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE
 750              		.loc 1 514 0
 751 03de 044B     		ldr	r3, .L65
 752 03e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 753 03e2 13F0FC0F 		tst	r3, #252
 754 03e6 01D0     		beq	.L4
 515:protocol.c    ****     st_prep_buffer();
 755              		.loc 1 515 0
 756 03e8 FFF7FEFF 		bl	st_prep_buffer
 757              	.LVL69:
 758              	.L4:
 759 03ec 10BD     		pop	{r4, pc}
 760              	.L66:
 761 03ee 00BF     		.align	2
 762              	.L65:
 763 03f0 00000000 		.word	sys
 764 03f4 00000000 		.word	sys_rt_exec_accessory_override
 765 03f8 00000000 		.word	gc_state
 766 03fc 00000000 		.word	sys_rt_exec_debug
 767              		.cfi_endproc
 768              	.LFE67:
 769              		.size	protocol_exec_rt_system, .-protocol_exec_rt_system
 770              		.section	.text.protocol_exec_rt_suspend,"ax",%progbits
 771              		.align	2
 772              		.thumb
 773              		.thumb_func
 774              		.type	protocol_exec_rt_suspend, %function
 775              	protocol_exec_rt_suspend:
 776              	.LFB68:
 516:protocol.c    ****   }
 517:protocol.c    **** 
 518:protocol.c    **** }
 519:protocol.c    **** 
 520:protocol.c    **** 
 521:protocol.c    **** // Handles Grbl system suspend procedures, such as feed hold, safety door, and parking motion.
 522:protocol.c    **** // The system will enter this loop, create local variables for suspend tasks, and return to
 523:protocol.c    **** // whatever function that invoked the suspend, such that Grbl resumes normal operation.
 524:protocol.c    **** // This function is written in a way to promote custom parking motions. Simply use this as a
 525:protocol.c    **** // template
 526:protocol.c    **** static void protocol_exec_rt_suspend()
 527:protocol.c    **** {
 777              		.loc 1 527 0
 778              		.cfi_startproc
 779              		@ args = 0, pretend = 0, frame = 0
 780              		@ frame_needed = 0, uses_anonymous_args = 0
 781 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 24


 782              		.cfi_def_cfa_offset 24
 783              		.cfi_offset 3, -24
 784              		.cfi_offset 4, -20
 785              		.cfi_offset 5, -16
 786              		.cfi_offset 6, -12
 787              		.cfi_offset 7, -8
 788              		.cfi_offset 14, -4
 528:protocol.c    ****   #ifdef PARKING_ENABLE
 529:protocol.c    ****     // Declare and initialize parking local variables
 530:protocol.c    ****     float restore_target[N_AXIS];
 531:protocol.c    ****     float parking_target[N_AXIS];
 532:protocol.c    ****     float retract_waypoint = PARKING_PULLOUT_INCREMENT;
 533:protocol.c    ****     plan_line_data_t plan_data;
 534:protocol.c    ****     plan_line_data_t *pl_data = &plan_data;
 535:protocol.c    ****     memset(pl_data,0,sizeof(plan_line_data_t));
 536:protocol.c    ****     pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 537:protocol.c    ****     #ifdef USE_LINE_NUMBERS
 538:protocol.c    ****       pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
 539:protocol.c    ****     #endif
 540:protocol.c    ****   #endif
 541:protocol.c    **** 
 542:protocol.c    ****   plan_block_t *block = plan_get_current_block();
 789              		.loc 1 542 0
 790 0002 FFF7FEFF 		bl	plan_get_current_block
 791              	.LVL70:
 543:protocol.c    ****   uint8_t restore_condition;
 544:protocol.c    ****   #ifdef VARIABLE_SPINDLE
 545:protocol.c    ****     float restore_spindle_speed;
 546:protocol.c    ****     if (block == NULL) {
 792              		.loc 1 546 0
 793 0006 28B9     		cbnz	r0, .L68
 547:protocol.c    ****       restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 794              		.loc 1 547 0
 795 0008 734B     		ldr	r3, .L91
 796 000a 5C7A     		ldrb	r4, [r3, #9]	@ zero_extendqisi2
 797 000c 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 798 000e 1443     		orrs	r4, r4, r2
 799              	.LVL71:
 548:protocol.c    ****       restore_spindle_speed = gc_state.spindle_speed;
 800              		.loc 1 548 0
 801 0010 DD68     		ldr	r5, [r3, #12]	@ float
 802              	.LVL72:
 803 0012 01E0     		b	.L69
 804              	.LVL73:
 805              	.L68:
 549:protocol.c    ****     } else {
 550:protocol.c    ****       restore_condition = block->condition;
 806              		.loc 1 550 0
 807 0014 447C     		ldrb	r4, [r0, #17]	@ zero_extendqisi2
 808              	.LVL74:
 551:protocol.c    ****       restore_spindle_speed = block->spindle_speed;
 809              		.loc 1 551 0
 810 0016 056B     		ldr	r5, [r0, #48]	@ float
 811              	.LVL75:
 812              	.L69:
 552:protocol.c    ****     }
 553:protocol.c    ****     #ifdef DISABLE_LASER_DURING_HOLD
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 25


 554:protocol.c    ****       if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) { 
 813              		.loc 1 554 0
 814 0018 704B     		ldr	r3, .L91+4
 815 001a 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 816 001e 13F0020F 		tst	r3, #2
 817 0022 00F0D380 		beq	.L71
 555:protocol.c    ****         system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 818              		.loc 1 555 0
 819 0026 2020     		movs	r0, #32
 820              	.LVL76:
 821 0028 FFF7FEFF 		bl	system_set_exec_accessory_override_flag
 822              	.LVL77:
 823 002c CEE0     		b	.L71
 824              	.L89:
 556:protocol.c    ****       }
 557:protocol.c    ****     #endif
 558:protocol.c    ****   #else
 559:protocol.c    ****     if (block == NULL) { restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant); }
 560:protocol.c    ****     else { restore_condition = block->condition; }
 561:protocol.c    ****   #endif
 562:protocol.c    **** 
 563:protocol.c    ****   while (sys.suspend) {
 564:protocol.c    **** 
 565:protocol.c    ****     if (sys.abort) { return; }
 825              		.loc 1 565 0
 826 002e 6C4A     		ldr	r2, .L91+8
 827 0030 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 828 0032 002A     		cmp	r2, #0
 829 0034 40F0CF80 		bne	.L67
 566:protocol.c    **** 
 567:protocol.c    ****     // Block until initial hold is complete and the machine has stopped motion.
 568:protocol.c    ****     if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 830              		.loc 1 568 0
 831 0038 13F0010F 		tst	r3, #1
 832 003c 00F0C480 		beq	.L73
 569:protocol.c    **** 
 570:protocol.c    ****       // Parking manager. Handles de/re-energizing, switch state checks, and parking motions for 
 571:protocol.c    ****       // the safety door and sleep states.
 572:protocol.c    ****       if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 833              		.loc 1 572 0
 834 0040 674A     		ldr	r2, .L91+8
 835 0042 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 836 0044 12F0C00F 		tst	r2, #192
 837 0048 73D0     		beq	.L74
 573:protocol.c    ****       
 574:protocol.c    ****         // Handles retraction motions and de-energizing.
 575:protocol.c    ****         if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 838              		.loc 1 575 0
 839 004a 13F0040F 		tst	r3, #4
 840 004e 10D1     		bne	.L75
 576:protocol.c    **** 
 577:protocol.c    ****           // Ensure any prior spindle stop override is disabled at start of safety door routine.
 578:protocol.c    ****           sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 841              		.loc 1 578 0
 842 0050 634E     		ldr	r6, .L91+8
 843 0052 0027     		movs	r7, #0
 844 0054 B772     		strb	r7, [r6, #10]
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 26


 579:protocol.c    **** 
 580:protocol.c    ****           #ifndef PARKING_ENABLE
 581:protocol.c    **** 
 582:protocol.c    ****             spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 845              		.loc 1 582 0
 846 0056 3846     		mov	r0, r7
 847 0058 0021     		movs	r1, #0
 848 005a FFF7FEFF 		bl	spindle_set_state
 849              	.LVL78:
 583:protocol.c    ****             coolant_set_state(COOLANT_DISABLE);     // De-energize
 850              		.loc 1 583 0
 851 005e 3846     		mov	r0, r7
 852 0060 FFF7FEFF 		bl	coolant_set_state
 853              	.LVL79:
 584:protocol.c    **** 
 585:protocol.c    ****           #else
 586:protocol.c    **** 					
 587:protocol.c    ****             // Get current position and store restore location and spindle retract waypoint.
 588:protocol.c    ****             system_convert_array_steps_to_mpos(parking_target,sys_position);
 589:protocol.c    ****             if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 590:protocol.c    ****               memcpy(restore_target,parking_target,sizeof(parking_target));
 591:protocol.c    ****               retract_waypoint += restore_target[PARKING_AXIS];
 592:protocol.c    ****               retract_waypoint = min(retract_waypoint,PARKING_TARGET);
 593:protocol.c    ****             }
 594:protocol.c    **** 
 595:protocol.c    ****             // Execute slow pull-out parking retract motion. Parking requires homing enabled, the
 596:protocol.c    ****             // current location not exceeding the parking target location, and laser mode disabled.
 597:protocol.c    ****             // NOTE: State is will remain DOOR, until the de-energizing and retract is complete.
 598:protocol.c    ****             if ((bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) &&
 599:protocol.c    ****                             (parking_target[PARKING_AXIS] < PARKING_TARGET) &&
 600:protocol.c    ****                             bit_isfalse(settings.flags,BITFLAG_LASER_MODE)) {
 601:protocol.c    **** 
 602:protocol.c    ****               // Retract spindle by pullout distance. Ensure retraction motion moves away from
 603:protocol.c    ****               // the workpiece and waypoint motion doesn't exceed the parking target location.
 604:protocol.c    ****               if (parking_target[PARKING_AXIS] < retract_waypoint) {
 605:protocol.c    ****                 parking_target[PARKING_AXIS] = retract_waypoint;
 606:protocol.c    ****                 pl_data->feed_rate = PARKING_PULLOUT_RATE;
 607:protocol.c    ****                 pl_data->condition |= (restore_condition & PL_COND_ACCESSORY_MASK); // Retain acces
 608:protocol.c    ****                 pl_data->spindle_speed = restore_spindle_speed;
 609:protocol.c    ****                 mc_parking_motion(parking_target, pl_data);
 610:protocol.c    ****               }
 611:protocol.c    **** 
 612:protocol.c    ****               // NOTE: Clear accessory state after retract and after an aborted restore motion.
 613:protocol.c    ****               pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 614:protocol.c    ****               pl_data->spindle_speed = 0.0;
 615:protocol.c    ****               spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 616:protocol.c    ****               coolant_set_state(COOLANT_DISABLE); // De-energize
 617:protocol.c    **** 
 618:protocol.c    ****               // Execute fast parking retract motion to parking target location.
 619:protocol.c    ****               if (parking_target[PARKING_AXIS] < PARKING_TARGET) {
 620:protocol.c    ****                 parking_target[PARKING_AXIS] = PARKING_TARGET;
 621:protocol.c    ****                 pl_data->feed_rate = PARKING_RATE;
 622:protocol.c    ****                 mc_parking_motion(parking_target, pl_data);
 623:protocol.c    ****               }
 624:protocol.c    **** 
 625:protocol.c    ****             } else {
 626:protocol.c    **** 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 27


 627:protocol.c    ****               // Parking motion not possible. Just disable the spindle and coolant.
 628:protocol.c    ****               // NOTE: Laser mode does not start a parking motion to ensure the laser stops immedia
 629:protocol.c    ****               spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 630:protocol.c    ****               coolant_set_state(COOLANT_DISABLE);     // De-energize
 631:protocol.c    **** 
 632:protocol.c    ****             }
 633:protocol.c    **** 
 634:protocol.c    ****           #endif
 635:protocol.c    **** 
 636:protocol.c    ****           sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 854              		.loc 1 636 0
 855 0064 B378     		ldrb	r3, [r6, #2]	@ zero_extendqisi2
 856 0066 03F0FD03 		and	r3, r3, #253
 637:protocol.c    ****           sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 857              		.loc 1 637 0
 858 006a 43F00403 		orr	r3, r3, #4
 859 006e B370     		strb	r3, [r6, #2]
 860 0070 AAE0     		b	.L73
 861              	.L75:
 638:protocol.c    **** 
 639:protocol.c    ****         } else {
 640:protocol.c    **** 
 641:protocol.c    ****           
 642:protocol.c    ****           if (sys.state == STATE_SLEEP) {
 862              		.loc 1 642 0
 863 0072 802A     		cmp	r2, #128
 864 0074 13D1     		bne	.L76
 643:protocol.c    ****             report_feedback_message(MESSAGE_SLEEP_MODE);
 865              		.loc 1 643 0
 866 0076 0B20     		movs	r0, #11
 867 0078 FFF7FEFF 		bl	report_feedback_message
 868              	.LVL80:
 644:protocol.c    ****             // Spindle and coolant should already be stopped, but do it again just to be sure.
 645:protocol.c    ****             spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 869              		.loc 1 645 0
 870 007c 0020     		movs	r0, #0
 871 007e 0021     		movs	r1, #0
 872 0080 FFF7FEFF 		bl	spindle_set_state
 873              	.LVL81:
 646:protocol.c    ****             coolant_set_state(COOLANT_DISABLE); // De-energize
 874              		.loc 1 646 0
 875 0084 0020     		movs	r0, #0
 876 0086 FFF7FEFF 		bl	coolant_set_state
 877              	.LVL82:
 647:protocol.c    ****             st_go_idle(); // Disable steppers
 878              		.loc 1 647 0
 879 008a FFF7FEFF 		bl	st_go_idle
 880              	.LVL83:
 648:protocol.c    ****             while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 881              		.loc 1 648 0
 882 008e 01E0     		b	.L77
 883              	.L78:
 884              		.loc 1 648 0 is_stmt 0 discriminator 2
 885 0090 FFF7FEFF 		bl	protocol_exec_rt_system
 886              	.LVL84:
 887              	.L77:
 888              		.loc 1 648 0 discriminator 1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 28


 889 0094 524B     		ldr	r3, .L91+8
 890 0096 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 891 0098 002B     		cmp	r3, #0
 892 009a F9D0     		beq	.L78
 893 009c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 894              	.LVL85:
 895              	.L76:
 649:protocol.c    ****             return; // Abort received. Return to re-initialize.
 650:protocol.c    ****           }    
 651:protocol.c    ****           
 652:protocol.c    ****           // Allows resuming from parking/safety door. Actively checks if safety door is closed and
 653:protocol.c    ****           if (sys.state == STATE_SAFETY_DOOR) {
 896              		.loc 1 653 0 is_stmt 1
 897 009e 402A     		cmp	r2, #64
 898 00a0 07D1     		bne	.L79
 654:protocol.c    ****             if (!(system_check_safety_door_ajar())) {
 899              		.loc 1 654 0
 900 00a2 FFF7FEFF 		bl	system_check_safety_door_ajar
 901              	.LVL86:
 902 00a6 20B9     		cbnz	r0, .L79
 655:protocol.c    ****               sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready t
 903              		.loc 1 655 0
 904 00a8 4D4A     		ldr	r2, .L91+8
 905 00aa 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 906 00ac 23F02003 		bic	r3, r3, #32
 907 00b0 9370     		strb	r3, [r2, #2]
 908              	.L79:
 656:protocol.c    ****             }
 657:protocol.c    ****           }
 658:protocol.c    **** 
 659:protocol.c    ****           // Handles parking restore and safety door resume.
 660:protocol.c    ****           if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 909              		.loc 1 660 0
 910 00b2 4B4B     		ldr	r3, .L91+8
 911 00b4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 912 00b6 13F0080F 		tst	r3, #8
 913 00ba 00F08580 		beq	.L73
 661:protocol.c    **** 
 662:protocol.c    ****             #ifdef PARKING_ENABLE
 663:protocol.c    ****               // Execute fast restore motion to the pull-out position. Parking requires homing enab
 664:protocol.c    ****               // NOTE: State is will remain DOOR, until the de-energizing and retract is complete.
 665:protocol.c    ****               if ((settings.flags & (BITFLAG_HOMING_ENABLE|BITFLAG_LASER_MODE)) == BITFLAG_HOMING_E
 666:protocol.c    ****                 // Check to ensure the motion doesn't move below pull-out position.
 667:protocol.c    ****                 if (parking_target[PARKING_AXIS] <= PARKING_TARGET) {
 668:protocol.c    ****                   parking_target[PARKING_AXIS] = retract_waypoint;
 669:protocol.c    ****                   pl_data->feed_rate = PARKING_RATE;
 670:protocol.c    ****                   mc_parking_motion(parking_target, pl_data);
 671:protocol.c    ****                 }
 672:protocol.c    ****               }
 673:protocol.c    ****             #endif
 674:protocol.c    **** 
 675:protocol.c    ****             // Delayed Tasks: Restart spindle and coolant, delay to power-up, then resume cycle.
 676:protocol.c    ****             if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 914              		.loc 1 676 0
 915 00be 464A     		ldr	r2, .L91
 916 00c0 527A     		ldrb	r2, [r2, #9]	@ zero_extendqisi2
 917 00c2 C2B1     		cbz	r2, .L80
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 29


 677:protocol.c    ****               // Block if safety door re-opened during prior restore actions.
 678:protocol.c    ****               if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 918              		.loc 1 678 0
 919 00c4 13F0020F 		tst	r3, #2
 920 00c8 15D1     		bne	.L80
 679:protocol.c    ****                 if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 921              		.loc 1 679 0
 922 00ca 444B     		ldr	r3, .L91+4
 923 00cc 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 924 00d0 13F0020F 		tst	r3, #2
 925 00d4 05D0     		beq	.L81
 680:protocol.c    ****                   // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cy
 681:protocol.c    ****                   bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 926              		.loc 1 681 0
 927 00d6 424A     		ldr	r2, .L91+8
 928 00d8 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 929 00da 43F00803 		orr	r3, r3, #8
 930 00de 1371     		strb	r3, [r2, #4]
 931 00e0 09E0     		b	.L80
 932              	.L81:
 682:protocol.c    ****                 } else {
 683:protocol.c    ****                   spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SP
 933              		.loc 1 683 0
 934 00e2 04F03000 		and	r0, r4, #48
 935 00e6 2946     		mov	r1, r5
 936 00e8 FFF7FEFF 		bl	spindle_set_state
 937              	.LVL87:
 684:protocol.c    ****                   delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 938              		.loc 1 684 0
 939 00ec 4FF08140 		mov	r0, #1082130432
 940 00f0 0121     		movs	r1, #1
 941 00f2 FFF7FEFF 		bl	delay_sec
 942              	.LVL88:
 943              	.L80:
 685:protocol.c    ****                 }
 686:protocol.c    ****               }
 687:protocol.c    ****             }
 688:protocol.c    ****             if (gc_state.modal.coolant != COOLANT_DISABLE) {
 944              		.loc 1 688 0
 945 00f6 384B     		ldr	r3, .L91
 946 00f8 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 947 00fa 6BB1     		cbz	r3, .L82
 689:protocol.c    ****               // Block if safety door re-opened during prior restore actions.
 690:protocol.c    ****               if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 948              		.loc 1 690 0
 949 00fc 384B     		ldr	r3, .L91+8
 950 00fe 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 951 0100 13F0020F 		tst	r3, #2
 952 0104 08D1     		bne	.L82
 691:protocol.c    ****                 // NOTE: Laser mode will honor this delay. An exhaust system is often controlled by
 692:protocol.c    ****                 coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_C
 953              		.loc 1 692 0
 954 0106 04F04000 		and	r0, r4, #64
 955 010a FFF7FEFF 		bl	coolant_set_state
 956              	.LVL89:
 693:protocol.c    ****                 delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 957              		.loc 1 693 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 30


 958 010e 4FF07E50 		mov	r0, #1065353216
 959 0112 0121     		movs	r1, #1
 960 0114 FFF7FEFF 		bl	delay_sec
 961              	.LVL90:
 962              	.L82:
 694:protocol.c    ****               }
 695:protocol.c    ****             }
 696:protocol.c    **** 
 697:protocol.c    ****             #ifdef PARKING_ENABLE
 698:protocol.c    ****               // Execute slow plunge motion from pull-out position to resume position.
 699:protocol.c    ****               if ((settings.flags & (BITFLAG_HOMING_ENABLE|BITFLAG_LASER_MODE)) == BITFLAG_HOMING_E
 700:protocol.c    ****                 // Block if safety door re-opened during prior restore actions.
 701:protocol.c    ****                 if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 702:protocol.c    ****                   // Regardless if the retract parking motion was a valid/safe motion or not, the
 703:protocol.c    ****                   // restore parking motion should logically be valid, either by returning to the
 704:protocol.c    ****                   // original position through valid machine space or by not moving at all.
 705:protocol.c    ****                   pl_data->feed_rate = PARKING_PULLOUT_RATE;
 706:protocol.c    **** 									pl_data->condition |= (restore_condition & PL_COND_ACCESSORY_MASK); // Restore accessory s
 707:protocol.c    **** 									pl_data->spindle_speed = restore_spindle_speed;
 708:protocol.c    ****                   mc_parking_motion(restore_target, pl_data);
 709:protocol.c    ****                 }
 710:protocol.c    ****               }
 711:protocol.c    ****             #endif
 712:protocol.c    **** 
 713:protocol.c    ****             if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 963              		.loc 1 713 0
 964 0118 314B     		ldr	r3, .L91+8
 965 011a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 966 011c 13F0020F 		tst	r3, #2
 967 0120 52D1     		bne	.L73
 714:protocol.c    ****               sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 968              		.loc 1 714 0
 969 0122 43F01003 		orr	r3, r3, #16
 970 0126 2E4A     		ldr	r2, .L91+8
 971 0128 9370     		strb	r3, [r2, #2]
 715:protocol.c    ****               system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 972              		.loc 1 715 0
 973 012a 0220     		movs	r0, #2
 974 012c FFF7FEFF 		bl	system_set_exec_state_flag
 975              	.LVL91:
 976 0130 4AE0     		b	.L73
 977              	.L74:
 716:protocol.c    ****             }
 717:protocol.c    ****           }
 718:protocol.c    **** 
 719:protocol.c    ****         }
 720:protocol.c    **** 
 721:protocol.c    **** 
 722:protocol.c    ****       } else {
 723:protocol.c    **** 
 724:protocol.c    ****         // Feed hold manager. Controls spindle stop override states.
 725:protocol.c    ****         // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
 726:protocol.c    ****         if (sys.spindle_stop_ovr) {
 978              		.loc 1 726 0
 979 0132 2B4B     		ldr	r3, .L91+8
 980 0134 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 981 0136 002B     		cmp	r3, #0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 31


 982 0138 37D0     		beq	.L83
 727:protocol.c    ****           // Handles beginning of spindle stop
 728:protocol.c    ****           if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 983              		.loc 1 728 0
 984 013a 13F0020F 		tst	r3, #2
 985 013e 0ED0     		beq	.L84
 729:protocol.c    ****             if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 986              		.loc 1 729 0
 987 0140 254B     		ldr	r3, .L91
 988 0142 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 989 0144 3BB1     		cbz	r3, .L85
 730:protocol.c    ****               spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 990              		.loc 1 730 0
 991 0146 0020     		movs	r0, #0
 992 0148 0021     		movs	r1, #0
 993 014a FFF7FEFF 		bl	spindle_set_state
 994              	.LVL92:
 731:protocol.c    ****               sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enable
 995              		.loc 1 731 0
 996 014e 0122     		movs	r2, #1
 997 0150 234B     		ldr	r3, .L91+8
 998 0152 9A72     		strb	r2, [r3, #10]
 999 0154 38E0     		b	.L73
 1000              	.L85:
 732:protocol.c    ****             } else {
 733:protocol.c    ****               sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 1001              		.loc 1 733 0
 1002 0156 0022     		movs	r2, #0
 1003 0158 214B     		ldr	r3, .L91+8
 1004 015a 9A72     		strb	r2, [r3, #10]
 1005 015c 34E0     		b	.L73
 1006              	.L84:
 734:protocol.c    ****             }
 735:protocol.c    ****           // Handles restoring of spindle state
 736:protocol.c    ****           } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CY
 1007              		.loc 1 736 0
 1008 015e 13F00C0F 		tst	r3, #12
 1009 0162 31D0     		beq	.L73
 737:protocol.c    ****             if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 1010              		.loc 1 737 0
 1011 0164 1C4B     		ldr	r3, .L91
 1012 0166 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 1013 0168 9BB1     		cbz	r3, .L86
 738:protocol.c    ****               report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 1014              		.loc 1 738 0
 1015 016a 0A20     		movs	r0, #10
 1016 016c FFF7FEFF 		bl	report_feedback_message
 1017              	.LVL93:
 739:protocol.c    ****               if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 1018              		.loc 1 739 0
 1019 0170 1A4B     		ldr	r3, .L91+4
 1020 0172 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 1021 0176 13F0020F 		tst	r3, #2
 1022 017a 05D0     		beq	.L87
 740:protocol.c    ****                 // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycl
 741:protocol.c    ****                 bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 1023              		.loc 1 741 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 32


 1024 017c 184A     		ldr	r2, .L91+8
 1025 017e 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 1026 0180 43F00803 		orr	r3, r3, #8
 1027 0184 1371     		strb	r3, [r2, #4]
 1028 0186 04E0     		b	.L86
 1029              	.L87:
 742:protocol.c    ****               } else {
 743:protocol.c    ****                 spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPIN
 1030              		.loc 1 743 0
 1031 0188 04F03000 		and	r0, r4, #48
 1032 018c 2946     		mov	r1, r5
 1033 018e FFF7FEFF 		bl	spindle_set_state
 1034              	.LVL94:
 1035              	.L86:
 744:protocol.c    ****               }
 745:protocol.c    ****             }
 746:protocol.c    ****             if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 1036              		.loc 1 746 0
 1037 0192 134B     		ldr	r3, .L91+8
 1038 0194 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1039 0196 13F0080F 		tst	r3, #8
 1040 019a 02D0     		beq	.L88
 747:protocol.c    ****               system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 1041              		.loc 1 747 0
 1042 019c 0220     		movs	r0, #2
 1043 019e FFF7FEFF 		bl	system_set_exec_state_flag
 1044              	.LVL95:
 1045              	.L88:
 748:protocol.c    ****             }
 749:protocol.c    ****             sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 1046              		.loc 1 749 0
 1047 01a2 0022     		movs	r2, #0
 1048 01a4 0E4B     		ldr	r3, .L91+8
 1049 01a6 9A72     		strb	r2, [r3, #10]
 1050 01a8 0EE0     		b	.L73
 1051              	.L83:
 750:protocol.c    ****           }
 751:protocol.c    ****         } else {
 752:protocol.c    ****           // Handles spindle state during hold. NOTE: Spindle speed overrides may be altered during
 753:protocol.c    ****           // NOTE: STEP_CONTROL_UPDATE_SPINDLE_PWM is automatically reset upon resume in step gener
 754:protocol.c    ****           if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 1052              		.loc 1 754 0
 1053 01aa 0D4B     		ldr	r3, .L91+8
 1054 01ac 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1055 01ae 13F0080F 		tst	r3, #8
 1056 01b2 09D0     		beq	.L73
 755:protocol.c    ****             spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_
 1057              		.loc 1 755 0
 1058 01b4 04F03000 		and	r0, r4, #48
 1059 01b8 2946     		mov	r1, r5
 1060 01ba FFF7FEFF 		bl	spindle_set_state
 1061              	.LVL96:
 756:protocol.c    ****             bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 1062              		.loc 1 756 0
 1063 01be 084A     		ldr	r2, .L91+8
 1064 01c0 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 1065 01c2 23F00803 		bic	r3, r3, #8
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 33


 1066 01c6 1371     		strb	r3, [r2, #4]
 1067              	.L73:
 757:protocol.c    ****           }
 758:protocol.c    ****         }
 759:protocol.c    **** 
 760:protocol.c    ****       }
 761:protocol.c    ****     }
 762:protocol.c    **** 
 763:protocol.c    ****     protocol_exec_rt_system();
 1068              		.loc 1 763 0
 1069 01c8 FFF7FEFF 		bl	protocol_exec_rt_system
 1070              	.LVL97:
 1071              	.L71:
 563:protocol.c    **** 
 1072              		.loc 1 563 0
 1073 01cc 044B     		ldr	r3, .L91+8
 1074 01ce 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1075 01d0 002B     		cmp	r3, #0
 1076 01d2 7FF42CAF 		bne	.L89
 1077              	.L67:
 1078 01d6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1079              	.LVL98:
 1080              	.L92:
 1081              		.align	2
 1082              	.L91:
 1083 01d8 00000000 		.word	gc_state
 1084 01dc 00000000 		.word	settings
 1085 01e0 00000000 		.word	sys
 1086              		.cfi_endproc
 1087              	.LFE68:
 1088              		.size	protocol_exec_rt_suspend, .-protocol_exec_rt_suspend
 1089              		.section	.text.protocol_execute_realtime,"ax",%progbits
 1090              		.align	2
 1091              		.global	protocol_execute_realtime
 1092              		.thumb
 1093              		.thumb_func
 1094              		.type	protocol_execute_realtime, %function
 1095              	protocol_execute_realtime:
 1096              	.LFB66:
 214:protocol.c    ****   protocol_exec_rt_system();
 1097              		.loc 1 214 0
 1098              		.cfi_startproc
 1099              		@ args = 0, pretend = 0, frame = 0
 1100              		@ frame_needed = 0, uses_anonymous_args = 0
 1101 0000 08B5     		push	{r3, lr}
 1102              		.cfi_def_cfa_offset 8
 1103              		.cfi_offset 3, -8
 1104              		.cfi_offset 14, -4
 215:protocol.c    ****   if (sys.suspend) { protocol_exec_rt_suspend(); }
 1105              		.loc 1 215 0
 1106 0002 FFF7FEFF 		bl	protocol_exec_rt_system
 1107              	.LVL99:
 216:protocol.c    ****   
 1108              		.loc 1 216 0
 1109 0006 074B     		ldr	r3, .L97
 1110 0008 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1111 000a 0BB1     		cbz	r3, .L94
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 34


 216:protocol.c    ****   
 1112              		.loc 1 216 0 is_stmt 0 discriminator 1
 1113 000c FFF7FEFF 		bl	protocol_exec_rt_suspend
 1114              	.LVL100:
 1115              	.L94:
 219:protocol.c    ****       lcd_report_realtime(); 
 1116              		.loc 1 219 0 is_stmt 1
 1117 0010 054B     		ldr	r3, .L97+4
 1118 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1119 0014 23B1     		cbz	r3, .L93
 220:protocol.c    ****       exec_lcd_status = false;
 1120              		.loc 1 220 0
 1121 0016 FFF7FEFF 		bl	lcd_report_realtime
 1122              	.LVL101:
 221:protocol.c    ****     }
 1123              		.loc 1 221 0
 1124 001a 0022     		movs	r2, #0
 1125 001c 024B     		ldr	r3, .L97+4
 1126 001e 1A70     		strb	r2, [r3]
 1127              	.L93:
 1128 0020 08BD     		pop	{r3, pc}
 1129              	.L98:
 1130 0022 00BF     		.align	2
 1131              	.L97:
 1132 0024 00000000 		.word	sys
 1133 0028 00000000 		.word	exec_lcd_status
 1134              		.cfi_endproc
 1135              	.LFE66:
 1136              		.size	protocol_execute_realtime, .-protocol_execute_realtime
 1137              		.section	.text.protocol_main_loop,"ax",%progbits
 1138              		.align	2
 1139              		.global	protocol_main_loop
 1140              		.thumb
 1141              		.thumb_func
 1142              		.type	protocol_main_loop, %function
 1143              	protocol_main_loop:
 1144              	.LFB63:
  39:protocol.c    ****   // Perform some machine checks to make sure everything is good to go.
 1145              		.loc 1 39 0
 1146              		.cfi_startproc
 1147              		@ args = 0, pretend = 0, frame = 0
 1148              		@ frame_needed = 0, uses_anonymous_args = 0
 1149 0000 38B5     		push	{r3, r4, r5, lr}
 1150              		.cfi_def_cfa_offset 16
 1151              		.cfi_offset 3, -16
 1152              		.cfi_offset 4, -12
 1153              		.cfi_offset 5, -8
 1154              		.cfi_offset 14, -4
  42:protocol.c    ****       if (limits_get_state()) {
 1155              		.loc 1 42 0
 1156 0002 554B     		ldr	r3, .L121
 1157 0004 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 1158 0008 13F0080F 		tst	r3, #8
 1159 000c 08D0     		beq	.L100
  43:protocol.c    ****         sys.state = STATE_ALARM; // Ensure alarm state is active.
 1160              		.loc 1 43 0
 1161 000e FFF7FEFF 		bl	limits_get_state
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 35


 1162              	.LVL102:
 1163 0012 28B1     		cbz	r0, .L100
  44:protocol.c    ****         report_feedback_message(MESSAGE_CHECK_LIMITS);
 1164              		.loc 1 44 0
 1165 0014 0122     		movs	r2, #1
 1166 0016 514B     		ldr	r3, .L121+4
 1167 0018 1A70     		strb	r2, [r3]
  45:protocol.c    ****       }
 1168              		.loc 1 45 0
 1169 001a 0720     		movs	r0, #7
 1170 001c FFF7FEFF 		bl	report_feedback_message
 1171              	.LVL103:
 1172              	.L100:
  52:protocol.c    ****     report_feedback_message(MESSAGE_ALARM_LOCK);
 1173              		.loc 1 52 0
 1174 0020 4E4B     		ldr	r3, .L121+4
 1175 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1176 0024 13F0810F 		tst	r3, #129
 1177 0028 08D0     		beq	.L101
  53:protocol.c    ****     sys.state = STATE_ALARM; // Ensure alarm state is set.
 1178              		.loc 1 53 0
 1179 002a 0220     		movs	r0, #2
 1180 002c FFF7FEFF 		bl	report_feedback_message
 1181              	.LVL104:
  54:protocol.c    ****   } else {
 1182              		.loc 1 54 0
 1183 0030 0122     		movs	r2, #1
 1184 0032 4A4B     		ldr	r3, .L121+4
 1185 0034 1A70     		strb	r2, [r3]
 1186              	.L104:
 108:protocol.c    ****         char_counter = 0;
 1187              		.loc 1 108 0
 1188 0036 0025     		movs	r5, #0
 1189 0038 2C46     		mov	r4, r5
 1190 003a 7FE0     		b	.L102
 1191              	.L101:
  57:protocol.c    ****     if (system_check_safety_door_ajar()) {
 1192              		.loc 1 57 0
 1193 003c 0022     		movs	r2, #0
 1194 003e 474B     		ldr	r3, .L121+4
 1195 0040 1A70     		strb	r2, [r3]
  58:protocol.c    ****       bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 1196              		.loc 1 58 0
 1197 0042 FFF7FEFF 		bl	system_check_safety_door_ajar
 1198              	.LVL105:
 1199 0046 30B1     		cbz	r0, .L103
  59:protocol.c    ****       protocol_execute_realtime(); // Enter safety door mode. Should return as IDLE state.
 1200              		.loc 1 59 0
 1201 0048 454A     		ldr	r2, .L121+8
 1202 004a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1203 004c 43F02003 		orr	r3, r3, #32
 1204 0050 1370     		strb	r3, [r2]
  60:protocol.c    ****     }
 1205              		.loc 1 60 0
 1206 0052 FFF7FEFF 		bl	protocol_execute_realtime
 1207              	.LVL106:
 1208              	.L103:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 36


  63:protocol.c    ****   }
 1209              		.loc 1 63 0
 1210 0056 4348     		ldr	r0, .L121+12
 1211 0058 FFF7FEFF 		bl	system_execute_startup
 1212              	.LVL107:
 1213 005c EBE7     		b	.L104
 1214              	.LVL108:
 1215              	.L119:
  79:protocol.c    **** 
 1216              		.loc 1 79 0
 1217 005e 0A28     		cmp	r0, #10
 1218 0060 01D0     		beq	.L105
  79:protocol.c    **** 
 1219              		.loc 1 79 0 is_stmt 0 discriminator 1
 1220 0062 0D28     		cmp	r0, #13
 1221 0064 37D1     		bne	.L106
 1222              	.L105:
  81:protocol.c    ****         if (sys.abort) { return; } // Bail to calling function upon system abort
 1223              		.loc 1 81 0 is_stmt 1
 1224 0066 FFF7FEFF 		bl	protocol_execute_realtime
 1225              	.LVL109:
  82:protocol.c    **** 
 1226              		.loc 1 82 0
 1227 006a 3C4B     		ldr	r3, .L121+4
 1228 006c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1229 006e 002B     		cmp	r3, #0
 1230 0070 70D1     		bne	.L99
  84:protocol.c    ****         #ifdef REPORT_ECHO_LINE_RECEIVED
 1231              		.loc 1 84 0
 1232 0072 0022     		movs	r2, #0
 1233 0074 3B4B     		ldr	r3, .L121+12
 1234 0076 5A55     		strb	r2, [r3, r5]
  90:protocol.c    ****           // Report line overflow error.
 1235              		.loc 1 90 0
 1236 0078 14F0010F 		tst	r4, #1
 1237 007c 05D0     		beq	.L108
  92:protocol.c    ****         } else if (line[0] == 0) {
 1238              		.loc 1 92 0
 1239 007e 0B20     		movs	r0, #11
 1240 0080 FFF7FEFF 		bl	report_status_message
 1241              	.LVL110:
 109:protocol.c    **** 
 1242              		.loc 1 109 0
 1243 0084 0025     		movs	r5, #0
 1244              	.LVL111:
 108:protocol.c    ****         char_counter = 0;
 1245              		.loc 1 108 0
 1246 0086 2C46     		mov	r4, r5
 1247              	.LVL112:
 1248 0088 50E0     		b	.L109
 1249              	.LVL113:
 1250              	.L108:
  93:protocol.c    ****           // Empty or comment line. For syncing purposes.
 1251              		.loc 1 93 0
 1252 008a 364B     		ldr	r3, .L121+12
 1253 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1254 008e 2BB9     		cbnz	r3, .L110
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 37


  95:protocol.c    ****         } else if (line[0] == '$') {
 1255              		.loc 1 95 0
 1256 0090 0020     		movs	r0, #0
 1257 0092 FFF7FEFF 		bl	report_status_message
 1258              	.LVL114:
 109:protocol.c    **** 
 1259              		.loc 1 109 0
 1260 0096 0025     		movs	r5, #0
 1261              	.LVL115:
 108:protocol.c    ****         char_counter = 0;
 1262              		.loc 1 108 0
 1263 0098 2C46     		mov	r4, r5
 1264              	.LVL116:
 1265 009a 47E0     		b	.L109
 1266              	.LVL117:
 1267              	.L110:
  96:protocol.c    ****           // Grbl '$' system command
 1268              		.loc 1 96 0
 1269 009c 242B     		cmp	r3, #36
 1270 009e 07D1     		bne	.L111
  98:protocol.c    ****         } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 1271              		.loc 1 98 0
 1272 00a0 3048     		ldr	r0, .L121+12
 1273 00a2 FFF7FEFF 		bl	system_execute_line
 1274              	.LVL118:
 1275 00a6 FFF7FEFF 		bl	report_status_message
 1276              	.LVL119:
 109:protocol.c    **** 
 1277              		.loc 1 109 0
 1278 00aa 0025     		movs	r5, #0
 1279              	.LVL120:
 108:protocol.c    ****         char_counter = 0;
 1280              		.loc 1 108 0
 1281 00ac 2C46     		mov	r4, r5
 1282              	.LVL121:
 1283 00ae 3DE0     		b	.L109
 1284              	.LVL122:
 1285              	.L111:
  99:protocol.c    ****           // Everything else is gcode. Block if in alarm or jog mode.
 1286              		.loc 1 99 0
 1287 00b0 2A4B     		ldr	r3, .L121+4
 1288 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1289 00b4 13F0210F 		tst	r3, #33
 1290 00b8 05D0     		beq	.L112
 101:protocol.c    ****         } else {
 1291              		.loc 1 101 0
 1292 00ba 0920     		movs	r0, #9
 1293 00bc FFF7FEFF 		bl	report_status_message
 1294              	.LVL123:
 109:protocol.c    **** 
 1295              		.loc 1 109 0
 1296 00c0 0025     		movs	r5, #0
 1297              	.LVL124:
 108:protocol.c    ****         char_counter = 0;
 1298              		.loc 1 108 0
 1299 00c2 2C46     		mov	r4, r5
 1300              	.LVL125:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 38


 1301 00c4 32E0     		b	.L109
 1302              	.LVL126:
 1303              	.L112:
 104:protocol.c    ****         }
 1304              		.loc 1 104 0
 1305 00c6 2748     		ldr	r0, .L121+12
 1306 00c8 FFF7FEFF 		bl	gc_execute_line
 1307              	.LVL127:
 1308 00cc FFF7FEFF 		bl	report_status_message
 1309              	.LVL128:
 109:protocol.c    **** 
 1310              		.loc 1 109 0
 1311 00d0 0025     		movs	r5, #0
 1312              	.LVL129:
 108:protocol.c    ****         char_counter = 0;
 1313              		.loc 1 108 0
 1314 00d2 2C46     		mov	r4, r5
 1315              	.LVL130:
 1316 00d4 2AE0     		b	.L109
 1317              	.LVL131:
 1318              	.L106:
 113:protocol.c    ****           // Throw away all (except EOL) comment characters and overflow characters.
 1319              		.loc 1 113 0
 1320 00d6 3CB1     		cbz	r4, .L113
 115:protocol.c    ****             // End of '()' comment. Resume line allowed.
 1321              		.loc 1 115 0
 1322 00d8 2928     		cmp	r0, #41
 1323 00da 27D1     		bne	.L109
 117:protocol.c    ****           }
 1324              		.loc 1 117 0
 1325 00dc 14F0020F 		tst	r4, #2
 1326 00e0 24D0     		beq	.L109
 117:protocol.c    ****           }
 1327              		.loc 1 117 0 is_stmt 0 discriminator 1
 1328 00e2 04F0FD04 		and	r4, r4, #253
 1329              	.LVL132:
 1330 00e6 21E0     		b	.L109
 1331              	.L113:
 120:protocol.c    ****             // Throw away whitepace and control characters
 1332              		.loc 1 120 0 is_stmt 1
 1333 00e8 2028     		cmp	r0, #32
 1334 00ea 1FD9     		bls	.L109
 122:protocol.c    ****             // Block delete NOT SUPPORTED. Ignore character.
 1335              		.loc 1 122 0
 1336 00ec 2F28     		cmp	r0, #47
 1337 00ee 1DD0     		beq	.L109
 125:protocol.c    ****             // Enable comments flag and ignore all characters until ')' or EOL.
 1338              		.loc 1 125 0
 1339 00f0 2828     		cmp	r0, #40
 1340 00f2 02D1     		bne	.L114
 130:protocol.c    ****           } else if (c == ';') {
 1341              		.loc 1 130 0
 1342 00f4 44F00204 		orr	r4, r4, #2
 1343              	.LVL133:
 1344 00f8 18E0     		b	.L109
 1345              	.L114:
 131:protocol.c    ****             // NOTE: ';' comment to EOL is a LinuxCNC definition. Not NIST.
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 39


 1346              		.loc 1 131 0
 1347 00fa 3B28     		cmp	r0, #59
 1348 00fc 02D1     		bne	.L115
 133:protocol.c    ****           // TODO: Install '%' feature
 1349              		.loc 1 133 0
 1350 00fe 44F00404 		orr	r4, r4, #4
 1351              	.LVL134:
 1352 0102 13E0     		b	.L109
 1353              	.L115:
 141:protocol.c    ****             // Detect line buffer overflow and set flag.
 1354              		.loc 1 141 0
 1355 0104 4E2D     		cmp	r5, #78
 1356 0106 02D9     		bls	.L116
 143:protocol.c    ****           } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 1357              		.loc 1 143 0
 1358 0108 44F00104 		orr	r4, r4, #1
 1359              	.LVL135:
 1360 010c 0EE0     		b	.L109
 1361              	.L116:
 144:protocol.c    ****             line[char_counter++] = c-'a'+'A';
 1362              		.loc 1 144 0
 1363 010e A0F16103 		sub	r3, r0, #97
 1364 0112 DBB2     		uxtb	r3, r3
 1365 0114 192B     		cmp	r3, #25
 1366 0116 05D8     		bhi	.L117
 145:protocol.c    ****           } else {
 1367              		.loc 1 145 0
 1368 0118 6B1C     		adds	r3, r5, #1
 1369              	.LVL136:
 1370 011a 2038     		subs	r0, r0, #32
 1371              	.LVL137:
 1372 011c 114A     		ldr	r2, .L121+12
 1373 011e 5055     		strb	r0, [r2, r5]
 1374 0120 DDB2     		uxtb	r5, r3
 1375 0122 03E0     		b	.L109
 1376              	.LVL138:
 1377              	.L117:
 147:protocol.c    ****           }
 1378              		.loc 1 147 0
 1379 0124 6B1C     		adds	r3, r5, #1
 1380              	.LVL139:
 1381 0126 0F4A     		ldr	r2, .L121+12
 1382 0128 5055     		strb	r0, [r2, r5]
 1383 012a DDB2     		uxtb	r5, r3
 1384              	.LVL140:
 1385              	.L109:
 154:protocol.c    ****       lcd_report_realtime(); 
 1386              		.loc 1 154 0
 1387 012c 0E4B     		ldr	r3, .L121+16
 1388 012e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1389 0130 23B1     		cbz	r3, .L102
 155:protocol.c    ****       exec_lcd_status = false;
 1390              		.loc 1 155 0
 1391 0132 FFF7FEFF 		bl	lcd_report_realtime
 1392              	.LVL141:
 156:protocol.c    ****       //printPgmString(PSTR("LCD\r\n"));
 1393              		.loc 1 156 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 40


 1394 0136 0022     		movs	r2, #0
 1395 0138 0B4B     		ldr	r3, .L121+16
 1396 013a 1A70     		strb	r2, [r3]
 1397              	.LVL142:
 1398              	.L102:
  78:protocol.c    ****       if ((c == '\n') || (c == '\r')) { // End of line reached
 1399              		.loc 1 78 0
 1400 013c FFF7FEFF 		bl	serial_read
 1401              	.LVL143:
 1402 0140 FF28     		cmp	r0, #255
 1403 0142 8CD1     		bne	.L119
 165:protocol.c    **** 
 1404              		.loc 1 165 0
 1405 0144 FFF7FEFF 		bl	protocol_auto_cycle_start
 1406              	.LVL144:
 167:protocol.c    ****     if (sys.abort) { return; } // Bail to main() program loop to reset system.
 1407              		.loc 1 167 0
 1408 0148 FFF7FEFF 		bl	protocol_execute_realtime
 1409              	.LVL145:
 168:protocol.c    ****   }
 1410              		.loc 1 168 0
 1411 014c 034B     		ldr	r3, .L121+4
 1412 014e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1413 0150 002B     		cmp	r3, #0
 1414 0152 F3D0     		beq	.L102
 1415              	.L99:
 1416 0154 38BD     		pop	{r3, r4, r5, pc}
 1417              	.LVL146:
 1418              	.L122:
 1419 0156 00BF     		.align	2
 1420              	.L121:
 1421 0158 00000000 		.word	settings
 1422 015c 00000000 		.word	sys
 1423 0160 00000000 		.word	sys_rt_exec_state
 1424 0164 00000000 		.word	.LANCHOR0
 1425 0168 00000000 		.word	exec_lcd_status
 1426              		.cfi_endproc
 1427              	.LFE63:
 1428              		.size	protocol_main_loop, .-protocol_main_loop
 1429              		.section	.text.protocol_buffer_synchronize,"ax",%progbits
 1430              		.align	2
 1431              		.global	protocol_buffer_synchronize
 1432              		.thumb
 1433              		.thumb_func
 1434              		.type	protocol_buffer_synchronize, %function
 1435              	protocol_buffer_synchronize:
 1436              	.LFB64:
 178:protocol.c    ****   // If system is queued, ensure cycle resumes if the auto start flag is present.
 1437              		.loc 1 178 0
 1438              		.cfi_startproc
 1439              		@ args = 0, pretend = 0, frame = 0
 1440              		@ frame_needed = 0, uses_anonymous_args = 0
 1441 0000 08B5     		push	{r3, lr}
 1442              		.cfi_def_cfa_offset 8
 1443              		.cfi_offset 3, -8
 1444              		.cfi_offset 14, -4
 180:protocol.c    ****   do {
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 41


 1445              		.loc 1 180 0
 1446 0002 FFF7FEFF 		bl	protocol_auto_cycle_start
 1447              	.LVL147:
 1448              	.L125:
 182:protocol.c    ****     if (sys.abort) { return; } // Check for system abort
 1449              		.loc 1 182 0
 1450 0006 FFF7FEFF 		bl	protocol_execute_realtime
 1451              	.LVL148:
 183:protocol.c    ****   } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 1452              		.loc 1 183 0
 1453 000a 064B     		ldr	r3, .L127
 1454 000c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1455 000e 3BB9     		cbnz	r3, .L123
 184:protocol.c    **** }
 1456              		.loc 1 184 0
 1457 0010 FFF7FEFF 		bl	plan_get_current_block
 1458              	.LVL149:
 1459 0014 0028     		cmp	r0, #0
 1460 0016 F6D1     		bne	.L125
 184:protocol.c    **** }
 1461              		.loc 1 184 0 is_stmt 0 discriminator 1
 1462 0018 024B     		ldr	r3, .L127
 1463 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1464 001c 082B     		cmp	r3, #8
 1465 001e F2D0     		beq	.L125
 1466              	.L123:
 1467 0020 08BD     		pop	{r3, pc}
 1468              	.L128:
 1469 0022 00BF     		.align	2
 1470              	.L127:
 1471 0024 00000000 		.word	sys
 1472              		.cfi_endproc
 1473              	.LFE64:
 1474              		.size	protocol_buffer_synchronize, .-protocol_buffer_synchronize
 1475              		.comm	exec_lcd_status,1,1
 1476              		.comm	sys_rt_exec_debug,1,1
 1477              		.comm	sys_rt_exec_accessory_override,1,1
 1478              		.comm	sys_rt_exec_motion_override,1,1
 1479              		.comm	sys_rt_exec_alarm,1,1
 1480              		.comm	sys_rt_exec_state,1,1
 1481              		.comm	sys_probe_state,1,1
 1482              		.comm	sys_probe_position,12,4
 1483              		.comm	sys_position,12,4
 1484              		.bss
 1485              		.align	2
 1486              		.set	.LANCHOR0,. + 0
 1487              		.type	line, %object
 1488              		.size	line, 80
 1489              	line:
 1490 0000 00000000 		.space	80
 1490      00000000 
 1490      00000000 
 1490      00000000 
 1490      00000000 
 1491              		.text
 1492              	.Letext0:
 1493              		.file 2 "d:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 42


 1494              		.file 3 "d:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 1495              		.file 4 "settings.h"
 1496              		.file 5 "system.h"
 1497              		.file 6 "planner.h"
 1498              		.file 7 "gcode.h"
 1499              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 1500              		.file 9 "lcd_report.h"
 1501              		.file 10 "coolant_control.h"
 1502              		.file 11 "report.h"
 1503              		.file 12 "stepper.h"
 1504              		.file 13 "spindle_control.h"
 1505              		.file 14 "nuts_bolts.h"
 1506              		.file 15 "./limits.h"
 1507              		.file 16 "serial.h"
 1508              		.section	.debug_info,"",%progbits
 1509              	.Ldebug_info0:
 1510 0000 E50C0000 		.4byte	0xce5
 1511 0004 0400     		.2byte	0x4
 1512 0006 00000000 		.4byte	.Ldebug_abbrev0
 1513 000a 04       		.byte	0x4
 1514 000b 01       		.uleb128 0x1
 1515 000c C5070000 		.4byte	.LASF149
 1516 0010 01       		.byte	0x1
 1517 0011 2B010000 		.4byte	.LASF150
 1518 0015 98030000 		.4byte	.LASF151
 1519 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1520 001d 00000000 		.4byte	0
 1521 0021 00000000 		.4byte	.Ldebug_line0
 1522 0025 02       		.uleb128 0x2
 1523 0026 04       		.byte	0x4
 1524 0027 04       		.byte	0x4
 1525 0028 C1010000 		.4byte	.LASF0
 1526 002c 03       		.uleb128 0x3
 1527 002d CF050000 		.4byte	.LASF2
 1528 0031 02       		.byte	0x2
 1529 0032 1B       		.byte	0x1b
 1530 0033 37000000 		.4byte	0x37
 1531 0037 02       		.uleb128 0x2
 1532 0038 01       		.byte	0x1
 1533 0039 06       		.byte	0x6
 1534 003a D8080000 		.4byte	.LASF1
 1535 003e 03       		.uleb128 0x3
 1536 003f 06070000 		.4byte	.LASF3
 1537 0043 02       		.byte	0x2
 1538 0044 1D       		.byte	0x1d
 1539 0045 49000000 		.4byte	0x49
 1540 0049 02       		.uleb128 0x2
 1541 004a 01       		.byte	0x1
 1542 004b 08       		.byte	0x8
 1543 004c 95070000 		.4byte	.LASF4
 1544 0050 02       		.uleb128 0x2
 1545 0051 02       		.byte	0x2
 1546 0052 05       		.byte	0x5
 1547 0053 55060000 		.4byte	.LASF5
 1548 0057 03       		.uleb128 0x3
 1549 0058 6C020000 		.4byte	.LASF6
 1550 005c 02       		.byte	0x2
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 43


 1551 005d 2B       		.byte	0x2b
 1552 005e 62000000 		.4byte	0x62
 1553 0062 02       		.uleb128 0x2
 1554 0063 02       		.byte	0x2
 1555 0064 07       		.byte	0x7
 1556 0065 FA080000 		.4byte	.LASF7
 1557 0069 03       		.uleb128 0x3
 1558 006a A6000000 		.4byte	.LASF8
 1559 006e 02       		.byte	0x2
 1560 006f 3F       		.byte	0x3f
 1561 0070 74000000 		.4byte	0x74
 1562 0074 02       		.uleb128 0x2
 1563 0075 04       		.byte	0x4
 1564 0076 05       		.byte	0x5
 1565 0077 6E060000 		.4byte	.LASF9
 1566 007b 03       		.uleb128 0x3
 1567 007c BA070000 		.4byte	.LASF10
 1568 0080 02       		.byte	0x2
 1569 0081 41       		.byte	0x41
 1570 0082 86000000 		.4byte	0x86
 1571 0086 02       		.uleb128 0x2
 1572 0087 04       		.byte	0x4
 1573 0088 07       		.byte	0x7
 1574 0089 4F070000 		.4byte	.LASF11
 1575 008d 02       		.uleb128 0x2
 1576 008e 08       		.byte	0x8
 1577 008f 05       		.byte	0x5
 1578 0090 BA040000 		.4byte	.LASF12
 1579 0094 02       		.uleb128 0x2
 1580 0095 08       		.byte	0x8
 1581 0096 07       		.byte	0x7
 1582 0097 1F020000 		.4byte	.LASF13
 1583 009b 04       		.uleb128 0x4
 1584 009c 04       		.byte	0x4
 1585 009d 05       		.byte	0x5
 1586 009e 696E7400 		.ascii	"int\000"
 1587 00a2 02       		.uleb128 0x2
 1588 00a3 04       		.byte	0x4
 1589 00a4 07       		.byte	0x7
 1590 00a5 7E000000 		.4byte	.LASF14
 1591 00a9 03       		.uleb128 0x3
 1592 00aa 93010000 		.4byte	.LASF15
 1593 00ae 03       		.byte	0x3
 1594 00af 14       		.byte	0x14
 1595 00b0 2C000000 		.4byte	0x2c
 1596 00b4 03       		.uleb128 0x3
 1597 00b5 88040000 		.4byte	.LASF16
 1598 00b9 03       		.byte	0x3
 1599 00ba 15       		.byte	0x15
 1600 00bb 3E000000 		.4byte	0x3e
 1601 00bf 03       		.uleb128 0x3
 1602 00c0 0F060000 		.4byte	.LASF17
 1603 00c4 03       		.byte	0x3
 1604 00c5 21       		.byte	0x21
 1605 00c6 57000000 		.4byte	0x57
 1606 00ca 03       		.uleb128 0x3
 1607 00cb 61070000 		.4byte	.LASF18
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 44


 1608 00cf 03       		.byte	0x3
 1609 00d0 2C       		.byte	0x2c
 1610 00d1 69000000 		.4byte	0x69
 1611 00d5 03       		.uleb128 0x3
 1612 00d6 8A010000 		.4byte	.LASF19
 1613 00da 03       		.byte	0x3
 1614 00db 2D       		.byte	0x2d
 1615 00dc 7B000000 		.4byte	0x7b
 1616 00e0 02       		.uleb128 0x2
 1617 00e1 08       		.byte	0x8
 1618 00e2 04       		.byte	0x4
 1619 00e3 43090000 		.4byte	.LASF20
 1620 00e7 02       		.uleb128 0x2
 1621 00e8 01       		.byte	0x1
 1622 00e9 08       		.byte	0x8
 1623 00ea F3030000 		.4byte	.LASF21
 1624 00ee 02       		.uleb128 0x2
 1625 00ef 04       		.byte	0x4
 1626 00f0 07       		.byte	0x7
 1627 00f1 46070000 		.4byte	.LASF22
 1628 00f5 05       		.uleb128 0x5
 1629 00f6 04       		.byte	0x4
 1630 00f7 E7000000 		.4byte	0xe7
 1631 00fb 06       		.uleb128 0x6
 1632 00fc B4000000 		.4byte	0xb4
 1633 0100 02       		.uleb128 0x2
 1634 0101 08       		.byte	0x8
 1635 0102 04       		.byte	0x4
 1636 0103 03060000 		.4byte	.LASF23
 1637 0107 07       		.uleb128 0x7
 1638 0108 5C       		.byte	0x5c
 1639 0109 04       		.byte	0x4
 1640 010a 4F       		.byte	0x4f
 1641 010b F4010000 		.4byte	0x1f4
 1642 010f 08       		.uleb128 0x8
 1643 0110 13050000 		.4byte	.LASF24
 1644 0114 04       		.byte	0x4
 1645 0115 51       		.byte	0x51
 1646 0116 F4010000 		.4byte	0x1f4
 1647 011a 00       		.byte	0
 1648 011b 08       		.uleb128 0x8
 1649 011c 18060000 		.4byte	.LASF25
 1650 0120 04       		.byte	0x4
 1651 0121 52       		.byte	0x52
 1652 0122 F4010000 		.4byte	0x1f4
 1653 0126 0C       		.byte	0xc
 1654 0127 08       		.uleb128 0x8
 1655 0128 59010000 		.4byte	.LASF26
 1656 012c 04       		.byte	0x4
 1657 012d 53       		.byte	0x53
 1658 012e F4010000 		.4byte	0x1f4
 1659 0132 18       		.byte	0x18
 1660 0133 08       		.uleb128 0x8
 1661 0134 E8030000 		.4byte	.LASF27
 1662 0138 04       		.byte	0x4
 1663 0139 54       		.byte	0x54
 1664 013a F4010000 		.4byte	0x1f4
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 45


 1665 013e 24       		.byte	0x24
 1666 013f 08       		.uleb128 0x8
 1667 0140 00000000 		.4byte	.LASF28
 1668 0144 04       		.byte	0x4
 1669 0145 57       		.byte	0x57
 1670 0146 B4000000 		.4byte	0xb4
 1671 014a 30       		.byte	0x30
 1672 014b 08       		.uleb128 0x8
 1673 014c D8050000 		.4byte	.LASF29
 1674 0150 04       		.byte	0x4
 1675 0151 58       		.byte	0x58
 1676 0152 B4000000 		.4byte	0xb4
 1677 0156 31       		.byte	0x31
 1678 0157 08       		.uleb128 0x8
 1679 0158 C6090000 		.4byte	.LASF30
 1680 015c 04       		.byte	0x4
 1681 015d 59       		.byte	0x59
 1682 015e B4000000 		.4byte	0xb4
 1683 0162 32       		.byte	0x32
 1684 0163 08       		.uleb128 0x8
 1685 0164 D8000000 		.4byte	.LASF31
 1686 0168 04       		.byte	0x4
 1687 0169 5A       		.byte	0x5a
 1688 016a B4000000 		.4byte	0xb4
 1689 016e 33       		.byte	0x33
 1690 016f 08       		.uleb128 0x8
 1691 0170 6B000000 		.4byte	.LASF32
 1692 0174 04       		.byte	0x4
 1693 0175 5B       		.byte	0x5b
 1694 0176 B4000000 		.4byte	0xb4
 1695 017a 34       		.byte	0x34
 1696 017b 08       		.uleb128 0x8
 1697 017c 82090000 		.4byte	.LASF33
 1698 0180 04       		.byte	0x4
 1699 0181 5C       		.byte	0x5c
 1700 0182 25000000 		.4byte	0x25
 1701 0186 38       		.byte	0x38
 1702 0187 08       		.uleb128 0x8
 1703 0188 05010000 		.4byte	.LASF34
 1704 018c 04       		.byte	0x4
 1705 018d 5D       		.byte	0x5d
 1706 018e 25000000 		.4byte	0x25
 1707 0192 3C       		.byte	0x3c
 1708 0193 08       		.uleb128 0x8
 1709 0194 0B040000 		.4byte	.LASF35
 1710 0198 04       		.byte	0x4
 1711 0199 5F       		.byte	0x5f
 1712 019a 25000000 		.4byte	0x25
 1713 019e 40       		.byte	0x40
 1714 019f 08       		.uleb128 0x8
 1715 01a0 0D090000 		.4byte	.LASF36
 1716 01a4 04       		.byte	0x4
 1717 01a5 60       		.byte	0x60
 1718 01a6 25000000 		.4byte	0x25
 1719 01aa 44       		.byte	0x44
 1720 01ab 08       		.uleb128 0x8
 1721 01ac 40000000 		.4byte	.LASF37
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 46


 1722 01b0 04       		.byte	0x4
 1723 01b1 62       		.byte	0x62
 1724 01b2 B4000000 		.4byte	0xb4
 1725 01b6 48       		.byte	0x48
 1726 01b7 08       		.uleb128 0x8
 1727 01b8 4A090000 		.4byte	.LASF38
 1728 01bc 04       		.byte	0x4
 1729 01bd 64       		.byte	0x64
 1730 01be B4000000 		.4byte	0xb4
 1731 01c2 49       		.byte	0x49
 1732 01c3 08       		.uleb128 0x8
 1733 01c4 9A010000 		.4byte	.LASF39
 1734 01c8 04       		.byte	0x4
 1735 01c9 65       		.byte	0x65
 1736 01ca 25000000 		.4byte	0x25
 1737 01ce 4C       		.byte	0x4c
 1738 01cf 08       		.uleb128 0x8
 1739 01d0 66010000 		.4byte	.LASF40
 1740 01d4 04       		.byte	0x4
 1741 01d5 66       		.byte	0x66
 1742 01d6 25000000 		.4byte	0x25
 1743 01da 50       		.byte	0x50
 1744 01db 08       		.uleb128 0x8
 1745 01dc E4080000 		.4byte	.LASF41
 1746 01e0 04       		.byte	0x4
 1747 01e1 67       		.byte	0x67
 1748 01e2 BF000000 		.4byte	0xbf
 1749 01e6 54       		.byte	0x54
 1750 01e7 08       		.uleb128 0x8
 1751 01e8 F2020000 		.4byte	.LASF42
 1752 01ec 04       		.byte	0x4
 1753 01ed 68       		.byte	0x68
 1754 01ee 25000000 		.4byte	0x25
 1755 01f2 58       		.byte	0x58
 1756 01f3 00       		.byte	0
 1757 01f4 09       		.uleb128 0x9
 1758 01f5 25000000 		.4byte	0x25
 1759 01f9 04020000 		.4byte	0x204
 1760 01fd 0A       		.uleb128 0xa
 1761 01fe EE000000 		.4byte	0xee
 1762 0202 02       		.byte	0x2
 1763 0203 00       		.byte	0
 1764 0204 03       		.uleb128 0x3
 1765 0205 15090000 		.4byte	.LASF43
 1766 0209 04       		.byte	0x4
 1767 020a 69       		.byte	0x69
 1768 020b 07010000 		.4byte	0x107
 1769 020f 07       		.uleb128 0x7
 1770 0210 14       		.byte	0x14
 1771 0211 05       		.byte	0x5
 1772 0212 80       		.byte	0x80
 1773 0213 C0020000 		.4byte	0x2c0
 1774 0217 08       		.uleb128 0x8
 1775 0218 A3080000 		.4byte	.LASF44
 1776 021c 05       		.byte	0x5
 1777 021d 81       		.byte	0x81
 1778 021e B4000000 		.4byte	0xb4
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 47


 1779 0222 00       		.byte	0
 1780 0223 08       		.uleb128 0x8
 1781 0224 C4020000 		.4byte	.LASF45
 1782 0228 05       		.byte	0x5
 1783 0229 82       		.byte	0x82
 1784 022a B4000000 		.4byte	0xb4
 1785 022e 01       		.byte	0x1
 1786 022f 08       		.uleb128 0x8
 1787 0230 16030000 		.4byte	.LASF46
 1788 0234 05       		.byte	0x5
 1789 0235 83       		.byte	0x83
 1790 0236 B4000000 		.4byte	0xb4
 1791 023a 02       		.byte	0x2
 1792 023b 08       		.uleb128 0x8
 1793 023c BE060000 		.4byte	.LASF47
 1794 0240 05       		.byte	0x5
 1795 0241 84       		.byte	0x84
 1796 0242 B4000000 		.4byte	0xb4
 1797 0246 03       		.byte	0x3
 1798 0247 08       		.uleb128 0x8
 1799 0248 3D060000 		.4byte	.LASF48
 1800 024c 05       		.byte	0x5
 1801 024d 85       		.byte	0x85
 1802 024e B4000000 		.4byte	0xb4
 1803 0252 04       		.byte	0x4
 1804 0253 08       		.uleb128 0x8
 1805 0254 10070000 		.4byte	.LASF49
 1806 0258 05       		.byte	0x5
 1807 0259 86       		.byte	0x86
 1808 025a B4000000 		.4byte	0xb4
 1809 025e 05       		.byte	0x5
 1810 025f 08       		.uleb128 0x8
 1811 0260 95090000 		.4byte	.LASF50
 1812 0264 05       		.byte	0x5
 1813 0265 87       		.byte	0x87
 1814 0266 B4000000 		.4byte	0xb4
 1815 026a 06       		.byte	0x6
 1816 026b 08       		.uleb128 0x8
 1817 026c 47020000 		.4byte	.LASF51
 1818 0270 05       		.byte	0x5
 1819 0271 88       		.byte	0x88
 1820 0272 B4000000 		.4byte	0xb4
 1821 0276 07       		.byte	0x7
 1822 0277 08       		.uleb128 0x8
 1823 0278 8B000000 		.4byte	.LASF52
 1824 027c 05       		.byte	0x5
 1825 027d 89       		.byte	0x89
 1826 027e B4000000 		.4byte	0xb4
 1827 0282 08       		.byte	0x8
 1828 0283 08       		.uleb128 0x8
 1829 0284 76040000 		.4byte	.LASF53
 1830 0288 05       		.byte	0x5
 1831 0289 8A       		.byte	0x8a
 1832 028a B4000000 		.4byte	0xb4
 1833 028e 09       		.byte	0x9
 1834 028f 08       		.uleb128 0x8
 1835 0290 81020000 		.4byte	.LASF54
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 48


 1836 0294 05       		.byte	0x5
 1837 0295 8B       		.byte	0x8b
 1838 0296 B4000000 		.4byte	0xb4
 1839 029a 0A       		.byte	0xa
 1840 029b 08       		.uleb128 0x8
 1841 029c 52040000 		.4byte	.LASF55
 1842 02a0 05       		.byte	0x5
 1843 02a1 8C       		.byte	0x8c
 1844 02a2 B4000000 		.4byte	0xb4
 1845 02a6 0B       		.byte	0xb
 1846 02a7 08       		.uleb128 0x8
 1847 02a8 AB060000 		.4byte	.LASF56
 1848 02ac 05       		.byte	0x5
 1849 02ad 8D       		.byte	0x8d
 1850 02ae B4000000 		.4byte	0xb4
 1851 02b2 0C       		.byte	0xc
 1852 02b3 08       		.uleb128 0x8
 1853 02b4 33040000 		.4byte	.LASF57
 1854 02b8 05       		.byte	0x5
 1855 02b9 8F       		.byte	0x8f
 1856 02ba 25000000 		.4byte	0x25
 1857 02be 10       		.byte	0x10
 1858 02bf 00       		.byte	0
 1859 02c0 03       		.uleb128 0x3
 1860 02c1 98060000 		.4byte	.LASF58
 1861 02c5 05       		.byte	0x5
 1862 02c6 91       		.byte	0x91
 1863 02c7 0F020000 		.4byte	0x20f
 1864 02cb 07       		.uleb128 0x7
 1865 02cc 34       		.byte	0x34
 1866 02cd 06       		.byte	0x6
 1867 02ce 39       		.byte	0x39
 1868 02cf 64030000 		.4byte	0x364
 1869 02d3 08       		.uleb128 0x8
 1870 02d4 BB010000 		.4byte	.LASF59
 1871 02d8 06       		.byte	0x6
 1872 02d9 3C       		.byte	0x3c
 1873 02da 64030000 		.4byte	0x364
 1874 02de 00       		.byte	0
 1875 02df 08       		.uleb128 0x8
 1876 02e0 41040000 		.4byte	.LASF60
 1877 02e4 06       		.byte	0x6
 1878 02e5 3D       		.byte	0x3d
 1879 02e6 D5000000 		.4byte	0xd5
 1880 02ea 0C       		.byte	0xc
 1881 02eb 08       		.uleb128 0x8
 1882 02ec 4A010000 		.4byte	.LASF61
 1883 02f0 06       		.byte	0x6
 1884 02f1 3E       		.byte	0x3e
 1885 02f2 B4000000 		.4byte	0xb4
 1886 02f6 10       		.byte	0x10
 1887 02f7 08       		.uleb128 0x8
 1888 02f8 A6090000 		.4byte	.LASF62
 1889 02fc 06       		.byte	0x6
 1890 02fd 41       		.byte	0x41
 1891 02fe B4000000 		.4byte	0xb4
 1892 0302 11       		.byte	0x11
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 49


 1893 0303 08       		.uleb128 0x8
 1894 0304 AB010000 		.4byte	.LASF63
 1895 0308 06       		.byte	0x6
 1896 0309 48       		.byte	0x48
 1897 030a 25000000 		.4byte	0x25
 1898 030e 14       		.byte	0x14
 1899 030f 08       		.uleb128 0x8
 1900 0310 D2020000 		.4byte	.LASF64
 1901 0314 06       		.byte	0x6
 1902 0315 49       		.byte	0x49
 1903 0316 25000000 		.4byte	0x25
 1904 031a 18       		.byte	0x18
 1905 031b 08       		.uleb128 0x8
 1906 031c 59010000 		.4byte	.LASF26
 1907 0320 06       		.byte	0x6
 1908 0321 4B       		.byte	0x4b
 1909 0322 25000000 		.4byte	0x25
 1910 0326 1C       		.byte	0x1c
 1911 0327 08       		.uleb128 0x8
 1912 0328 CC080000 		.4byte	.LASF65
 1913 032c 06       		.byte	0x6
 1914 032d 4C       		.byte	0x4c
 1915 032e 25000000 		.4byte	0x25
 1916 0332 20       		.byte	0x20
 1917 0333 08       		.uleb128 0x8
 1918 0334 29000000 		.4byte	.LASF66
 1919 0338 06       		.byte	0x6
 1920 0339 50       		.byte	0x50
 1921 033a 25000000 		.4byte	0x25
 1922 033e 24       		.byte	0x24
 1923 033f 08       		.uleb128 0x8
 1924 0340 4A060000 		.4byte	.LASF67
 1925 0344 06       		.byte	0x6
 1926 0345 51       		.byte	0x51
 1927 0346 25000000 		.4byte	0x25
 1928 034a 28       		.byte	0x28
 1929 034b 08       		.uleb128 0x8
 1930 034c F5000000 		.4byte	.LASF68
 1931 0350 06       		.byte	0x6
 1932 0351 52       		.byte	0x52
 1933 0352 25000000 		.4byte	0x25
 1934 0356 2C       		.byte	0x2c
 1935 0357 08       		.uleb128 0x8
 1936 0358 33040000 		.4byte	.LASF57
 1937 035c 06       		.byte	0x6
 1938 035d 56       		.byte	0x56
 1939 035e 25000000 		.4byte	0x25
 1940 0362 30       		.byte	0x30
 1941 0363 00       		.byte	0
 1942 0364 09       		.uleb128 0x9
 1943 0365 D5000000 		.4byte	0xd5
 1944 0369 74030000 		.4byte	0x374
 1945 036d 0A       		.uleb128 0xa
 1946 036e EE000000 		.4byte	0xee
 1947 0372 02       		.byte	0x2
 1948 0373 00       		.byte	0
 1949 0374 03       		.uleb128 0x3
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 50


 1950 0375 5E000000 		.4byte	.LASF69
 1951 0379 06       		.byte	0x6
 1952 037a 58       		.byte	0x58
 1953 037b CB020000 		.4byte	0x2cb
 1954 037f 07       		.uleb128 0x7
 1955 0380 0A       		.byte	0xa
 1956 0381 07       		.byte	0x7
 1957 0382 B1       		.byte	0xb1
 1958 0383 00040000 		.4byte	0x400
 1959 0387 08       		.uleb128 0x8
 1960 0388 3F070000 		.4byte	.LASF70
 1961 038c 07       		.byte	0x7
 1962 038d B2       		.byte	0xb2
 1963 038e B4000000 		.4byte	0xb4
 1964 0392 00       		.byte	0
 1965 0393 08       		.uleb128 0x8
 1966 0394 A1060000 		.4byte	.LASF71
 1967 0398 07       		.byte	0x7
 1968 0399 B3       		.byte	0xb3
 1969 039a B4000000 		.4byte	0xb4
 1970 039e 01       		.byte	0x1
 1971 039f 08       		.uleb128 0x8
 1972 03a0 C6080000 		.4byte	.LASF72
 1973 03a4 07       		.byte	0x7
 1974 03a5 B4       		.byte	0xb4
 1975 03a6 B4000000 		.4byte	0xb4
 1976 03aa 02       		.byte	0x2
 1977 03ab 08       		.uleb128 0x8
 1978 03ac 13000000 		.4byte	.LASF73
 1979 03b0 07       		.byte	0x7
 1980 03b1 B5       		.byte	0xb5
 1981 03b2 B4000000 		.4byte	0xb4
 1982 03b6 03       		.byte	0x3
 1983 03b7 08       		.uleb128 0x8
 1984 03b8 1E030000 		.4byte	.LASF74
 1985 03bc 07       		.byte	0x7
 1986 03bd B7       		.byte	0xb7
 1987 03be B4000000 		.4byte	0xb4
 1988 03c2 04       		.byte	0x4
 1989 03c3 08       		.uleb128 0x8
 1990 03c4 E6020000 		.4byte	.LASF75
 1991 03c8 07       		.byte	0x7
 1992 03c9 B9       		.byte	0xb9
 1993 03ca B4000000 		.4byte	0xb4
 1994 03ce 05       		.byte	0x5
 1995 03cf 08       		.uleb128 0x8
 1996 03d0 79030000 		.4byte	.LASF76
 1997 03d4 07       		.byte	0x7
 1998 03d5 BA       		.byte	0xba
 1999 03d6 B4000000 		.4byte	0xb4
 2000 03da 06       		.byte	0x6
 2001 03db 08       		.uleb128 0x8
 2002 03dc 1C000000 		.4byte	.LASF77
 2003 03e0 07       		.byte	0x7
 2004 03e1 BC       		.byte	0xbc
 2005 03e2 B4000000 		.4byte	0xb4
 2006 03e6 07       		.byte	0x7
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 51


 2007 03e7 08       		.uleb128 0x8
 2008 03e8 CA020000 		.4byte	.LASF78
 2009 03ec 07       		.byte	0x7
 2010 03ed BD       		.byte	0xbd
 2011 03ee B4000000 		.4byte	0xb4
 2012 03f2 08       		.byte	0x8
 2013 03f3 08       		.uleb128 0x8
 2014 03f4 23010000 		.4byte	.LASF79
 2015 03f8 07       		.byte	0x7
 2016 03f9 BE       		.byte	0xbe
 2017 03fa B4000000 		.4byte	0xb4
 2018 03fe 09       		.byte	0x9
 2019 03ff 00       		.byte	0
 2020 0400 03       		.uleb128 0x3
 2021 0401 BB080000 		.4byte	.LASF80
 2022 0405 07       		.byte	0x7
 2023 0406 BF       		.byte	0xbf
 2024 0407 7F030000 		.4byte	0x37f
 2025 040b 07       		.uleb128 0x7
 2026 040c 44       		.byte	0x44
 2027 040d 07       		.byte	0x7
 2028 040e CF       		.byte	0xcf
 2029 040f 80040000 		.4byte	0x480
 2030 0413 08       		.uleb128 0x8
 2031 0414 EF000000 		.4byte	.LASF81
 2032 0418 07       		.byte	0x7
 2033 0419 D0       		.byte	0xd0
 2034 041a 00040000 		.4byte	0x400
 2035 041e 00       		.byte	0
 2036 041f 08       		.uleb128 0x8
 2037 0420 33040000 		.4byte	.LASF57
 2038 0424 07       		.byte	0x7
 2039 0425 D2       		.byte	0xd2
 2040 0426 25000000 		.4byte	0x25
 2041 042a 0C       		.byte	0xc
 2042 042b 08       		.uleb128 0x8
 2043 042c A1060000 		.4byte	.LASF71
 2044 0430 07       		.byte	0x7
 2045 0431 D3       		.byte	0xd3
 2046 0432 25000000 		.4byte	0x25
 2047 0436 10       		.byte	0x10
 2048 0437 08       		.uleb128 0x8
 2049 0438 01030000 		.4byte	.LASF82
 2050 043c 07       		.byte	0x7
 2051 043d D4       		.byte	0xd4
 2052 043e B4000000 		.4byte	0xb4
 2053 0442 14       		.byte	0x14
 2054 0443 08       		.uleb128 0x8
 2055 0444 20050000 		.4byte	.LASF83
 2056 0448 07       		.byte	0x7
 2057 0449 D5       		.byte	0xd5
 2058 044a CA000000 		.4byte	0xca
 2059 044e 18       		.byte	0x18
 2060 044f 08       		.uleb128 0x8
 2061 0450 BD090000 		.4byte	.LASF84
 2062 0454 07       		.byte	0x7
 2063 0455 D7       		.byte	0xd7
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 52


 2064 0456 F4010000 		.4byte	0x1f4
 2065 045a 1C       		.byte	0x1c
 2066 045b 08       		.uleb128 0x8
 2067 045c EA040000 		.4byte	.LASF85
 2068 0460 07       		.byte	0x7
 2069 0461 D9       		.byte	0xd9
 2070 0462 F4010000 		.4byte	0x1f4
 2071 0466 28       		.byte	0x28
 2072 0467 08       		.uleb128 0x8
 2073 0468 69070000 		.4byte	.LASF86
 2074 046c 07       		.byte	0x7
 2075 046d DB       		.byte	0xdb
 2076 046e F4010000 		.4byte	0x1f4
 2077 0472 34       		.byte	0x34
 2078 0473 08       		.uleb128 0x8
 2079 0474 F8030000 		.4byte	.LASF87
 2080 0478 07       		.byte	0x7
 2081 0479 DD       		.byte	0xdd
 2082 047a 25000000 		.4byte	0x25
 2083 047e 40       		.byte	0x40
 2084 047f 00       		.byte	0
 2085 0480 03       		.uleb128 0x3
 2086 0481 90040000 		.4byte	.LASF88
 2087 0485 07       		.byte	0x7
 2088 0486 DE       		.byte	0xde
 2089 0487 0B040000 		.4byte	0x40b
 2090 048b 0B       		.uleb128 0xb
 2091 048c E9050000 		.4byte	.LASF89
 2092 0490 01       		.byte	0x1
 2093 0491 C2       		.byte	0xc2
 2094 0492 00000000 		.4byte	.LFB65
 2095 0496 10000000 		.4byte	.LFE65-.LFB65
 2096 049a 01       		.uleb128 0x1
 2097 049b 9C       		.byte	0x9c
 2098 049c B9040000 		.4byte	0x4b9
 2099 04a0 0C       		.uleb128 0xc
 2100 04a1 06000000 		.4byte	.LVL0
 2101 04a5 FA0A0000 		.4byte	0xafa
 2102 04a9 0D       		.uleb128 0xd
 2103 04aa 0E000000 		.4byte	.LVL1
 2104 04ae 0B0B0000 		.4byte	0xb0b
 2105 04b2 0E       		.uleb128 0xe
 2106 04b3 01       		.uleb128 0x1
 2107 04b4 50       		.byte	0x50
 2108 04b5 01       		.uleb128 0x1
 2109 04b6 32       		.byte	0x32
 2110 04b7 00       		.byte	0
 2111 04b8 00       		.byte	0
 2112 04b9 0B       		.uleb128 0xb
 2113 04ba 46000000 		.4byte	.LASF90
 2114 04be 01       		.byte	0x1
 2115 04bf E6       		.byte	0xe6
 2116 04c0 00000000 		.4byte	.LFB67
 2117 04c4 00040000 		.4byte	.LFE67-.LFB67
 2118 04c8 01       		.uleb128 0x1
 2119 04c9 9C       		.byte	0x9c
 2120 04ca 8B060000 		.4byte	0x68b
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 53


 2121 04ce 0F       		.uleb128 0xf
 2122 04cf 8D070000 		.4byte	.LASF91
 2123 04d3 01       		.byte	0x1
 2124 04d4 E8       		.byte	0xe8
 2125 04d5 B4000000 		.4byte	0xb4
 2126 04d9 00000000 		.4byte	.LLST0
 2127 04dd 10       		.uleb128 0x10
 2128 04de 76020000 		.4byte	.LBB2
 2129 04e2 92000000 		.4byte	.LBE2-.LBB2
 2130 04e6 26050000 		.4byte	0x526
 2131 04ea 11       		.uleb128 0x11
 2132 04eb 5F060000 		.4byte	.LASF92
 2133 04ef 01       		.byte	0x1
 2134 04f0 AB01     		.2byte	0x1ab
 2135 04f2 B4000000 		.4byte	0xb4
 2136 04f6 3F000000 		.4byte	.LLST1
 2137 04fa 11       		.uleb128 0x11
 2138 04fb DB040000 		.4byte	.LASF93
 2139 04ff 01       		.byte	0x1
 2140 0500 B401     		.2byte	0x1b4
 2141 0502 B4000000 		.4byte	0xb4
 2142 0506 B5000000 		.4byte	.LLST2
 2143 050a 0C       		.uleb128 0xc
 2144 050b 7A020000 		.4byte	.LVL27
 2145 050f 1C0B0000 		.4byte	0xb1c
 2146 0513 0C       		.uleb128 0xc
 2147 0514 04030000 		.4byte	.LVL45
 2148 0518 290B0000 		.4byte	0xb29
 2149 051c 0C       		.uleb128 0xc
 2150 051d 08030000 		.4byte	.LVL46
 2151 0521 360B0000 		.4byte	0xb36
 2152 0525 00       		.byte	0
 2153 0526 10       		.uleb128 0x10
 2154 0527 14030000 		.4byte	.LBB3
 2155 052b B6000000 		.4byte	.LBE3-.LBB3
 2156 052f 7B050000 		.4byte	0x57b
 2157 0533 11       		.uleb128 0x11
 2158 0534 96000000 		.4byte	.LASF94
 2159 0538 01       		.byte	0x1
 2160 0539 C701     		.2byte	0x1c7
 2161 053b B4000000 		.4byte	0xb4
 2162 053f D3000000 		.4byte	.LLST3
 2163 0543 10       		.uleb128 0x10
 2164 0544 AC030000 		.4byte	.LBB4
 2165 0548 1E000000 		.4byte	.LBE4-.LBB4
 2166 054c 71050000 		.4byte	0x571
 2167 0550 11       		.uleb128 0x11
 2168 0551 76050000 		.4byte	.LASF95
 2169 0555 01       		.byte	0x1
 2170 0556 E301     		.2byte	0x1e3
 2171 0558 B4000000 		.4byte	0xb4
 2172 055c 49010000 		.4byte	.LLST4
 2173 0560 0D       		.uleb128 0xd
 2174 0561 C6030000 		.4byte	.LVL66
 2175 0565 430B0000 		.4byte	0xb43
 2176 0569 0E       		.uleb128 0xe
 2177 056a 01       		.uleb128 0x1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 54


 2178 056b 50       		.byte	0x50
 2179 056c 02       		.uleb128 0x2
 2180 056d 74       		.byte	0x74
 2181 056e 00       		.sleb128 0
 2182 056f 00       		.byte	0
 2183 0570 00       		.byte	0
 2184 0571 0C       		.uleb128 0xc
 2185 0572 18030000 		.4byte	.LVL48
 2186 0576 540B0000 		.4byte	0xb54
 2187 057a 00       		.byte	0
 2188 057b 12       		.uleb128 0x12
 2189 057c 18000000 		.4byte	.LVL4
 2190 0580 610B0000 		.4byte	0xb61
 2191 0584 8F050000 		.4byte	0x58f
 2192 0588 0E       		.uleb128 0xe
 2193 0589 01       		.uleb128 0x1
 2194 058a 50       		.byte	0x50
 2195 058b 02       		.uleb128 0x2
 2196 058c 74       		.byte	0x74
 2197 058d 00       		.sleb128 0
 2198 058e 00       		.byte	0
 2199 058f 12       		.uleb128 0x12
 2200 0590 26000000 		.4byte	.LVL5
 2201 0594 720B0000 		.4byte	0xb72
 2202 0598 A2050000 		.4byte	0x5a2
 2203 059c 0E       		.uleb128 0xe
 2204 059d 01       		.uleb128 0x1
 2205 059e 50       		.byte	0x50
 2206 059f 01       		.uleb128 0x1
 2207 05a0 31       		.byte	0x31
 2208 05a1 00       		.byte	0
 2209 05a2 12       		.uleb128 0x12
 2210 05a3 2C000000 		.4byte	.LVL6
 2211 05a7 830B0000 		.4byte	0xb83
 2212 05ab B5050000 		.4byte	0x5b5
 2213 05af 0E       		.uleb128 0xe
 2214 05b0 01       		.uleb128 0x1
 2215 05b1 50       		.byte	0x50
 2216 05b2 01       		.uleb128 0x1
 2217 05b3 40       		.byte	0x40
 2218 05b4 00       		.byte	0
 2219 05b5 0C       		.uleb128 0xc
 2220 05b6 3A000000 		.4byte	.LVL7
 2221 05ba 940B0000 		.4byte	0xb94
 2222 05be 0C       		.uleb128 0xc
 2223 05bf 60000000 		.4byte	.LVL11
 2224 05c3 A10B0000 		.4byte	0xba1
 2225 05c7 12       		.uleb128 0x12
 2226 05c8 66000000 		.4byte	.LVL12
 2227 05cc 830B0000 		.4byte	0xb83
 2228 05d0 DA050000 		.4byte	0x5da
 2229 05d4 0E       		.uleb128 0xe
 2230 05d5 01       		.uleb128 0x1
 2231 05d6 50       		.byte	0x50
 2232 05d7 01       		.uleb128 0x1
 2233 05d8 31       		.byte	0x31
 2234 05d9 00       		.byte	0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 55


 2235 05da 0C       		.uleb128 0xc
 2236 05db 8A000000 		.4byte	.LVL13
 2237 05df AE0B0000 		.4byte	0xbae
 2238 05e3 12       		.uleb128 0x12
 2239 05e4 E6000000 		.4byte	.LVL14
 2240 05e8 720B0000 		.4byte	0xb72
 2241 05ec F6050000 		.4byte	0x5f6
 2242 05f0 0E       		.uleb128 0xe
 2243 05f1 01       		.uleb128 0x1
 2244 05f2 50       		.byte	0x50
 2245 05f3 01       		.uleb128 0x1
 2246 05f4 36       		.byte	0x36
 2247 05f5 00       		.byte	0
 2248 05f6 12       		.uleb128 0x12
 2249 05f7 42010000 		.4byte	.LVL15
 2250 05fb 830B0000 		.4byte	0xb83
 2251 05ff 0A060000 		.4byte	0x60a
 2252 0603 0E       		.uleb128 0xe
 2253 0604 01       		.uleb128 0x1
 2254 0605 50       		.byte	0x50
 2255 0606 02       		.uleb128 0x2
 2256 0607 09       		.byte	0x9
 2257 0608 E8       		.byte	0xe8
 2258 0609 00       		.byte	0
 2259 060a 0C       		.uleb128 0xc
 2260 060b B0010000 		.4byte	.LVL16
 2261 060f FA0A0000 		.4byte	0xafa
 2262 0613 0C       		.uleb128 0xc
 2263 0614 CA010000 		.4byte	.LVL17
 2264 0618 BB0B0000 		.4byte	0xbbb
 2265 061c 0C       		.uleb128 0xc
 2266 061d CE010000 		.4byte	.LVL18
 2267 0621 C80B0000 		.4byte	0xbc8
 2268 0625 12       		.uleb128 0x12
 2269 0626 DE010000 		.4byte	.LVL19
 2270 062a 830B0000 		.4byte	0xb83
 2271 062e 38060000 		.4byte	0x638
 2272 0632 0E       		.uleb128 0xe
 2273 0633 01       		.uleb128 0x1
 2274 0634 50       		.byte	0x50
 2275 0635 01       		.uleb128 0x1
 2276 0636 32       		.byte	0x32
 2277 0637 00       		.byte	0
 2278 0638 0C       		.uleb128 0xc
 2279 0639 02020000 		.4byte	.LVL20
 2280 063d 360B0000 		.4byte	0xb36
 2281 0641 0C       		.uleb128 0xc
 2282 0642 34020000 		.4byte	.LVL21
 2283 0646 D50B0000 		.4byte	0xbd5
 2284 064a 0C       		.uleb128 0xc
 2285 064b 38020000 		.4byte	.LVL22
 2286 064f E20B0000 		.4byte	0xbe2
 2287 0653 0C       		.uleb128 0xc
 2288 0654 3C020000 		.4byte	.LVL23
 2289 0658 EF0B0000 		.4byte	0xbef
 2290 065c 0C       		.uleb128 0xc
 2291 065d 40020000 		.4byte	.LVL24
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 56


 2292 0661 FC0B0000 		.4byte	0xbfc
 2293 0665 12       		.uleb128 0x12
 2294 0666 6A020000 		.4byte	.LVL25
 2295 066a 830B0000 		.4byte	0xb83
 2296 066e 78060000 		.4byte	0x678
 2297 0672 0E       		.uleb128 0xe
 2298 0673 01       		.uleb128 0x1
 2299 0674 50       		.byte	0x50
 2300 0675 01       		.uleb128 0x1
 2301 0676 34       		.byte	0x34
 2302 0677 00       		.byte	0
 2303 0678 0C       		.uleb128 0xc
 2304 0679 D8030000 		.4byte	.LVL68
 2305 067d 090C0000 		.4byte	0xc09
 2306 0681 0C       		.uleb128 0xc
 2307 0682 EC030000 		.4byte	.LVL69
 2308 0686 BB0B0000 		.4byte	0xbbb
 2309 068a 00       		.byte	0
 2310 068b 13       		.uleb128 0x13
 2311 068c E8010000 		.4byte	.LASF152
 2312 0690 01       		.byte	0x1
 2313 0691 0E02     		.2byte	0x20e
 2314 0693 00000000 		.4byte	.LFB68
 2315 0697 E4010000 		.4byte	.LFE68-.LFB68
 2316 069b 01       		.uleb128 0x1
 2317 069c 9C       		.byte	0x9c
 2318 069d 57080000 		.4byte	0x857
 2319 06a1 11       		.uleb128 0x11
 2320 06a2 00070000 		.4byte	.LASF96
 2321 06a6 01       		.byte	0x1
 2322 06a7 1E02     		.2byte	0x21e
 2323 06a9 57080000 		.4byte	0x857
 2324 06ad 5C010000 		.4byte	.LLST5
 2325 06b1 11       		.uleb128 0x11
 2326 06b2 CD030000 		.4byte	.LASF97
 2327 06b6 01       		.byte	0x1
 2328 06b7 1F02     		.2byte	0x21f
 2329 06b9 B4000000 		.4byte	0xb4
 2330 06bd 6F010000 		.4byte	.LLST6
 2331 06c1 11       		.uleb128 0x11
 2332 06c2 91050000 		.4byte	.LASF98
 2333 06c6 01       		.byte	0x1
 2334 06c7 2102     		.2byte	0x221
 2335 06c9 25000000 		.4byte	0x25
 2336 06cd 8D010000 		.4byte	.LLST7
 2337 06d1 0C       		.uleb128 0xc
 2338 06d2 06000000 		.4byte	.LVL70
 2339 06d6 FA0A0000 		.4byte	0xafa
 2340 06da 12       		.uleb128 0x12
 2341 06db 2C000000 		.4byte	.LVL77
 2342 06df 160C0000 		.4byte	0xc16
 2343 06e3 EE060000 		.4byte	0x6ee
 2344 06e7 0E       		.uleb128 0xe
 2345 06e8 01       		.uleb128 0x1
 2346 06e9 50       		.byte	0x50
 2347 06ea 02       		.uleb128 0x2
 2348 06eb 08       		.byte	0x8
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 57


 2349 06ec 20       		.byte	0x20
 2350 06ed 00       		.byte	0
 2351 06ee 12       		.uleb128 0x12
 2352 06ef 5E000000 		.4byte	.LVL78
 2353 06f3 270C0000 		.4byte	0xc27
 2354 06f7 02070000 		.4byte	0x702
 2355 06fb 0E       		.uleb128 0xe
 2356 06fc 01       		.uleb128 0x1
 2357 06fd 50       		.byte	0x50
 2358 06fe 02       		.uleb128 0x2
 2359 06ff 77       		.byte	0x77
 2360 0700 00       		.sleb128 0
 2361 0701 00       		.byte	0
 2362 0702 12       		.uleb128 0x12
 2363 0703 64000000 		.4byte	.LVL79
 2364 0707 430B0000 		.4byte	0xb43
 2365 070b 16070000 		.4byte	0x716
 2366 070f 0E       		.uleb128 0xe
 2367 0710 01       		.uleb128 0x1
 2368 0711 50       		.byte	0x50
 2369 0712 02       		.uleb128 0x2
 2370 0713 77       		.byte	0x77
 2371 0714 00       		.sleb128 0
 2372 0715 00       		.byte	0
 2373 0716 12       		.uleb128 0x12
 2374 0717 7C000000 		.4byte	.LVL80
 2375 071b 720B0000 		.4byte	0xb72
 2376 071f 29070000 		.4byte	0x729
 2377 0723 0E       		.uleb128 0xe
 2378 0724 01       		.uleb128 0x1
 2379 0725 50       		.byte	0x50
 2380 0726 01       		.uleb128 0x1
 2381 0727 3B       		.byte	0x3b
 2382 0728 00       		.byte	0
 2383 0729 12       		.uleb128 0x12
 2384 072a 84000000 		.4byte	.LVL81
 2385 072e 270C0000 		.4byte	0xc27
 2386 0732 3C070000 		.4byte	0x73c
 2387 0736 0E       		.uleb128 0xe
 2388 0737 01       		.uleb128 0x1
 2389 0738 50       		.byte	0x50
 2390 0739 01       		.uleb128 0x1
 2391 073a 30       		.byte	0x30
 2392 073b 00       		.byte	0
 2393 073c 12       		.uleb128 0x12
 2394 073d 8A000000 		.4byte	.LVL82
 2395 0741 430B0000 		.4byte	0xb43
 2396 0745 4F070000 		.4byte	0x74f
 2397 0749 0E       		.uleb128 0xe
 2398 074a 01       		.uleb128 0x1
 2399 074b 50       		.byte	0x50
 2400 074c 01       		.uleb128 0x1
 2401 074d 30       		.byte	0x30
 2402 074e 00       		.byte	0
 2403 074f 0C       		.uleb128 0xc
 2404 0750 8E000000 		.4byte	.LVL83
 2405 0754 3D0C0000 		.4byte	0xc3d
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 58


 2406 0758 0C       		.uleb128 0xc
 2407 0759 94000000 		.4byte	.LVL84
 2408 075d B9040000 		.4byte	0x4b9
 2409 0761 0C       		.uleb128 0xc
 2410 0762 A6000000 		.4byte	.LVL86
 2411 0766 4A0C0000 		.4byte	0xc4a
 2412 076a 12       		.uleb128 0x12
 2413 076b EC000000 		.4byte	.LVL87
 2414 076f 270C0000 		.4byte	0xc27
 2415 0773 88070000 		.4byte	0x788
 2416 0777 0E       		.uleb128 0xe
 2417 0778 01       		.uleb128 0x1
 2418 0779 51       		.byte	0x51
 2419 077a 03       		.uleb128 0x3
 2420 077b F5       		.byte	0xf5
 2421 077c 05       		.uleb128 0x5
 2422 077d 25       		.uleb128 0x25
 2423 077e 0E       		.uleb128 0xe
 2424 077f 01       		.uleb128 0x1
 2425 0780 50       		.byte	0x50
 2426 0781 05       		.uleb128 0x5
 2427 0782 74       		.byte	0x74
 2428 0783 00       		.sleb128 0
 2429 0784 08       		.byte	0x8
 2430 0785 30       		.byte	0x30
 2431 0786 1A       		.byte	0x1a
 2432 0787 00       		.byte	0
 2433 0788 12       		.uleb128 0x12
 2434 0789 F6000000 		.4byte	.LVL88
 2435 078d 5B0C0000 		.4byte	0xc5b
 2436 0791 9B070000 		.4byte	0x79b
 2437 0795 0E       		.uleb128 0xe
 2438 0796 01       		.uleb128 0x1
 2439 0797 51       		.byte	0x51
 2440 0798 01       		.uleb128 0x1
 2441 0799 31       		.byte	0x31
 2442 079a 00       		.byte	0
 2443 079b 12       		.uleb128 0x12
 2444 079c 0E010000 		.4byte	.LVL89
 2445 07a0 430B0000 		.4byte	0xb43
 2446 07a4 B2070000 		.4byte	0x7b2
 2447 07a8 0E       		.uleb128 0xe
 2448 07a9 01       		.uleb128 0x1
 2449 07aa 50       		.byte	0x50
 2450 07ab 05       		.uleb128 0x5
 2451 07ac 74       		.byte	0x74
 2452 07ad 00       		.sleb128 0
 2453 07ae 08       		.byte	0x8
 2454 07af 40       		.byte	0x40
 2455 07b0 1A       		.byte	0x1a
 2456 07b1 00       		.byte	0
 2457 07b2 12       		.uleb128 0x12
 2458 07b3 18010000 		.4byte	.LVL90
 2459 07b7 5B0C0000 		.4byte	0xc5b
 2460 07bb C5070000 		.4byte	0x7c5
 2461 07bf 0E       		.uleb128 0xe
 2462 07c0 01       		.uleb128 0x1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 59


 2463 07c1 51       		.byte	0x51
 2464 07c2 01       		.uleb128 0x1
 2465 07c3 31       		.byte	0x31
 2466 07c4 00       		.byte	0
 2467 07c5 12       		.uleb128 0x12
 2468 07c6 30010000 		.4byte	.LVL91
 2469 07ca 0B0B0000 		.4byte	0xb0b
 2470 07ce D8070000 		.4byte	0x7d8
 2471 07d2 0E       		.uleb128 0xe
 2472 07d3 01       		.uleb128 0x1
 2473 07d4 50       		.byte	0x50
 2474 07d5 01       		.uleb128 0x1
 2475 07d6 32       		.byte	0x32
 2476 07d7 00       		.byte	0
 2477 07d8 12       		.uleb128 0x12
 2478 07d9 4E010000 		.4byte	.LVL92
 2479 07dd 270C0000 		.4byte	0xc27
 2480 07e1 EB070000 		.4byte	0x7eb
 2481 07e5 0E       		.uleb128 0xe
 2482 07e6 01       		.uleb128 0x1
 2483 07e7 50       		.byte	0x50
 2484 07e8 01       		.uleb128 0x1
 2485 07e9 30       		.byte	0x30
 2486 07ea 00       		.byte	0
 2487 07eb 12       		.uleb128 0x12
 2488 07ec 70010000 		.4byte	.LVL93
 2489 07f0 720B0000 		.4byte	0xb72
 2490 07f4 FE070000 		.4byte	0x7fe
 2491 07f8 0E       		.uleb128 0xe
 2492 07f9 01       		.uleb128 0x1
 2493 07fa 50       		.byte	0x50
 2494 07fb 01       		.uleb128 0x1
 2495 07fc 3A       		.byte	0x3a
 2496 07fd 00       		.byte	0
 2497 07fe 12       		.uleb128 0x12
 2498 07ff 92010000 		.4byte	.LVL94
 2499 0803 270C0000 		.4byte	0xc27
 2500 0807 1C080000 		.4byte	0x81c
 2501 080b 0E       		.uleb128 0xe
 2502 080c 01       		.uleb128 0x1
 2503 080d 51       		.byte	0x51
 2504 080e 03       		.uleb128 0x3
 2505 080f F5       		.byte	0xf5
 2506 0810 05       		.uleb128 0x5
 2507 0811 25       		.uleb128 0x25
 2508 0812 0E       		.uleb128 0xe
 2509 0813 01       		.uleb128 0x1
 2510 0814 50       		.byte	0x50
 2511 0815 05       		.uleb128 0x5
 2512 0816 74       		.byte	0x74
 2513 0817 00       		.sleb128 0
 2514 0818 08       		.byte	0x8
 2515 0819 30       		.byte	0x30
 2516 081a 1A       		.byte	0x1a
 2517 081b 00       		.byte	0
 2518 081c 12       		.uleb128 0x12
 2519 081d A2010000 		.4byte	.LVL95
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 60


 2520 0821 0B0B0000 		.4byte	0xb0b
 2521 0825 2F080000 		.4byte	0x82f
 2522 0829 0E       		.uleb128 0xe
 2523 082a 01       		.uleb128 0x1
 2524 082b 50       		.byte	0x50
 2525 082c 01       		.uleb128 0x1
 2526 082d 32       		.byte	0x32
 2527 082e 00       		.byte	0
 2528 082f 12       		.uleb128 0x12
 2529 0830 BE010000 		.4byte	.LVL96
 2530 0834 270C0000 		.4byte	0xc27
 2531 0838 4D080000 		.4byte	0x84d
 2532 083c 0E       		.uleb128 0xe
 2533 083d 01       		.uleb128 0x1
 2534 083e 51       		.byte	0x51
 2535 083f 03       		.uleb128 0x3
 2536 0840 F5       		.byte	0xf5
 2537 0841 05       		.uleb128 0x5
 2538 0842 25       		.uleb128 0x25
 2539 0843 0E       		.uleb128 0xe
 2540 0844 01       		.uleb128 0x1
 2541 0845 50       		.byte	0x50
 2542 0846 05       		.uleb128 0x5
 2543 0847 74       		.byte	0x74
 2544 0848 00       		.sleb128 0
 2545 0849 08       		.byte	0x8
 2546 084a 30       		.byte	0x30
 2547 084b 1A       		.byte	0x1a
 2548 084c 00       		.byte	0
 2549 084d 0C       		.uleb128 0xc
 2550 084e CC010000 		.4byte	.LVL97
 2551 0852 B9040000 		.4byte	0x4b9
 2552 0856 00       		.byte	0
 2553 0857 05       		.uleb128 0x5
 2554 0858 04       		.byte	0x4
 2555 0859 74030000 		.4byte	0x374
 2556 085d 0B       		.uleb128 0xb
 2557 085e 52020000 		.4byte	.LASF99
 2558 0862 01       		.byte	0x1
 2559 0863 D5       		.byte	0xd5
 2560 0864 00000000 		.4byte	.LFB66
 2561 0868 2C000000 		.4byte	.LFE66-.LFB66
 2562 086c 01       		.uleb128 0x1
 2563 086d 9C       		.byte	0x9c
 2564 086e 8E080000 		.4byte	0x88e
 2565 0872 0C       		.uleb128 0xc
 2566 0873 06000000 		.4byte	.LVL99
 2567 0877 B9040000 		.4byte	0x4b9
 2568 087b 0C       		.uleb128 0xc
 2569 087c 10000000 		.4byte	.LVL100
 2570 0880 8B060000 		.4byte	0x68b
 2571 0884 0C       		.uleb128 0xc
 2572 0885 1A000000 		.4byte	.LVL101
 2573 0889 710C0000 		.4byte	0xc71
 2574 088d 00       		.byte	0
 2575 088e 0B       		.uleb128 0xb
 2576 088f 2C050000 		.4byte	.LASF100
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 61


 2577 0893 01       		.byte	0x1
 2578 0894 26       		.byte	0x26
 2579 0895 00000000 		.4byte	.LFB63
 2580 0899 6C010000 		.4byte	.LFE63-.LFB63
 2581 089d 01       		.uleb128 0x1
 2582 089e 9C       		.byte	0x9c
 2583 089f CD090000 		.4byte	0x9cd
 2584 08a3 0F       		.uleb128 0xf
 2585 08a4 98080000 		.4byte	.LASF101
 2586 08a8 01       		.byte	0x1
 2587 08a9 47       		.byte	0x47
 2588 08aa B4000000 		.4byte	0xb4
 2589 08ae AB010000 		.4byte	.LLST8
 2590 08b2 0F       		.uleb128 0xf
 2591 08b3 B0090000 		.4byte	.LASF102
 2592 08b7 01       		.byte	0x1
 2593 08b8 48       		.byte	0x48
 2594 08b9 B4000000 		.4byte	0xb4
 2595 08bd F5010000 		.4byte	.LLST9
 2596 08c1 14       		.uleb128 0x14
 2597 08c2 6300     		.ascii	"c\000"
 2598 08c4 01       		.byte	0x1
 2599 08c5 49       		.byte	0x49
 2600 08c6 B4000000 		.4byte	0xb4
 2601 08ca 6B020000 		.4byte	.LLST10
 2602 08ce 0C       		.uleb128 0xc
 2603 08cf 12000000 		.4byte	.LVL102
 2604 08d3 7E0C0000 		.4byte	0xc7e
 2605 08d7 12       		.uleb128 0x12
 2606 08d8 20000000 		.4byte	.LVL103
 2607 08dc 720B0000 		.4byte	0xb72
 2608 08e0 EA080000 		.4byte	0x8ea
 2609 08e4 0E       		.uleb128 0xe
 2610 08e5 01       		.uleb128 0x1
 2611 08e6 50       		.byte	0x50
 2612 08e7 01       		.uleb128 0x1
 2613 08e8 37       		.byte	0x37
 2614 08e9 00       		.byte	0
 2615 08ea 12       		.uleb128 0x12
 2616 08eb 30000000 		.4byte	.LVL104
 2617 08ef 720B0000 		.4byte	0xb72
 2618 08f3 FD080000 		.4byte	0x8fd
 2619 08f7 0E       		.uleb128 0xe
 2620 08f8 01       		.uleb128 0x1
 2621 08f9 50       		.byte	0x50
 2622 08fa 01       		.uleb128 0x1
 2623 08fb 32       		.byte	0x32
 2624 08fc 00       		.byte	0
 2625 08fd 0C       		.uleb128 0xc
 2626 08fe 46000000 		.4byte	.LVL105
 2627 0902 4A0C0000 		.4byte	0xc4a
 2628 0906 0C       		.uleb128 0xc
 2629 0907 56000000 		.4byte	.LVL106
 2630 090b 5D080000 		.4byte	0x85d
 2631 090f 12       		.uleb128 0x12
 2632 0910 5C000000 		.4byte	.LVL107
 2633 0914 8F0C0000 		.4byte	0xc8f
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 62


 2634 0918 26090000 		.4byte	0x926
 2635 091c 0E       		.uleb128 0xe
 2636 091d 01       		.uleb128 0x1
 2637 091e 50       		.byte	0x50
 2638 091f 05       		.uleb128 0x5
 2639 0920 03       		.byte	0x3
 2640 0921 00000000 		.4byte	.LANCHOR0
 2641 0925 00       		.byte	0
 2642 0926 0C       		.uleb128 0xc
 2643 0927 6A000000 		.4byte	.LVL109
 2644 092b 5D080000 		.4byte	0x85d
 2645 092f 12       		.uleb128 0x12
 2646 0930 84000000 		.4byte	.LVL110
 2647 0934 A00C0000 		.4byte	0xca0
 2648 0938 42090000 		.4byte	0x942
 2649 093c 0E       		.uleb128 0xe
 2650 093d 01       		.uleb128 0x1
 2651 093e 50       		.byte	0x50
 2652 093f 01       		.uleb128 0x1
 2653 0940 3B       		.byte	0x3b
 2654 0941 00       		.byte	0
 2655 0942 12       		.uleb128 0x12
 2656 0943 96000000 		.4byte	.LVL114
 2657 0947 A00C0000 		.4byte	0xca0
 2658 094b 55090000 		.4byte	0x955
 2659 094f 0E       		.uleb128 0xe
 2660 0950 01       		.uleb128 0x1
 2661 0951 50       		.byte	0x50
 2662 0952 01       		.uleb128 0x1
 2663 0953 30       		.byte	0x30
 2664 0954 00       		.byte	0
 2665 0955 12       		.uleb128 0x12
 2666 0956 A6000000 		.4byte	.LVL118
 2667 095a B10C0000 		.4byte	0xcb1
 2668 095e 6C090000 		.4byte	0x96c
 2669 0962 0E       		.uleb128 0xe
 2670 0963 01       		.uleb128 0x1
 2671 0964 50       		.byte	0x50
 2672 0965 05       		.uleb128 0x5
 2673 0966 03       		.byte	0x3
 2674 0967 00000000 		.4byte	.LANCHOR0
 2675 096b 00       		.byte	0
 2676 096c 0C       		.uleb128 0xc
 2677 096d AA000000 		.4byte	.LVL119
 2678 0971 A00C0000 		.4byte	0xca0
 2679 0975 12       		.uleb128 0x12
 2680 0976 C0000000 		.4byte	.LVL123
 2681 097a A00C0000 		.4byte	0xca0
 2682 097e 88090000 		.4byte	0x988
 2683 0982 0E       		.uleb128 0xe
 2684 0983 01       		.uleb128 0x1
 2685 0984 50       		.byte	0x50
 2686 0985 01       		.uleb128 0x1
 2687 0986 39       		.byte	0x39
 2688 0987 00       		.byte	0
 2689 0988 12       		.uleb128 0x12
 2690 0989 CC000000 		.4byte	.LVL127
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 63


 2691 098d C60C0000 		.4byte	0xcc6
 2692 0991 9F090000 		.4byte	0x99f
 2693 0995 0E       		.uleb128 0xe
 2694 0996 01       		.uleb128 0x1
 2695 0997 50       		.byte	0x50
 2696 0998 05       		.uleb128 0x5
 2697 0999 03       		.byte	0x3
 2698 099a 00000000 		.4byte	.LANCHOR0
 2699 099e 00       		.byte	0
 2700 099f 0C       		.uleb128 0xc
 2701 09a0 D0000000 		.4byte	.LVL128
 2702 09a4 A00C0000 		.4byte	0xca0
 2703 09a8 0C       		.uleb128 0xc
 2704 09a9 36010000 		.4byte	.LVL141
 2705 09ad 710C0000 		.4byte	0xc71
 2706 09b1 0C       		.uleb128 0xc
 2707 09b2 40010000 		.4byte	.LVL143
 2708 09b6 DB0C0000 		.4byte	0xcdb
 2709 09ba 0C       		.uleb128 0xc
 2710 09bb 48010000 		.4byte	.LVL144
 2711 09bf 8B040000 		.4byte	0x48b
 2712 09c3 0C       		.uleb128 0xc
 2713 09c4 4C010000 		.4byte	.LVL145
 2714 09c8 5D080000 		.4byte	0x85d
 2715 09cc 00       		.byte	0
 2716 09cd 0B       		.uleb128 0xb
 2717 09ce F7040000 		.4byte	.LASF103
 2718 09d2 01       		.byte	0x1
 2719 09d3 B1       		.byte	0xb1
 2720 09d4 00000000 		.4byte	.LFB64
 2721 09d8 28000000 		.4byte	.LFE64-.LFB64
 2722 09dc 01       		.uleb128 0x1
 2723 09dd 9C       		.byte	0x9c
 2724 09de FE090000 		.4byte	0x9fe
 2725 09e2 0C       		.uleb128 0xc
 2726 09e3 06000000 		.4byte	.LVL147
 2727 09e7 8B040000 		.4byte	0x48b
 2728 09eb 0C       		.uleb128 0xc
 2729 09ec 0A000000 		.4byte	.LVL148
 2730 09f0 5D080000 		.4byte	0x85d
 2731 09f4 0C       		.uleb128 0xc
 2732 09f5 14000000 		.4byte	.LVL149
 2733 09f9 FA0A0000 		.4byte	0xafa
 2734 09fd 00       		.byte	0
 2735 09fe 09       		.uleb128 0x9
 2736 09ff E7000000 		.4byte	0xe7
 2737 0a03 0E0A0000 		.4byte	0xa0e
 2738 0a07 0A       		.uleb128 0xa
 2739 0a08 EE000000 		.4byte	0xee
 2740 0a0c 4F       		.byte	0x4f
 2741 0a0d 00       		.byte	0
 2742 0a0e 15       		.uleb128 0x15
 2743 0a0f 6A080000 		.4byte	.LASF104
 2744 0a13 01       		.byte	0x1
 2745 0a14 1E       		.byte	0x1e
 2746 0a15 FE090000 		.4byte	0x9fe
 2747 0a19 05       		.uleb128 0x5
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 64


 2748 0a1a 03       		.byte	0x3
 2749 0a1b 00000000 		.4byte	line
 2750 0a1f 16       		.uleb128 0x16
 2751 0a20 77060000 		.4byte	.LASF105
 2752 0a24 08       		.byte	0x8
 2753 0a25 9606     		.2byte	0x696
 2754 0a27 2B0A0000 		.4byte	0xa2b
 2755 0a2b 06       		.uleb128 0x6
 2756 0a2c CA000000 		.4byte	0xca
 2757 0a30 17       		.uleb128 0x17
 2758 0a31 DF030000 		.4byte	.LASF106
 2759 0a35 04       		.byte	0x4
 2760 0a36 6A       		.byte	0x6a
 2761 0a37 04020000 		.4byte	0x204
 2762 0a3b 18       		.uleb128 0x18
 2763 0a3c 73797300 		.ascii	"sys\000"
 2764 0a40 05       		.byte	0x5
 2765 0a41 92       		.byte	0x92
 2766 0a42 C0020000 		.4byte	0x2c0
 2767 0a46 09       		.uleb128 0x9
 2768 0a47 CA000000 		.4byte	0xca
 2769 0a4b 560A0000 		.4byte	0xa56
 2770 0a4f 0A       		.uleb128 0xa
 2771 0a50 EE000000 		.4byte	0xee
 2772 0a54 02       		.byte	0x2
 2773 0a55 00       		.byte	0
 2774 0a56 19       		.uleb128 0x19
 2775 0a57 84050000 		.4byte	.LASF107
 2776 0a5b 05       		.byte	0x5
 2777 0a5c 95       		.byte	0x95
 2778 0a5d 460A0000 		.4byte	0xa46
 2779 0a61 05       		.uleb128 0x5
 2780 0a62 03       		.byte	0x3
 2781 0a63 00000000 		.4byte	sys_position
 2782 0a67 19       		.uleb128 0x19
 2783 0a68 C8040000 		.4byte	.LASF108
 2784 0a6c 05       		.byte	0x5
 2785 0a6d 96       		.byte	0x96
 2786 0a6e 460A0000 		.4byte	0xa46
 2787 0a72 05       		.uleb128 0x5
 2788 0a73 03       		.byte	0x3
 2789 0a74 00000000 		.4byte	sys_probe_position
 2790 0a78 19       		.uleb128 0x19
 2791 0a79 B0000000 		.4byte	.LASF109
 2792 0a7d 05       		.byte	0x5
 2793 0a7e 98       		.byte	0x98
 2794 0a7f FB000000 		.4byte	0xfb
 2795 0a83 05       		.uleb128 0x5
 2796 0a84 03       		.byte	0x3
 2797 0a85 00000000 		.4byte	sys_probe_state
 2798 0a89 19       		.uleb128 0x19
 2799 0a8a 2B030000 		.4byte	.LASF110
 2800 0a8e 05       		.byte	0x5
 2801 0a8f 99       		.byte	0x99
 2802 0a90 FB000000 		.4byte	0xfb
 2803 0a94 05       		.uleb128 0x5
 2804 0a95 03       		.byte	0x3
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 65


 2805 0a96 00000000 		.4byte	sys_rt_exec_state
 2806 0a9a 19       		.uleb128 0x19
 2807 0a9b A9080000 		.4byte	.LASF111
 2808 0a9f 05       		.byte	0x5
 2809 0aa0 9A       		.byte	0x9a
 2810 0aa1 FB000000 		.4byte	0xfb
 2811 0aa5 05       		.uleb128 0x5
 2812 0aa6 03       		.byte	0x3
 2813 0aa7 00000000 		.4byte	sys_rt_exec_alarm
 2814 0aab 19       		.uleb128 0x19
 2815 0aac 21060000 		.4byte	.LASF112
 2816 0ab0 05       		.byte	0x5
 2817 0ab1 9B       		.byte	0x9b
 2818 0ab2 FB000000 		.4byte	0xfb
 2819 0ab6 05       		.uleb128 0x5
 2820 0ab7 03       		.byte	0x3
 2821 0ab8 00000000 		.4byte	sys_rt_exec_motion_override
 2822 0abc 19       		.uleb128 0x19
 2823 0abd 20070000 		.4byte	.LASF113
 2824 0ac1 05       		.byte	0x5
 2825 0ac2 9C       		.byte	0x9c
 2826 0ac3 FB000000 		.4byte	0xfb
 2827 0ac7 05       		.uleb128 0x5
 2828 0ac8 03       		.byte	0x3
 2829 0ac9 00000000 		.4byte	sys_rt_exec_accessory_override
 2830 0acd 19       		.uleb128 0x19
 2831 0ace 86030000 		.4byte	.LASF114
 2832 0ad2 05       		.byte	0x5
 2833 0ad3 A0       		.byte	0xa0
 2834 0ad4 FB000000 		.4byte	0xfb
 2835 0ad8 05       		.uleb128 0x5
 2836 0ad9 03       		.byte	0x3
 2837 0ada 00000000 		.4byte	sys_rt_exec_debug
 2838 0ade 17       		.uleb128 0x17
 2839 0adf 55050000 		.4byte	.LASF115
 2840 0ae3 07       		.byte	0x7
 2841 0ae4 DF       		.byte	0xdf
 2842 0ae5 80040000 		.4byte	0x480
 2843 0ae9 19       		.uleb128 0x19
 2844 0aea 06030000 		.4byte	.LASF116
 2845 0aee 09       		.byte	0x9
 2846 0aef 11       		.byte	0x11
 2847 0af0 B4000000 		.4byte	0xb4
 2848 0af4 05       		.uleb128 0x5
 2849 0af5 03       		.byte	0x3
 2850 0af6 00000000 		.4byte	exec_lcd_status
 2851 0afa 1A       		.uleb128 0x1a
 2852 0afb 76070000 		.4byte	.LASF117
 2853 0aff 06       		.byte	0x6
 2854 0b00 77       		.byte	0x77
 2855 0b01 57080000 		.4byte	0x857
 2856 0b05 0B0B0000 		.4byte	0xb0b
 2857 0b09 1B       		.uleb128 0x1b
 2858 0b0a 00       		.byte	0
 2859 0b0b 1C       		.uleb128 0x1c
 2860 0b0c 9F040000 		.4byte	.LASF118
 2861 0b10 05       		.byte	0x5
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 66


 2862 0b11 C5       		.byte	0xc5
 2863 0b12 1C0B0000 		.4byte	0xb1c
 2864 0b16 1D       		.uleb128 0x1d
 2865 0b17 B4000000 		.4byte	0xb4
 2866 0b1b 00       		.byte	0
 2867 0b1c 1E       		.uleb128 0x1e
 2868 0b1d 20090000 		.4byte	.LASF119
 2869 0b21 05       		.byte	0x5
 2870 0b22 CB       		.byte	0xcb
 2871 0b23 290B0000 		.4byte	0xb29
 2872 0b27 1B       		.uleb128 0x1b
 2873 0b28 00       		.byte	0
 2874 0b29 1E       		.uleb128 0x1e
 2875 0b2a A7050000 		.4byte	.LASF120
 2876 0b2e 06       		.byte	0x6
 2877 0b2f 83       		.byte	0x83
 2878 0b30 360B0000 		.4byte	0xb36
 2879 0b34 1B       		.uleb128 0x1b
 2880 0b35 00       		.byte	0
 2881 0b36 1E       		.uleb128 0x1e
 2882 0b37 5E050000 		.4byte	.LASF121
 2883 0b3b 06       		.byte	0x6
 2884 0b3c 89       		.byte	0x89
 2885 0b3d 430B0000 		.4byte	0xb43
 2886 0b41 1B       		.uleb128 0x1b
 2887 0b42 00       		.byte	0
 2888 0b43 1C       		.uleb128 0x1c
 2889 0b44 67030000 		.4byte	.LASF122
 2890 0b48 0A       		.byte	0xa
 2891 0b49 2E       		.byte	0x2e
 2892 0b4a 540B0000 		.4byte	0xb54
 2893 0b4e 1D       		.uleb128 0x1d
 2894 0b4f B4000000 		.4byte	0xb4
 2895 0b53 00       		.byte	0
 2896 0b54 1E       		.uleb128 0x1e
 2897 0b55 92020000 		.4byte	.LASF123
 2898 0b59 05       		.byte	0x5
 2899 0b5a CC       		.byte	0xcc
 2900 0b5b 610B0000 		.4byte	0xb61
 2901 0b5f 1B       		.uleb128 0x1b
 2902 0b60 00       		.byte	0
 2903 0b61 1C       		.uleb128 0x1c
 2904 0b62 78080000 		.4byte	.LASF124
 2905 0b66 0B       		.byte	0xb
 2906 0b67 62       		.byte	0x62
 2907 0b68 720B0000 		.4byte	0xb72
 2908 0b6c 1D       		.uleb128 0x1d
 2909 0b6d A9000000 		.4byte	0xa9
 2910 0b71 00       		.byte	0
 2911 0b72 1C       		.uleb128 0x1c
 2912 0b73 C0000000 		.4byte	.LASF125
 2913 0b77 0B       		.byte	0xb
 2914 0b78 65       		.byte	0x65
 2915 0b79 830B0000 		.4byte	0xb83
 2916 0b7d 1D       		.uleb128 0x1d
 2917 0b7e B4000000 		.4byte	0xb4
 2918 0b82 00       		.byte	0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 67


 2919 0b83 1C       		.uleb128 0x1c
 2920 0b84 D8060000 		.4byte	.LASF126
 2921 0b88 05       		.byte	0x5
 2922 0b89 C6       		.byte	0xc6
 2923 0b8a 940B0000 		.4byte	0xb94
 2924 0b8e 1D       		.uleb128 0x1d
 2925 0b8f B4000000 		.4byte	0xb4
 2926 0b93 00       		.byte	0
 2927 0b94 1E       		.uleb128 0x1e
 2928 0b95 4F030000 		.4byte	.LASF127
 2929 0b99 05       		.byte	0x5
 2930 0b9a C8       		.byte	0xc8
 2931 0b9b A10B0000 		.4byte	0xba1
 2932 0b9f 1B       		.uleb128 0x1b
 2933 0ba0 00       		.byte	0
 2934 0ba1 1E       		.uleb128 0x1e
 2935 0ba2 53080000 		.4byte	.LASF128
 2936 0ba6 0B       		.byte	0xb
 2937 0ba7 74       		.byte	0x74
 2938 0ba8 AE0B0000 		.4byte	0xbae
 2939 0bac 1B       		.uleb128 0x1b
 2940 0bad 00       		.byte	0
 2941 0bae 1E       		.uleb128 0x1e
 2942 0baf 13040000 		.4byte	.LASF129
 2943 0bb3 0C       		.byte	0xc
 2944 0bb4 38       		.byte	0x38
 2945 0bb5 BB0B0000 		.4byte	0xbbb
 2946 0bb9 1B       		.uleb128 0x1b
 2947 0bba 00       		.byte	0
 2948 0bbb 1E       		.uleb128 0x1e
 2949 0bbc C9060000 		.4byte	.LASF130
 2950 0bc0 0C       		.byte	0xc
 2951 0bc1 35       		.byte	0x35
 2952 0bc2 C80B0000 		.4byte	0xbc8
 2953 0bc6 1B       		.uleb128 0x1b
 2954 0bc7 00       		.byte	0
 2955 0bc8 1E       		.uleb128 0x1e
 2956 0bc9 8D080000 		.4byte	.LASF131
 2957 0bcd 0C       		.byte	0xc
 2958 0bce 23       		.byte	0x23
 2959 0bcf D50B0000 		.4byte	0xbd5
 2960 0bd3 1B       		.uleb128 0x1b
 2961 0bd4 00       		.byte	0
 2962 0bd5 1E       		.uleb128 0x1e
 2963 0bd6 F5060000 		.4byte	.LASF132
 2964 0bda 06       		.byte	0x6
 2965 0bdb 67       		.byte	0x67
 2966 0bdc E20B0000 		.4byte	0xbe2
 2967 0be0 1B       		.uleb128 0x1b
 2968 0be1 00       		.byte	0
 2969 0be2 1E       		.uleb128 0x1e
 2970 0be3 6F080000 		.4byte	.LASF133
 2971 0be7 0C       		.byte	0xc
 2972 0be8 2C       		.byte	0x2c
 2973 0be9 EF0B0000 		.4byte	0xbef
 2974 0bed 1B       		.uleb128 0x1b
 2975 0bee 00       		.byte	0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 68


 2976 0bef 1E       		.uleb128 0x1e
 2977 0bf0 65040000 		.4byte	.LASF134
 2978 0bf4 07       		.byte	0x7
 2979 0bf5 F0       		.byte	0xf0
 2980 0bf6 FC0B0000 		.4byte	0xbfc
 2981 0bfa 1B       		.uleb128 0x1b
 2982 0bfb 00       		.byte	0
 2983 0bfc 1E       		.uleb128 0x1e
 2984 0bfd 77010000 		.4byte	.LASF135
 2985 0c01 06       		.byte	0x6
 2986 0c02 86       		.byte	0x86
 2987 0c03 090C0000 		.4byte	0xc09
 2988 0c07 1B       		.uleb128 0x1b
 2989 0c08 00       		.byte	0
 2990 0c09 1E       		.uleb128 0x1e
 2991 0c0a 3F050000 		.4byte	.LASF136
 2992 0c0e 0B       		.byte	0xb
 2993 0c0f 87       		.byte	0x87
 2994 0c10 160C0000 		.4byte	0xc16
 2995 0c14 1B       		.uleb128 0x1b
 2996 0c15 00       		.byte	0
 2997 0c16 1C       		.uleb128 0x1c
 2998 0c17 5A090000 		.4byte	.LASF137
 2999 0c1b 05       		.byte	0x5
 3000 0c1c CA       		.byte	0xca
 3001 0c1d 270C0000 		.4byte	0xc27
 3002 0c21 1D       		.uleb128 0x1d
 3003 0c22 B4000000 		.4byte	0xb4
 3004 0c26 00       		.byte	0
 3005 0c27 1C       		.uleb128 0x1c
 3006 0c28 3D030000 		.4byte	.LASF138
 3007 0c2c 0D       		.byte	0xd
 3008 0c2d 33       		.byte	0x33
 3009 0c2e 3D0C0000 		.4byte	0xc3d
 3010 0c32 1D       		.uleb128 0x1d
 3011 0c33 B4000000 		.4byte	0xb4
 3012 0c37 1D       		.uleb128 0x1d
 3013 0c38 25000000 		.4byte	0x25
 3014 0c3c 00       		.byte	0
 3015 0c3d 1E       		.uleb128 0x1e
 3016 0c3e DD010000 		.4byte	.LASF139
 3017 0c42 0C       		.byte	0xc
 3018 0c43 26       		.byte	0x26
 3019 0c44 4A0C0000 		.4byte	0xc4a
 3020 0c48 1B       		.uleb128 0x1b
 3021 0c49 00       		.byte	0
 3022 0c4a 1A       		.uleb128 0x1a
 3023 0c4b 01020000 		.4byte	.LASF140
 3024 0c4f 05       		.byte	0x5
 3025 0c50 AA       		.byte	0xaa
 3026 0c51 B4000000 		.4byte	0xb4
 3027 0c55 5B0C0000 		.4byte	0xc5b
 3028 0c59 1B       		.uleb128 0x1b
 3029 0c5a 00       		.byte	0
 3030 0c5b 1C       		.uleb128 0x1c
 3031 0c5c 77020000 		.4byte	.LASF141
 3032 0c60 0E       		.byte	0xe
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 69


 3033 0c61 4B       		.byte	0x4b
 3034 0c62 710C0000 		.4byte	0xc71
 3035 0c66 1D       		.uleb128 0x1d
 3036 0c67 25000000 		.4byte	0x25
 3037 0c6b 1D       		.uleb128 0x1d
 3038 0c6c B4000000 		.4byte	0xb4
 3039 0c70 00       		.byte	0
 3040 0c71 1E       		.uleb128 0x1e
 3041 0c72 36010000 		.4byte	.LASF142
 3042 0c76 09       		.byte	0x9
 3043 0c77 41       		.byte	0x41
 3044 0c78 7E0C0000 		.4byte	0xc7e
 3045 0c7c 1B       		.uleb128 0x1b
 3046 0c7d 00       		.byte	0
 3047 0c7e 1A       		.uleb128 0x1a
 3048 0c7f 36020000 		.4byte	.LASF143
 3049 0c83 0F       		.byte	0xf
 3050 0c84 28       		.byte	0x28
 3051 0c85 B4000000 		.4byte	0xb4
 3052 0c89 8F0C0000 		.4byte	0xc8f
 3053 0c8d 1B       		.uleb128 0x1b
 3054 0c8e 00       		.byte	0
 3055 0c8f 1C       		.uleb128 0x1c
 3056 0c90 A3070000 		.4byte	.LASF144
 3057 0c94 05       		.byte	0x5
 3058 0c95 B0       		.byte	0xb0
 3059 0c96 A00C0000 		.4byte	0xca0
 3060 0c9a 1D       		.uleb128 0x1d
 3061 0c9b F5000000 		.4byte	0xf5
 3062 0c9f 00       		.byte	0
 3063 0ca0 1C       		.uleb128 0x1c
 3064 0ca1 C7010000 		.4byte	.LASF145
 3065 0ca5 0B       		.byte	0xb
 3066 0ca6 5F       		.byte	0x5f
 3067 0ca7 B10C0000 		.4byte	0xcb1
 3068 0cab 1D       		.uleb128 0x1d
 3069 0cac B4000000 		.4byte	0xb4
 3070 0cb0 00       		.byte	0
 3071 0cb1 1F       		.uleb128 0x1f
 3072 0cb2 84060000 		.4byte	.LASF146
 3073 0cb6 05       		.byte	0x5
 3074 0cb7 AD       		.byte	0xad
 3075 0cb8 B4000000 		.4byte	0xb4
 3076 0cbc C60C0000 		.4byte	0xcc6
 3077 0cc0 1D       		.uleb128 0x1d
 3078 0cc1 F5000000 		.4byte	0xf5
 3079 0cc5 00       		.byte	0
 3080 0cc6 1F       		.uleb128 0x1f
 3081 0cc7 13010000 		.4byte	.LASF147
 3082 0ccb 07       		.byte	0x7
 3083 0ccc ED       		.byte	0xed
 3084 0ccd B4000000 		.4byte	0xb4
 3085 0cd1 DB0C0000 		.4byte	0xcdb
 3086 0cd5 1D       		.uleb128 0x1d
 3087 0cd6 F5000000 		.4byte	0xf5
 3088 0cda 00       		.byte	0
 3089 0cdb 20       		.uleb128 0x20
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 70


 3090 0cdc B8020000 		.4byte	.LASF148
 3091 0ce0 10       		.byte	0x10
 3092 0ce1 32       		.byte	0x32
 3093 0ce2 B4000000 		.4byte	0xb4
 3094 0ce6 1B       		.uleb128 0x1b
 3095 0ce7 00       		.byte	0
 3096 0ce8 00       		.byte	0
 3097              		.section	.debug_abbrev,"",%progbits
 3098              	.Ldebug_abbrev0:
 3099 0000 01       		.uleb128 0x1
 3100 0001 11       		.uleb128 0x11
 3101 0002 01       		.byte	0x1
 3102 0003 25       		.uleb128 0x25
 3103 0004 0E       		.uleb128 0xe
 3104 0005 13       		.uleb128 0x13
 3105 0006 0B       		.uleb128 0xb
 3106 0007 03       		.uleb128 0x3
 3107 0008 0E       		.uleb128 0xe
 3108 0009 1B       		.uleb128 0x1b
 3109 000a 0E       		.uleb128 0xe
 3110 000b 55       		.uleb128 0x55
 3111 000c 17       		.uleb128 0x17
 3112 000d 11       		.uleb128 0x11
 3113 000e 01       		.uleb128 0x1
 3114 000f 10       		.uleb128 0x10
 3115 0010 17       		.uleb128 0x17
 3116 0011 00       		.byte	0
 3117 0012 00       		.byte	0
 3118 0013 02       		.uleb128 0x2
 3119 0014 24       		.uleb128 0x24
 3120 0015 00       		.byte	0
 3121 0016 0B       		.uleb128 0xb
 3122 0017 0B       		.uleb128 0xb
 3123 0018 3E       		.uleb128 0x3e
 3124 0019 0B       		.uleb128 0xb
 3125 001a 03       		.uleb128 0x3
 3126 001b 0E       		.uleb128 0xe
 3127 001c 00       		.byte	0
 3128 001d 00       		.byte	0
 3129 001e 03       		.uleb128 0x3
 3130 001f 16       		.uleb128 0x16
 3131 0020 00       		.byte	0
 3132 0021 03       		.uleb128 0x3
 3133 0022 0E       		.uleb128 0xe
 3134 0023 3A       		.uleb128 0x3a
 3135 0024 0B       		.uleb128 0xb
 3136 0025 3B       		.uleb128 0x3b
 3137 0026 0B       		.uleb128 0xb
 3138 0027 49       		.uleb128 0x49
 3139 0028 13       		.uleb128 0x13
 3140 0029 00       		.byte	0
 3141 002a 00       		.byte	0
 3142 002b 04       		.uleb128 0x4
 3143 002c 24       		.uleb128 0x24
 3144 002d 00       		.byte	0
 3145 002e 0B       		.uleb128 0xb
 3146 002f 0B       		.uleb128 0xb
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 71


 3147 0030 3E       		.uleb128 0x3e
 3148 0031 0B       		.uleb128 0xb
 3149 0032 03       		.uleb128 0x3
 3150 0033 08       		.uleb128 0x8
 3151 0034 00       		.byte	0
 3152 0035 00       		.byte	0
 3153 0036 05       		.uleb128 0x5
 3154 0037 0F       		.uleb128 0xf
 3155 0038 00       		.byte	0
 3156 0039 0B       		.uleb128 0xb
 3157 003a 0B       		.uleb128 0xb
 3158 003b 49       		.uleb128 0x49
 3159 003c 13       		.uleb128 0x13
 3160 003d 00       		.byte	0
 3161 003e 00       		.byte	0
 3162 003f 06       		.uleb128 0x6
 3163 0040 35       		.uleb128 0x35
 3164 0041 00       		.byte	0
 3165 0042 49       		.uleb128 0x49
 3166 0043 13       		.uleb128 0x13
 3167 0044 00       		.byte	0
 3168 0045 00       		.byte	0
 3169 0046 07       		.uleb128 0x7
 3170 0047 13       		.uleb128 0x13
 3171 0048 01       		.byte	0x1
 3172 0049 0B       		.uleb128 0xb
 3173 004a 0B       		.uleb128 0xb
 3174 004b 3A       		.uleb128 0x3a
 3175 004c 0B       		.uleb128 0xb
 3176 004d 3B       		.uleb128 0x3b
 3177 004e 0B       		.uleb128 0xb
 3178 004f 01       		.uleb128 0x1
 3179 0050 13       		.uleb128 0x13
 3180 0051 00       		.byte	0
 3181 0052 00       		.byte	0
 3182 0053 08       		.uleb128 0x8
 3183 0054 0D       		.uleb128 0xd
 3184 0055 00       		.byte	0
 3185 0056 03       		.uleb128 0x3
 3186 0057 0E       		.uleb128 0xe
 3187 0058 3A       		.uleb128 0x3a
 3188 0059 0B       		.uleb128 0xb
 3189 005a 3B       		.uleb128 0x3b
 3190 005b 0B       		.uleb128 0xb
 3191 005c 49       		.uleb128 0x49
 3192 005d 13       		.uleb128 0x13
 3193 005e 38       		.uleb128 0x38
 3194 005f 0B       		.uleb128 0xb
 3195 0060 00       		.byte	0
 3196 0061 00       		.byte	0
 3197 0062 09       		.uleb128 0x9
 3198 0063 01       		.uleb128 0x1
 3199 0064 01       		.byte	0x1
 3200 0065 49       		.uleb128 0x49
 3201 0066 13       		.uleb128 0x13
 3202 0067 01       		.uleb128 0x1
 3203 0068 13       		.uleb128 0x13
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 72


 3204 0069 00       		.byte	0
 3205 006a 00       		.byte	0
 3206 006b 0A       		.uleb128 0xa
 3207 006c 21       		.uleb128 0x21
 3208 006d 00       		.byte	0
 3209 006e 49       		.uleb128 0x49
 3210 006f 13       		.uleb128 0x13
 3211 0070 2F       		.uleb128 0x2f
 3212 0071 0B       		.uleb128 0xb
 3213 0072 00       		.byte	0
 3214 0073 00       		.byte	0
 3215 0074 0B       		.uleb128 0xb
 3216 0075 2E       		.uleb128 0x2e
 3217 0076 01       		.byte	0x1
 3218 0077 3F       		.uleb128 0x3f
 3219 0078 19       		.uleb128 0x19
 3220 0079 03       		.uleb128 0x3
 3221 007a 0E       		.uleb128 0xe
 3222 007b 3A       		.uleb128 0x3a
 3223 007c 0B       		.uleb128 0xb
 3224 007d 3B       		.uleb128 0x3b
 3225 007e 0B       		.uleb128 0xb
 3226 007f 11       		.uleb128 0x11
 3227 0080 01       		.uleb128 0x1
 3228 0081 12       		.uleb128 0x12
 3229 0082 06       		.uleb128 0x6
 3230 0083 40       		.uleb128 0x40
 3231 0084 18       		.uleb128 0x18
 3232 0085 9742     		.uleb128 0x2117
 3233 0087 19       		.uleb128 0x19
 3234 0088 01       		.uleb128 0x1
 3235 0089 13       		.uleb128 0x13
 3236 008a 00       		.byte	0
 3237 008b 00       		.byte	0
 3238 008c 0C       		.uleb128 0xc
 3239 008d 898201   		.uleb128 0x4109
 3240 0090 00       		.byte	0
 3241 0091 11       		.uleb128 0x11
 3242 0092 01       		.uleb128 0x1
 3243 0093 31       		.uleb128 0x31
 3244 0094 13       		.uleb128 0x13
 3245 0095 00       		.byte	0
 3246 0096 00       		.byte	0
 3247 0097 0D       		.uleb128 0xd
 3248 0098 898201   		.uleb128 0x4109
 3249 009b 01       		.byte	0x1
 3250 009c 11       		.uleb128 0x11
 3251 009d 01       		.uleb128 0x1
 3252 009e 31       		.uleb128 0x31
 3253 009f 13       		.uleb128 0x13
 3254 00a0 00       		.byte	0
 3255 00a1 00       		.byte	0
 3256 00a2 0E       		.uleb128 0xe
 3257 00a3 8A8201   		.uleb128 0x410a
 3258 00a6 00       		.byte	0
 3259 00a7 02       		.uleb128 0x2
 3260 00a8 18       		.uleb128 0x18
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 73


 3261 00a9 9142     		.uleb128 0x2111
 3262 00ab 18       		.uleb128 0x18
 3263 00ac 00       		.byte	0
 3264 00ad 00       		.byte	0
 3265 00ae 0F       		.uleb128 0xf
 3266 00af 34       		.uleb128 0x34
 3267 00b0 00       		.byte	0
 3268 00b1 03       		.uleb128 0x3
 3269 00b2 0E       		.uleb128 0xe
 3270 00b3 3A       		.uleb128 0x3a
 3271 00b4 0B       		.uleb128 0xb
 3272 00b5 3B       		.uleb128 0x3b
 3273 00b6 0B       		.uleb128 0xb
 3274 00b7 49       		.uleb128 0x49
 3275 00b8 13       		.uleb128 0x13
 3276 00b9 02       		.uleb128 0x2
 3277 00ba 17       		.uleb128 0x17
 3278 00bb 00       		.byte	0
 3279 00bc 00       		.byte	0
 3280 00bd 10       		.uleb128 0x10
 3281 00be 0B       		.uleb128 0xb
 3282 00bf 01       		.byte	0x1
 3283 00c0 11       		.uleb128 0x11
 3284 00c1 01       		.uleb128 0x1
 3285 00c2 12       		.uleb128 0x12
 3286 00c3 06       		.uleb128 0x6
 3287 00c4 01       		.uleb128 0x1
 3288 00c5 13       		.uleb128 0x13
 3289 00c6 00       		.byte	0
 3290 00c7 00       		.byte	0
 3291 00c8 11       		.uleb128 0x11
 3292 00c9 34       		.uleb128 0x34
 3293 00ca 00       		.byte	0
 3294 00cb 03       		.uleb128 0x3
 3295 00cc 0E       		.uleb128 0xe
 3296 00cd 3A       		.uleb128 0x3a
 3297 00ce 0B       		.uleb128 0xb
 3298 00cf 3B       		.uleb128 0x3b
 3299 00d0 05       		.uleb128 0x5
 3300 00d1 49       		.uleb128 0x49
 3301 00d2 13       		.uleb128 0x13
 3302 00d3 02       		.uleb128 0x2
 3303 00d4 17       		.uleb128 0x17
 3304 00d5 00       		.byte	0
 3305 00d6 00       		.byte	0
 3306 00d7 12       		.uleb128 0x12
 3307 00d8 898201   		.uleb128 0x4109
 3308 00db 01       		.byte	0x1
 3309 00dc 11       		.uleb128 0x11
 3310 00dd 01       		.uleb128 0x1
 3311 00de 31       		.uleb128 0x31
 3312 00df 13       		.uleb128 0x13
 3313 00e0 01       		.uleb128 0x1
 3314 00e1 13       		.uleb128 0x13
 3315 00e2 00       		.byte	0
 3316 00e3 00       		.byte	0
 3317 00e4 13       		.uleb128 0x13
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 74


 3318 00e5 2E       		.uleb128 0x2e
 3319 00e6 01       		.byte	0x1
 3320 00e7 03       		.uleb128 0x3
 3321 00e8 0E       		.uleb128 0xe
 3322 00e9 3A       		.uleb128 0x3a
 3323 00ea 0B       		.uleb128 0xb
 3324 00eb 3B       		.uleb128 0x3b
 3325 00ec 05       		.uleb128 0x5
 3326 00ed 11       		.uleb128 0x11
 3327 00ee 01       		.uleb128 0x1
 3328 00ef 12       		.uleb128 0x12
 3329 00f0 06       		.uleb128 0x6
 3330 00f1 40       		.uleb128 0x40
 3331 00f2 18       		.uleb128 0x18
 3332 00f3 9742     		.uleb128 0x2117
 3333 00f5 19       		.uleb128 0x19
 3334 00f6 01       		.uleb128 0x1
 3335 00f7 13       		.uleb128 0x13
 3336 00f8 00       		.byte	0
 3337 00f9 00       		.byte	0
 3338 00fa 14       		.uleb128 0x14
 3339 00fb 34       		.uleb128 0x34
 3340 00fc 00       		.byte	0
 3341 00fd 03       		.uleb128 0x3
 3342 00fe 08       		.uleb128 0x8
 3343 00ff 3A       		.uleb128 0x3a
 3344 0100 0B       		.uleb128 0xb
 3345 0101 3B       		.uleb128 0x3b
 3346 0102 0B       		.uleb128 0xb
 3347 0103 49       		.uleb128 0x49
 3348 0104 13       		.uleb128 0x13
 3349 0105 02       		.uleb128 0x2
 3350 0106 17       		.uleb128 0x17
 3351 0107 00       		.byte	0
 3352 0108 00       		.byte	0
 3353 0109 15       		.uleb128 0x15
 3354 010a 34       		.uleb128 0x34
 3355 010b 00       		.byte	0
 3356 010c 03       		.uleb128 0x3
 3357 010d 0E       		.uleb128 0xe
 3358 010e 3A       		.uleb128 0x3a
 3359 010f 0B       		.uleb128 0xb
 3360 0110 3B       		.uleb128 0x3b
 3361 0111 0B       		.uleb128 0xb
 3362 0112 49       		.uleb128 0x49
 3363 0113 13       		.uleb128 0x13
 3364 0114 02       		.uleb128 0x2
 3365 0115 18       		.uleb128 0x18
 3366 0116 00       		.byte	0
 3367 0117 00       		.byte	0
 3368 0118 16       		.uleb128 0x16
 3369 0119 34       		.uleb128 0x34
 3370 011a 00       		.byte	0
 3371 011b 03       		.uleb128 0x3
 3372 011c 0E       		.uleb128 0xe
 3373 011d 3A       		.uleb128 0x3a
 3374 011e 0B       		.uleb128 0xb
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 75


 3375 011f 3B       		.uleb128 0x3b
 3376 0120 05       		.uleb128 0x5
 3377 0121 49       		.uleb128 0x49
 3378 0122 13       		.uleb128 0x13
 3379 0123 3F       		.uleb128 0x3f
 3380 0124 19       		.uleb128 0x19
 3381 0125 3C       		.uleb128 0x3c
 3382 0126 19       		.uleb128 0x19
 3383 0127 00       		.byte	0
 3384 0128 00       		.byte	0
 3385 0129 17       		.uleb128 0x17
 3386 012a 34       		.uleb128 0x34
 3387 012b 00       		.byte	0
 3388 012c 03       		.uleb128 0x3
 3389 012d 0E       		.uleb128 0xe
 3390 012e 3A       		.uleb128 0x3a
 3391 012f 0B       		.uleb128 0xb
 3392 0130 3B       		.uleb128 0x3b
 3393 0131 0B       		.uleb128 0xb
 3394 0132 49       		.uleb128 0x49
 3395 0133 13       		.uleb128 0x13
 3396 0134 3F       		.uleb128 0x3f
 3397 0135 19       		.uleb128 0x19
 3398 0136 3C       		.uleb128 0x3c
 3399 0137 19       		.uleb128 0x19
 3400 0138 00       		.byte	0
 3401 0139 00       		.byte	0
 3402 013a 18       		.uleb128 0x18
 3403 013b 34       		.uleb128 0x34
 3404 013c 00       		.byte	0
 3405 013d 03       		.uleb128 0x3
 3406 013e 08       		.uleb128 0x8
 3407 013f 3A       		.uleb128 0x3a
 3408 0140 0B       		.uleb128 0xb
 3409 0141 3B       		.uleb128 0x3b
 3410 0142 0B       		.uleb128 0xb
 3411 0143 49       		.uleb128 0x49
 3412 0144 13       		.uleb128 0x13
 3413 0145 3F       		.uleb128 0x3f
 3414 0146 19       		.uleb128 0x19
 3415 0147 3C       		.uleb128 0x3c
 3416 0148 19       		.uleb128 0x19
 3417 0149 00       		.byte	0
 3418 014a 00       		.byte	0
 3419 014b 19       		.uleb128 0x19
 3420 014c 34       		.uleb128 0x34
 3421 014d 00       		.byte	0
 3422 014e 03       		.uleb128 0x3
 3423 014f 0E       		.uleb128 0xe
 3424 0150 3A       		.uleb128 0x3a
 3425 0151 0B       		.uleb128 0xb
 3426 0152 3B       		.uleb128 0x3b
 3427 0153 0B       		.uleb128 0xb
 3428 0154 49       		.uleb128 0x49
 3429 0155 13       		.uleb128 0x13
 3430 0156 3F       		.uleb128 0x3f
 3431 0157 19       		.uleb128 0x19
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 76


 3432 0158 02       		.uleb128 0x2
 3433 0159 18       		.uleb128 0x18
 3434 015a 00       		.byte	0
 3435 015b 00       		.byte	0
 3436 015c 1A       		.uleb128 0x1a
 3437 015d 2E       		.uleb128 0x2e
 3438 015e 01       		.byte	0x1
 3439 015f 3F       		.uleb128 0x3f
 3440 0160 19       		.uleb128 0x19
 3441 0161 03       		.uleb128 0x3
 3442 0162 0E       		.uleb128 0xe
 3443 0163 3A       		.uleb128 0x3a
 3444 0164 0B       		.uleb128 0xb
 3445 0165 3B       		.uleb128 0x3b
 3446 0166 0B       		.uleb128 0xb
 3447 0167 49       		.uleb128 0x49
 3448 0168 13       		.uleb128 0x13
 3449 0169 3C       		.uleb128 0x3c
 3450 016a 19       		.uleb128 0x19
 3451 016b 01       		.uleb128 0x1
 3452 016c 13       		.uleb128 0x13
 3453 016d 00       		.byte	0
 3454 016e 00       		.byte	0
 3455 016f 1B       		.uleb128 0x1b
 3456 0170 18       		.uleb128 0x18
 3457 0171 00       		.byte	0
 3458 0172 00       		.byte	0
 3459 0173 00       		.byte	0
 3460 0174 1C       		.uleb128 0x1c
 3461 0175 2E       		.uleb128 0x2e
 3462 0176 01       		.byte	0x1
 3463 0177 3F       		.uleb128 0x3f
 3464 0178 19       		.uleb128 0x19
 3465 0179 03       		.uleb128 0x3
 3466 017a 0E       		.uleb128 0xe
 3467 017b 3A       		.uleb128 0x3a
 3468 017c 0B       		.uleb128 0xb
 3469 017d 3B       		.uleb128 0x3b
 3470 017e 0B       		.uleb128 0xb
 3471 017f 27       		.uleb128 0x27
 3472 0180 19       		.uleb128 0x19
 3473 0181 3C       		.uleb128 0x3c
 3474 0182 19       		.uleb128 0x19
 3475 0183 01       		.uleb128 0x1
 3476 0184 13       		.uleb128 0x13
 3477 0185 00       		.byte	0
 3478 0186 00       		.byte	0
 3479 0187 1D       		.uleb128 0x1d
 3480 0188 05       		.uleb128 0x5
 3481 0189 00       		.byte	0
 3482 018a 49       		.uleb128 0x49
 3483 018b 13       		.uleb128 0x13
 3484 018c 00       		.byte	0
 3485 018d 00       		.byte	0
 3486 018e 1E       		.uleb128 0x1e
 3487 018f 2E       		.uleb128 0x2e
 3488 0190 01       		.byte	0x1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 77


 3489 0191 3F       		.uleb128 0x3f
 3490 0192 19       		.uleb128 0x19
 3491 0193 03       		.uleb128 0x3
 3492 0194 0E       		.uleb128 0xe
 3493 0195 3A       		.uleb128 0x3a
 3494 0196 0B       		.uleb128 0xb
 3495 0197 3B       		.uleb128 0x3b
 3496 0198 0B       		.uleb128 0xb
 3497 0199 3C       		.uleb128 0x3c
 3498 019a 19       		.uleb128 0x19
 3499 019b 01       		.uleb128 0x1
 3500 019c 13       		.uleb128 0x13
 3501 019d 00       		.byte	0
 3502 019e 00       		.byte	0
 3503 019f 1F       		.uleb128 0x1f
 3504 01a0 2E       		.uleb128 0x2e
 3505 01a1 01       		.byte	0x1
 3506 01a2 3F       		.uleb128 0x3f
 3507 01a3 19       		.uleb128 0x19
 3508 01a4 03       		.uleb128 0x3
 3509 01a5 0E       		.uleb128 0xe
 3510 01a6 3A       		.uleb128 0x3a
 3511 01a7 0B       		.uleb128 0xb
 3512 01a8 3B       		.uleb128 0x3b
 3513 01a9 0B       		.uleb128 0xb
 3514 01aa 27       		.uleb128 0x27
 3515 01ab 19       		.uleb128 0x19
 3516 01ac 49       		.uleb128 0x49
 3517 01ad 13       		.uleb128 0x13
 3518 01ae 3C       		.uleb128 0x3c
 3519 01af 19       		.uleb128 0x19
 3520 01b0 01       		.uleb128 0x1
 3521 01b1 13       		.uleb128 0x13
 3522 01b2 00       		.byte	0
 3523 01b3 00       		.byte	0
 3524 01b4 20       		.uleb128 0x20
 3525 01b5 2E       		.uleb128 0x2e
 3526 01b6 01       		.byte	0x1
 3527 01b7 3F       		.uleb128 0x3f
 3528 01b8 19       		.uleb128 0x19
 3529 01b9 03       		.uleb128 0x3
 3530 01ba 0E       		.uleb128 0xe
 3531 01bb 3A       		.uleb128 0x3a
 3532 01bc 0B       		.uleb128 0xb
 3533 01bd 3B       		.uleb128 0x3b
 3534 01be 0B       		.uleb128 0xb
 3535 01bf 49       		.uleb128 0x49
 3536 01c0 13       		.uleb128 0x13
 3537 01c1 3C       		.uleb128 0x3c
 3538 01c2 19       		.uleb128 0x19
 3539 01c3 00       		.byte	0
 3540 01c4 00       		.byte	0
 3541 01c5 00       		.byte	0
 3542              		.section	.debug_loc,"",%progbits
 3543              	.Ldebug_loc0:
 3544              	.LLST0:
 3545 0000 06000000 		.4byte	.LVL2
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 78


 3546 0004 10000000 		.4byte	.LVL3
 3547 0008 0100     		.2byte	0x1
 3548 000a 53       		.byte	0x53
 3549 000b 3E000000 		.4byte	.LVL8
 3550 000f 52000000 		.4byte	.LVL9
 3551 0013 0100     		.2byte	0x1
 3552 0015 53       		.byte	0x53
 3553 0016 56000000 		.4byte	.LVL10
 3554 001a 5F000000 		.4byte	.LVL11-1
 3555 001e 0100     		.2byte	0x1
 3556 0020 53       		.byte	0x53
 3557 0021 6E020000 		.4byte	.LVL26
 3558 0025 79020000 		.4byte	.LVL27-1
 3559 0029 0100     		.2byte	0x1
 3560 002b 53       		.byte	0x53
 3561 002c 0C030000 		.4byte	.LVL47
 3562 0030 17030000 		.4byte	.LVL48-1
 3563 0034 0100     		.2byte	0x1
 3564 0036 53       		.byte	0x53
 3565 0037 00000000 		.4byte	0
 3566 003b 00000000 		.4byte	0
 3567              	.LLST1:
 3568 003f 7E020000 		.4byte	.LVL28
 3569 0043 9A020000 		.4byte	.LVL29
 3570 0047 0100     		.2byte	0x1
 3571 0049 52       		.byte	0x52
 3572 004a 9A020000 		.4byte	.LVL29
 3573 004e A2020000 		.4byte	.LVL30
 3574 0052 0100     		.2byte	0x1
 3575 0054 53       		.byte	0x53
 3576 0055 A4020000 		.4byte	.LVL31
 3577 0059 AC020000 		.4byte	.LVL32
 3578 005d 0100     		.2byte	0x1
 3579 005f 53       		.byte	0x53
 3580 0060 AE020000 		.4byte	.LVL33
 3581 0064 B6020000 		.4byte	.LVL34
 3582 0068 0100     		.2byte	0x1
 3583 006a 53       		.byte	0x53
 3584 006b B8020000 		.4byte	.LVL35
 3585 006f C0020000 		.4byte	.LVL36
 3586 0073 0100     		.2byte	0x1
 3587 0075 53       		.byte	0x53
 3588 0076 C2020000 		.4byte	.LVL37
 3589 007a C8020000 		.4byte	.LVL38
 3590 007e 1600     		.2byte	0x16
 3591 0080 73       		.byte	0x73
 3592 0081 00       		.sleb128 0
 3593 0082 12       		.byte	0x12
 3594 0083 40       		.byte	0x40
 3595 0084 4B       		.byte	0x4b
 3596 0085 24       		.byte	0x24
 3597 0086 22       		.byte	0x22
 3598 0087 08       		.byte	0x8
 3599 0088 C8       		.byte	0xc8
 3600 0089 16       		.byte	0x16
 3601 008a 14       		.byte	0x14
 3602 008b 40       		.byte	0x40
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 79


 3603 008c 4B       		.byte	0x4b
 3604 008d 24       		.byte	0x24
 3605 008e 22       		.byte	0x22
 3606 008f 2D       		.byte	0x2d
 3607 0090 28       		.byte	0x28
 3608 0091 0100     		.2byte	0x1
 3609 0093 16       		.byte	0x16
 3610 0094 13       		.byte	0x13
 3611 0095 9F       		.byte	0x9f
 3612 0096 CE020000 		.4byte	.LVL39
 3613 009a FE020000 		.4byte	.LVL44
 3614 009e 0100     		.2byte	0x1
 3615 00a0 53       		.byte	0x53
 3616 00a1 FE020000 		.4byte	.LVL44
 3617 00a5 03030000 		.4byte	.LVL45-1
 3618 00a9 0200     		.2byte	0x2
 3619 00ab 72       		.byte	0x72
 3620 00ac 07       		.sleb128 7
 3621 00ad 00000000 		.4byte	0
 3622 00b1 00000000 		.4byte	0
 3623              	.LLST2:
 3624 00b5 D2020000 		.4byte	.LVL40
 3625 00b9 DE020000 		.4byte	.LVL41
 3626 00bd 0100     		.2byte	0x1
 3627 00bf 50       		.byte	0x50
 3628 00c0 DE020000 		.4byte	.LVL41
 3629 00c4 03030000 		.4byte	.LVL45-1
 3630 00c8 0100     		.2byte	0x1
 3631 00ca 51       		.byte	0x51
 3632 00cb 00000000 		.4byte	0
 3633 00cf 00000000 		.4byte	0
 3634              	.LLST3:
 3635 00d3 1C030000 		.4byte	.LVL49
 3636 00d7 28030000 		.4byte	.LVL50
 3637 00db 0100     		.2byte	0x1
 3638 00dd 52       		.byte	0x52
 3639 00de 28030000 		.4byte	.LVL50
 3640 00e2 30030000 		.4byte	.LVL51
 3641 00e6 0100     		.2byte	0x1
 3642 00e8 53       		.byte	0x53
 3643 00e9 32030000 		.4byte	.LVL52
 3644 00ed 3A030000 		.4byte	.LVL53
 3645 00f1 0100     		.2byte	0x1
 3646 00f3 53       		.byte	0x53
 3647 00f4 3C030000 		.4byte	.LVL54
 3648 00f8 44030000 		.4byte	.LVL55
 3649 00fc 0100     		.2byte	0x1
 3650 00fe 53       		.byte	0x53
 3651 00ff 46030000 		.4byte	.LVL56
 3652 0103 4E030000 		.4byte	.LVL57
 3653 0107 0100     		.2byte	0x1
 3654 0109 53       		.byte	0x53
 3655 010a 50030000 		.4byte	.LVL58
 3656 010e 56030000 		.4byte	.LVL59
 3657 0112 1600     		.2byte	0x16
 3658 0114 73       		.byte	0x73
 3659 0115 00       		.sleb128 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 80


 3660 0116 12       		.byte	0x12
 3661 0117 40       		.byte	0x40
 3662 0118 4B       		.byte	0x4b
 3663 0119 24       		.byte	0x24
 3664 011a 22       		.byte	0x22
 3665 011b 08       		.byte	0x8
 3666 011c C8       		.byte	0xc8
 3667 011d 16       		.byte	0x16
 3668 011e 14       		.byte	0x14
 3669 011f 40       		.byte	0x40
 3670 0120 4B       		.byte	0x4b
 3671 0121 24       		.byte	0x24
 3672 0122 22       		.byte	0x22
 3673 0123 2D       		.byte	0x2d
 3674 0124 28       		.byte	0x28
 3675 0125 0100     		.2byte	0x1
 3676 0127 16       		.byte	0x16
 3677 0128 13       		.byte	0x13
 3678 0129 9F       		.byte	0x9f
 3679 012a 5C030000 		.4byte	.LVL60
 3680 012e 6E030000 		.4byte	.LVL61
 3681 0132 0100     		.2byte	0x1
 3682 0134 53       		.byte	0x53
 3683 0135 6E030000 		.4byte	.LVL61
 3684 0139 70030000 		.4byte	.LVL62
 3685 013d 0200     		.2byte	0x2
 3686 013f 72       		.byte	0x72
 3687 0140 09       		.sleb128 9
 3688 0141 00000000 		.4byte	0
 3689 0145 00000000 		.4byte	0
 3690              	.LLST4:
 3691 0149 B0030000 		.4byte	.LVL63
 3692 014d CA030000 		.4byte	.LVL67
 3693 0151 0100     		.2byte	0x1
 3694 0153 54       		.byte	0x54
 3695 0154 00000000 		.4byte	0
 3696 0158 00000000 		.4byte	0
 3697              	.LLST5:
 3698 015c 06000000 		.4byte	.LVL70
 3699 0160 28000000 		.4byte	.LVL76
 3700 0164 0100     		.2byte	0x1
 3701 0166 50       		.byte	0x50
 3702 0167 00000000 		.4byte	0
 3703 016b 00000000 		.4byte	0
 3704              	.LLST6:
 3705 016f 10000000 		.4byte	.LVL71
 3706 0173 14000000 		.4byte	.LVL73
 3707 0177 0100     		.2byte	0x1
 3708 0179 54       		.byte	0x54
 3709 017a 16000000 		.4byte	.LVL74
 3710 017e D8010000 		.4byte	.LVL98
 3711 0182 0100     		.2byte	0x1
 3712 0184 54       		.byte	0x54
 3713 0185 00000000 		.4byte	0
 3714 0189 00000000 		.4byte	0
 3715              	.LLST7:
 3716 018d 12000000 		.4byte	.LVL72
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 81


 3717 0191 14000000 		.4byte	.LVL73
 3718 0195 0100     		.2byte	0x1
 3719 0197 55       		.byte	0x55
 3720 0198 18000000 		.4byte	.LVL75
 3721 019c D8010000 		.4byte	.LVL98
 3722 01a0 0100     		.2byte	0x1
 3723 01a2 55       		.byte	0x55
 3724 01a3 00000000 		.4byte	0
 3725 01a7 00000000 		.4byte	0
 3726              	.LLST8:
 3727 01ab 5E000000 		.4byte	.LVL108
 3728 01af 88000000 		.4byte	.LVL112
 3729 01b3 0100     		.2byte	0x1
 3730 01b5 54       		.byte	0x54
 3731 01b6 8A000000 		.4byte	.LVL113
 3732 01ba 9A000000 		.4byte	.LVL116
 3733 01be 0100     		.2byte	0x1
 3734 01c0 54       		.byte	0x54
 3735 01c1 9C000000 		.4byte	.LVL117
 3736 01c5 AE000000 		.4byte	.LVL121
 3737 01c9 0100     		.2byte	0x1
 3738 01cb 54       		.byte	0x54
 3739 01cc B0000000 		.4byte	.LVL122
 3740 01d0 C4000000 		.4byte	.LVL125
 3741 01d4 0100     		.2byte	0x1
 3742 01d6 54       		.byte	0x54
 3743 01d7 C6000000 		.4byte	.LVL126
 3744 01db D4000000 		.4byte	.LVL130
 3745 01df 0100     		.2byte	0x1
 3746 01e1 54       		.byte	0x54
 3747 01e2 D6000000 		.4byte	.LVL131
 3748 01e6 56010000 		.4byte	.LVL146
 3749 01ea 0100     		.2byte	0x1
 3750 01ec 54       		.byte	0x54
 3751 01ed 00000000 		.4byte	0
 3752 01f1 00000000 		.4byte	0
 3753              	.LLST9:
 3754 01f5 5E000000 		.4byte	.LVL108
 3755 01f9 86000000 		.4byte	.LVL111
 3756 01fd 0100     		.2byte	0x1
 3757 01ff 55       		.byte	0x55
 3758 0200 8A000000 		.4byte	.LVL113
 3759 0204 98000000 		.4byte	.LVL115
 3760 0208 0100     		.2byte	0x1
 3761 020a 55       		.byte	0x55
 3762 020b 9C000000 		.4byte	.LVL117
 3763 020f AC000000 		.4byte	.LVL120
 3764 0213 0100     		.2byte	0x1
 3765 0215 55       		.byte	0x55
 3766 0216 B0000000 		.4byte	.LVL122
 3767 021a C2000000 		.4byte	.LVL124
 3768 021e 0100     		.2byte	0x1
 3769 0220 55       		.byte	0x55
 3770 0221 C6000000 		.4byte	.LVL126
 3771 0225 D2000000 		.4byte	.LVL129
 3772 0229 0100     		.2byte	0x1
 3773 022b 55       		.byte	0x55
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 82


 3774 022c D6000000 		.4byte	.LVL131
 3775 0230 1A010000 		.4byte	.LVL136
 3776 0234 0100     		.2byte	0x1
 3777 0236 55       		.byte	0x55
 3778 0237 1A010000 		.4byte	.LVL136
 3779 023b 24010000 		.4byte	.LVL138
 3780 023f 0100     		.2byte	0x1
 3781 0241 53       		.byte	0x53
 3782 0242 24010000 		.4byte	.LVL138
 3783 0246 26010000 		.4byte	.LVL139
 3784 024a 0100     		.2byte	0x1
 3785 024c 55       		.byte	0x55
 3786 024d 26010000 		.4byte	.LVL139
 3787 0251 2C010000 		.4byte	.LVL140
 3788 0255 0100     		.2byte	0x1
 3789 0257 53       		.byte	0x53
 3790 0258 2C010000 		.4byte	.LVL140
 3791 025c 56010000 		.4byte	.LVL146
 3792 0260 0100     		.2byte	0x1
 3793 0262 55       		.byte	0x55
 3794 0263 00000000 		.4byte	0
 3795 0267 00000000 		.4byte	0
 3796              	.LLST10:
 3797 026b 5E000000 		.4byte	.LVL108
 3798 026f 69000000 		.4byte	.LVL109-1
 3799 0273 0100     		.2byte	0x1
 3800 0275 50       		.byte	0x50
 3801 0276 D6000000 		.4byte	.LVL131
 3802 027a 1C010000 		.4byte	.LVL137
 3803 027e 0100     		.2byte	0x1
 3804 0280 50       		.byte	0x50
 3805 0281 24010000 		.4byte	.LVL138
 3806 0285 2C010000 		.4byte	.LVL140
 3807 0289 0100     		.2byte	0x1
 3808 028b 50       		.byte	0x50
 3809 028c 40010000 		.4byte	.LVL143
 3810 0290 47010000 		.4byte	.LVL144-1
 3811 0294 0100     		.2byte	0x1
 3812 0296 50       		.byte	0x50
 3813 0297 00000000 		.4byte	0
 3814 029b 00000000 		.4byte	0
 3815              		.section	.debug_aranges,"",%progbits
 3816 0000 44000000 		.4byte	0x44
 3817 0004 0200     		.2byte	0x2
 3818 0006 00000000 		.4byte	.Ldebug_info0
 3819 000a 04       		.byte	0x4
 3820 000b 00       		.byte	0
 3821 000c 0000     		.2byte	0
 3822 000e 0000     		.2byte	0
 3823 0010 00000000 		.4byte	.LFB65
 3824 0014 10000000 		.4byte	.LFE65-.LFB65
 3825 0018 00000000 		.4byte	.LFB67
 3826 001c 00040000 		.4byte	.LFE67-.LFB67
 3827 0020 00000000 		.4byte	.LFB68
 3828 0024 E4010000 		.4byte	.LFE68-.LFB68
 3829 0028 00000000 		.4byte	.LFB66
 3830 002c 2C000000 		.4byte	.LFE66-.LFB66
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 83


 3831 0030 00000000 		.4byte	.LFB63
 3832 0034 6C010000 		.4byte	.LFE63-.LFB63
 3833 0038 00000000 		.4byte	.LFB64
 3834 003c 28000000 		.4byte	.LFE64-.LFB64
 3835 0040 00000000 		.4byte	0
 3836 0044 00000000 		.4byte	0
 3837              		.section	.debug_ranges,"",%progbits
 3838              	.Ldebug_ranges0:
 3839 0000 00000000 		.4byte	.LFB65
 3840 0004 10000000 		.4byte	.LFE65
 3841 0008 00000000 		.4byte	.LFB67
 3842 000c 00040000 		.4byte	.LFE67
 3843 0010 00000000 		.4byte	.LFB68
 3844 0014 E4010000 		.4byte	.LFE68
 3845 0018 00000000 		.4byte	.LFB66
 3846 001c 2C000000 		.4byte	.LFE66
 3847 0020 00000000 		.4byte	.LFB63
 3848 0024 6C010000 		.4byte	.LFE63
 3849 0028 00000000 		.4byte	.LFB64
 3850 002c 28000000 		.4byte	.LFE64
 3851 0030 00000000 		.4byte	0
 3852 0034 00000000 		.4byte	0
 3853              		.section	.debug_line,"",%progbits
 3854              	.Ldebug_line0:
 3855 0000 6B040000 		.section	.debug_str,"MS",%progbits,1
 3855      0200ED01 
 3855      00000201 
 3855      FB0E0D00 
 3855      01010101 
 3856              	.LASF28:
 3857 0000 70756C73 		.ascii	"pulse_microseconds\000"
 3857      655F6D69 
 3857      63726F73 
 3857      65636F6E 
 3857      647300
 3858              	.LASF73:
 3859 0013 64697374 		.ascii	"distance\000"
 3859      616E6365 
 3859      00
 3860              	.LASF77:
 3861 001c 70726F67 		.ascii	"program_flow\000"
 3861      72616D5F 
 3861      666C6F77 
 3861      00
 3862              	.LASF66:
 3863 0029 6D61785F 		.ascii	"max_junction_speed_sqr\000"
 3863      6A756E63 
 3863      74696F6E 
 3863      5F737065 
 3863      65645F73 
 3864              	.LASF37:
 3865 0040 666C6167 		.ascii	"flags\000"
 3865      7300
 3866              	.LASF90:
 3867 0046 70726F74 		.ascii	"protocol_exec_rt_system\000"
 3867      6F636F6C 
 3867      5F657865 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 84


 3867      635F7274 
 3867      5F737973 
 3868              	.LASF69:
 3869 005e 706C616E 		.ascii	"plan_block_t\000"
 3869      5F626C6F 
 3869      636B5F74 
 3869      00
 3870              	.LASF32:
 3871 006b 73746174 		.ascii	"status_report_mask\000"
 3871      75735F72 
 3871      65706F72 
 3871      745F6D61 
 3871      736B00
 3872              	.LASF14:
 3873 007e 756E7369 		.ascii	"unsigned int\000"
 3873      676E6564 
 3873      20696E74 
 3873      00
 3874              	.LASF52:
 3875 008b 725F6F76 		.ascii	"r_override\000"
 3875      65727269 
 3875      646500
 3876              	.LASF94:
 3877 0096 6C617374 		.ascii	"last_s_override\000"
 3877      5F735F6F 
 3877      76657272 
 3877      69646500 
 3878              	.LASF8:
 3879 00a6 5F5F696E 		.ascii	"__int32_t\000"
 3879      7433325F 
 3879      7400
 3880              	.LASF109:
 3881 00b0 7379735F 		.ascii	"sys_probe_state\000"
 3881      70726F62 
 3881      655F7374 
 3881      61746500 
 3882              	.LASF125:
 3883 00c0 7265706F 		.ascii	"report_feedback_message\000"
 3883      72745F66 
 3883      65656462 
 3883      61636B5F 
 3883      6D657373 
 3884              	.LASF31:
 3885 00d8 73746570 		.ascii	"stepper_idle_lock_time\000"
 3885      7065725F 
 3885      69646C65 
 3885      5F6C6F63 
 3885      6B5F7469 
 3886              	.LASF81:
 3887 00ef 6D6F6461 		.ascii	"modal\000"
 3887      6C00
 3888              	.LASF68:
 3889 00f5 70726F67 		.ascii	"programmed_rate\000"
 3889      72616D6D 
 3889      65645F72 
 3889      61746500 
 3890              	.LASF34:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 85


 3891 0105 6172635F 		.ascii	"arc_tolerance\000"
 3891      746F6C65 
 3891      72616E63 
 3891      6500
 3892              	.LASF147:
 3893 0113 67635F65 		.ascii	"gc_execute_line\000"
 3893      78656375 
 3893      74655F6C 
 3893      696E6500 
 3894              	.LASF79:
 3895 0123 7370696E 		.ascii	"spindle\000"
 3895      646C6500 
 3896              	.LASF150:
 3897 012b 70726F74 		.ascii	"protocol.c\000"
 3897      6F636F6C 
 3897      2E6300
 3898              	.LASF142:
 3899 0136 6C63645F 		.ascii	"lcd_report_realtime\000"
 3899      7265706F 
 3899      72745F72 
 3899      65616C74 
 3899      696D6500 
 3900              	.LASF61:
 3901 014a 64697265 		.ascii	"direction_bits\000"
 3901      6374696F 
 3901      6E5F6269 
 3901      747300
 3902              	.LASF26:
 3903 0159 61636365 		.ascii	"acceleration\000"
 3903      6C657261 
 3903      74696F6E 
 3903      00
 3904              	.LASF40:
 3905 0166 686F6D69 		.ascii	"homing_seek_rate\000"
 3905      6E675F73 
 3905      65656B5F 
 3905      72617465 
 3905      00
 3906              	.LASF135:
 3907 0177 706C616E 		.ascii	"plan_sync_position\000"
 3907      5F73796E 
 3907      635F706F 
 3907      73697469 
 3907      6F6E00
 3908              	.LASF19:
 3909 018a 75696E74 		.ascii	"uint32_t\000"
 3909      33325F74 
 3909      00
 3910              	.LASF15:
 3911 0193 696E7438 		.ascii	"int8_t\000"
 3911      5F7400
 3912              	.LASF39:
 3913 019a 686F6D69 		.ascii	"homing_feed_rate\000"
 3913      6E675F66 
 3913      6565645F 
 3913      72617465 
 3913      00
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 86


 3914              	.LASF63:
 3915 01ab 656E7472 		.ascii	"entry_speed_sqr\000"
 3915      795F7370 
 3915      6565645F 
 3915      73717200 
 3916              	.LASF59:
 3917 01bb 73746570 		.ascii	"steps\000"
 3917      7300
 3918              	.LASF0:
 3919 01c1 666C6F61 		.ascii	"float\000"
 3919      7400
 3920              	.LASF145:
 3921 01c7 7265706F 		.ascii	"report_status_message\000"
 3921      72745F73 
 3921      74617475 
 3921      735F6D65 
 3921      73736167 
 3922              	.LASF139:
 3923 01dd 73745F67 		.ascii	"st_go_idle\000"
 3923      6F5F6964 
 3923      6C6500
 3924              	.LASF152:
 3925 01e8 70726F74 		.ascii	"protocol_exec_rt_suspend\000"
 3925      6F636F6C 
 3925      5F657865 
 3925      635F7274 
 3925      5F737573 
 3926              	.LASF140:
 3927 0201 73797374 		.ascii	"system_check_safety_door_ajar\000"
 3927      656D5F63 
 3927      6865636B 
 3927      5F736166 
 3927      6574795F 
 3928              	.LASF13:
 3929 021f 6C6F6E67 		.ascii	"long long unsigned int\000"
 3929      206C6F6E 
 3929      6720756E 
 3929      7369676E 
 3929      65642069 
 3930              	.LASF143:
 3931 0236 6C696D69 		.ascii	"limits_get_state\000"
 3931      74735F67 
 3931      65745F73 
 3931      74617465 
 3931      00
 3932              	.LASF51:
 3933 0247 665F6F76 		.ascii	"f_override\000"
 3933      65727269 
 3933      646500
 3934              	.LASF99:
 3935 0252 70726F74 		.ascii	"protocol_execute_realtime\000"
 3935      6F636F6C 
 3935      5F657865 
 3935      63757465 
 3935      5F726561 
 3936              	.LASF6:
 3937 026c 5F5F7569 		.ascii	"__uint16_t\000"
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 87


 3937      6E743136 
 3937      5F7400
 3938              	.LASF141:
 3939 0277 64656C61 		.ascii	"delay_sec\000"
 3939      795F7365 
 3939      6300
 3940              	.LASF54:
 3941 0281 7370696E 		.ascii	"spindle_stop_ovr\000"
 3941      646C655F 
 3941      73746F70 
 3941      5F6F7672 
 3941      00
 3942              	.LASF123:
 3943 0292 73797374 		.ascii	"system_clear_exec_accessory_overrides\000"
 3943      656D5F63 
 3943      6C656172 
 3943      5F657865 
 3943      635F6163 
 3944              	.LASF148:
 3945 02b8 73657269 		.ascii	"serial_read\000"
 3945      616C5F72 
 3945      65616400 
 3946              	.LASF45:
 3947 02c4 61626F72 		.ascii	"abort\000"
 3947      7400
 3948              	.LASF78:
 3949 02ca 636F6F6C 		.ascii	"coolant\000"
 3949      616E7400 
 3950              	.LASF64:
 3951 02d2 6D61785F 		.ascii	"max_entry_speed_sqr\000"
 3951      656E7472 
 3951      795F7370 
 3951      6565645F 
 3951      73717200 
 3952              	.LASF75:
 3953 02e6 746F6F6C 		.ascii	"tool_length\000"
 3953      5F6C656E 
 3953      67746800 
 3954              	.LASF42:
 3955 02f2 686F6D69 		.ascii	"homing_pulloff\000"
 3955      6E675F70 
 3955      756C6C6F 
 3955      666600
 3956              	.LASF82:
 3957 0301 746F6F6C 		.ascii	"tool\000"
 3957      00
 3958              	.LASF116:
 3959 0306 65786563 		.ascii	"exec_lcd_status\000"
 3959      5F6C6364 
 3959      5F737461 
 3959      74757300 
 3960              	.LASF46:
 3961 0316 73757370 		.ascii	"suspend\000"
 3961      656E6400 
 3962              	.LASF74:
 3963 031e 706C616E 		.ascii	"plane_select\000"
 3963      655F7365 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 88


 3963      6C656374 
 3963      00
 3964              	.LASF110:
 3965 032b 7379735F 		.ascii	"sys_rt_exec_state\000"
 3965      72745F65 
 3965      7865635F 
 3965      73746174 
 3965      6500
 3966              	.LASF138:
 3967 033d 7370696E 		.ascii	"spindle_set_state\000"
 3967      646C655F 
 3967      7365745F 
 3967      73746174 
 3967      6500
 3968              	.LASF127:
 3969 034f 73797374 		.ascii	"system_clear_exec_alarm\000"
 3969      656D5F63 
 3969      6C656172 
 3969      5F657865 
 3969      635F616C 
 3970              	.LASF122:
 3971 0367 636F6F6C 		.ascii	"coolant_set_state\000"
 3971      616E745F 
 3971      7365745F 
 3971      73746174 
 3971      6500
 3972              	.LASF76:
 3973 0379 636F6F72 		.ascii	"coord_select\000"
 3973      645F7365 
 3973      6C656374 
 3973      00
 3974              	.LASF114:
 3975 0386 7379735F 		.ascii	"sys_rt_exec_debug\000"
 3975      72745F65 
 3975      7865635F 
 3975      64656275 
 3975      6700
 3976              	.LASF151:
 3977 0398 433A5C55 		.ascii	"C:\\Users\\Bart\\Dropbox\\PSoC\\PSoC_Grbl\\PSoC_Grb"
 3977      73657273 
 3977      5C426172 
 3977      745C4472 
 3977      6F70626F 
 3978 03c5 6C2E6379 		.ascii	"l.cydsn\000"
 3978      64736E00 
 3979              	.LASF97:
 3980 03cd 72657374 		.ascii	"restore_condition\000"
 3980      6F72655F 
 3980      636F6E64 
 3980      6974696F 
 3980      6E00
 3981              	.LASF106:
 3982 03df 73657474 		.ascii	"settings\000"
 3982      696E6773 
 3982      00
 3983              	.LASF27:
 3984 03e8 6D61785F 		.ascii	"max_travel\000"
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 89


 3984      74726176 
 3984      656C00
 3985              	.LASF21:
 3986 03f3 63686172 		.ascii	"char\000"
 3986      00
 3987              	.LASF87:
 3988 03f8 746F6F6C 		.ascii	"tool_length_offset\000"
 3988      5F6C656E 
 3988      6774685F 
 3988      6F666673 
 3988      657400
 3989              	.LASF35:
 3990 040b 72706D5F 		.ascii	"rpm_max\000"
 3990      6D617800 
 3991              	.LASF129:
 3992 0413 73745F75 		.ascii	"st_update_plan_block_parameters\000"
 3992      70646174 
 3992      655F706C 
 3992      616E5F62 
 3992      6C6F636B 
 3993              	.LASF57:
 3994 0433 7370696E 		.ascii	"spindle_speed\000"
 3994      646C655F 
 3994      73706565 
 3994      6400
 3995              	.LASF60:
 3996 0441 73746570 		.ascii	"step_event_count\000"
 3996      5F657665 
 3996      6E745F63 
 3996      6F756E74 
 3996      00
 3997              	.LASF55:
 3998 0452 7265706F 		.ascii	"report_ovr_counter\000"
 3998      72745F6F 
 3998      76725F63 
 3998      6F756E74 
 3998      657200
 3999              	.LASF134:
 4000 0465 67635F73 		.ascii	"gc_sync_position\000"
 4000      796E635F 
 4000      706F7369 
 4000      74696F6E 
 4000      00
 4001              	.LASF53:
 4002 0476 7370696E 		.ascii	"spindle_speed_ovr\000"
 4002      646C655F 
 4002      73706565 
 4002      645F6F76 
 4002      7200
 4003              	.LASF16:
 4004 0488 75696E74 		.ascii	"uint8_t\000"
 4004      385F7400 
 4005              	.LASF88:
 4006 0490 70617273 		.ascii	"parser_state_t\000"
 4006      65725F73 
 4006      74617465 
 4006      5F7400
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 90


 4007              	.LASF118:
 4008 049f 73797374 		.ascii	"system_set_exec_state_flag\000"
 4008      656D5F73 
 4008      65745F65 
 4008      7865635F 
 4008      73746174 
 4009              	.LASF12:
 4010 04ba 6C6F6E67 		.ascii	"long long int\000"
 4010      206C6F6E 
 4010      6720696E 
 4010      7400
 4011              	.LASF108:
 4012 04c8 7379735F 		.ascii	"sys_probe_position\000"
 4012      70726F62 
 4012      655F706F 
 4012      73697469 
 4012      6F6E00
 4013              	.LASF93:
 4014 04db 6E65775F 		.ascii	"new_r_override\000"
 4014      725F6F76 
 4014      65727269 
 4014      646500
 4015              	.LASF85:
 4016 04ea 636F6F72 		.ascii	"coord_system\000"
 4016      645F7379 
 4016      7374656D 
 4016      00
 4017              	.LASF103:
 4018 04f7 70726F74 		.ascii	"protocol_buffer_synchronize\000"
 4018      6F636F6C 
 4018      5F627566 
 4018      6665725F 
 4018      73796E63 
 4019              	.LASF24:
 4020 0513 73746570 		.ascii	"steps_per_mm\000"
 4020      735F7065 
 4020      725F6D6D 
 4020      00
 4021              	.LASF83:
 4022 0520 6C696E65 		.ascii	"line_number\000"
 4022      5F6E756D 
 4022      62657200 
 4023              	.LASF100:
 4024 052c 70726F74 		.ascii	"protocol_main_loop\000"
 4024      6F636F6C 
 4024      5F6D6169 
 4024      6E5F6C6F 
 4024      6F7000
 4025              	.LASF136:
 4026 053f 7265706F 		.ascii	"report_realtime_debug\000"
 4026      72745F72 
 4026      65616C74 
 4026      696D655F 
 4026      64656275 
 4027              	.LASF115:
 4028 0555 67635F73 		.ascii	"gc_state\000"
 4028      74617465 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 91


 4028      00
 4029              	.LASF121:
 4030 055e 706C616E 		.ascii	"plan_cycle_reinitialize\000"
 4030      5F637963 
 4030      6C655F72 
 4030      65696E69 
 4030      7469616C 
 4031              	.LASF95:
 4032 0576 636F6F6C 		.ascii	"coolant_state\000"
 4032      616E745F 
 4032      73746174 
 4032      6500
 4033              	.LASF107:
 4034 0584 7379735F 		.ascii	"sys_position\000"
 4034      706F7369 
 4034      74696F6E 
 4034      00
 4035              	.LASF98:
 4036 0591 72657374 		.ascii	"restore_spindle_speed\000"
 4036      6F72655F 
 4036      7370696E 
 4036      646C655F 
 4036      73706565 
 4037              	.LASF120:
 4038 05a7 706C616E 		.ascii	"plan_update_velocity_profile_parameters\000"
 4038      5F757064 
 4038      6174655F 
 4038      76656C6F 
 4038      63697479 
 4039              	.LASF2:
 4040 05cf 5F5F696E 		.ascii	"__int8_t\000"
 4040      74385F74 
 4040      00
 4041              	.LASF29:
 4042 05d8 73746570 		.ascii	"step_invert_mask\000"
 4042      5F696E76 
 4042      6572745F 
 4042      6D61736B 
 4042      00
 4043              	.LASF89:
 4044 05e9 70726F74 		.ascii	"protocol_auto_cycle_start\000"
 4044      6F636F6C 
 4044      5F617574 
 4044      6F5F6379 
 4044      636C655F 
 4045              	.LASF23:
 4046 0603 6C6F6E67 		.ascii	"long double\000"
 4046      20646F75 
 4046      626C6500 
 4047              	.LASF17:
 4048 060f 75696E74 		.ascii	"uint16_t\000"
 4048      31365F74 
 4048      00
 4049              	.LASF25:
 4050 0618 6D61785F 		.ascii	"max_rate\000"
 4050      72617465 
 4050      00
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 92


 4051              	.LASF112:
 4052 0621 7379735F 		.ascii	"sys_rt_exec_motion_override\000"
 4052      72745F65 
 4052      7865635F 
 4052      6D6F7469 
 4052      6F6E5F6F 
 4053              	.LASF48:
 4054 063d 73746570 		.ascii	"step_control\000"
 4054      5F636F6E 
 4054      74726F6C 
 4054      00
 4055              	.LASF67:
 4056 064a 72617069 		.ascii	"rapid_rate\000"
 4056      645F7261 
 4056      746500
 4057              	.LASF5:
 4058 0655 73686F72 		.ascii	"short int\000"
 4058      7420696E 
 4058      7400
 4059              	.LASF92:
 4060 065f 6E65775F 		.ascii	"new_f_override\000"
 4060      665F6F76 
 4060      65727269 
 4060      646500
 4061              	.LASF9:
 4062 066e 6C6F6E67 		.ascii	"long int\000"
 4062      20696E74 
 4062      00
 4063              	.LASF105:
 4064 0677 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4064      52784275 
 4064      66666572 
 4064      00
 4065              	.LASF146:
 4066 0684 73797374 		.ascii	"system_execute_line\000"
 4066      656D5F65 
 4066      78656375 
 4066      74655F6C 
 4066      696E6500 
 4067              	.LASF58:
 4068 0698 73797374 		.ascii	"system_t\000"
 4068      656D5F74 
 4068      00
 4069              	.LASF71:
 4070 06a1 66656564 		.ascii	"feed_rate\000"
 4070      5F726174 
 4070      6500
 4071              	.LASF56:
 4072 06ab 7265706F 		.ascii	"report_wco_counter\000"
 4072      72745F77 
 4072      636F5F63 
 4072      6F756E74 
 4072      657200
 4073              	.LASF47:
 4074 06be 736F6674 		.ascii	"soft_limit\000"
 4074      5F6C696D 
 4074      697400
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 93


 4075              	.LASF130:
 4076 06c9 73745F70 		.ascii	"st_prep_buffer\000"
 4076      7265705F 
 4076      62756666 
 4076      657200
 4077              	.LASF126:
 4078 06d8 73797374 		.ascii	"system_clear_exec_state_flag\000"
 4078      656D5F63 
 4078      6C656172 
 4078      5F657865 
 4078      635F7374 
 4079              	.LASF132:
 4080 06f5 706C616E 		.ascii	"plan_reset\000"
 4080      5F726573 
 4080      657400
 4081              	.LASF96:
 4082 0700 626C6F63 		.ascii	"block\000"
 4082      6B00
 4083              	.LASF3:
 4084 0706 5F5F7569 		.ascii	"__uint8_t\000"
 4084      6E74385F 
 4084      7400
 4085              	.LASF49:
 4086 0710 70726F62 		.ascii	"probe_succeeded\000"
 4086      655F7375 
 4086      63636565 
 4086      64656400 
 4087              	.LASF113:
 4088 0720 7379735F 		.ascii	"sys_rt_exec_accessory_override\000"
 4088      72745F65 
 4088      7865635F 
 4088      61636365 
 4088      73736F72 
 4089              	.LASF70:
 4090 073f 6D6F7469 		.ascii	"motion\000"
 4090      6F6E00
 4091              	.LASF22:
 4092 0746 73697A65 		.ascii	"sizetype\000"
 4092      74797065 
 4092      00
 4093              	.LASF11:
 4094 074f 6C6F6E67 		.ascii	"long unsigned int\000"
 4094      20756E73 
 4094      69676E65 
 4094      6420696E 
 4094      7400
 4095              	.LASF18:
 4096 0761 696E7433 		.ascii	"int32_t\000"
 4096      325F7400 
 4097              	.LASF86:
 4098 0769 636F6F72 		.ascii	"coord_offset\000"
 4098      645F6F66 
 4098      66736574 
 4098      00
 4099              	.LASF117:
 4100 0776 706C616E 		.ascii	"plan_get_current_block\000"
 4100      5F676574 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 94


 4100      5F637572 
 4100      72656E74 
 4100      5F626C6F 
 4101              	.LASF91:
 4102 078d 72745F65 		.ascii	"rt_exec\000"
 4102      78656300 
 4103              	.LASF4:
 4104 0795 756E7369 		.ascii	"unsigned char\000"
 4104      676E6564 
 4104      20636861 
 4104      7200
 4105              	.LASF144:
 4106 07a3 73797374 		.ascii	"system_execute_startup\000"
 4106      656D5F65 
 4106      78656375 
 4106      74655F73 
 4106      74617274 
 4107              	.LASF10:
 4108 07ba 5F5F7569 		.ascii	"__uint32_t\000"
 4108      6E743332 
 4108      5F7400
 4109              	.LASF149:
 4110 07c5 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 4110      4320342E 
 4110      392E3320 
 4110      32303135 
 4110      30333033 
 4111 07f8 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 4111      20726576 
 4111      6973696F 
 4111      6E203232 
 4111      31323230 
 4112 082b 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 4112      66756E63 
 4112      74696F6E 
 4112      2D736563 
 4112      74696F6E 
 4113              	.LASF128:
 4114 0853 7265706F 		.ascii	"report_realtime_status\000"
 4114      72745F72 
 4114      65616C74 
 4114      696D655F 
 4114      73746174 
 4115              	.LASF104:
 4116 086a 6C696E65 		.ascii	"line\000"
 4116      00
 4117              	.LASF133:
 4118 086f 73745F72 		.ascii	"st_reset\000"
 4118      65736574 
 4118      00
 4119              	.LASF124:
 4120 0878 7265706F 		.ascii	"report_alarm_message\000"
 4120      72745F61 
 4120      6C61726D 
 4120      5F6D6573 
 4120      73616765 
 4121              	.LASF131:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 95


 4122 088d 73745F77 		.ascii	"st_wake_up\000"
 4122      616B655F 
 4122      757000
 4123              	.LASF101:
 4124 0898 6C696E65 		.ascii	"line_flags\000"
 4124      5F666C61 
 4124      677300
 4125              	.LASF44:
 4126 08a3 73746174 		.ascii	"state\000"
 4126      6500
 4127              	.LASF111:
 4128 08a9 7379735F 		.ascii	"sys_rt_exec_alarm\000"
 4128      72745F65 
 4128      7865635F 
 4128      616C6172 
 4128      6D00
 4129              	.LASF80:
 4130 08bb 67635F6D 		.ascii	"gc_modal_t\000"
 4130      6F64616C 
 4130      5F7400
 4131              	.LASF72:
 4132 08c6 756E6974 		.ascii	"units\000"
 4132      7300
 4133              	.LASF65:
 4134 08cc 6D696C6C 		.ascii	"millimeters\000"
 4134      696D6574 
 4134      65727300 
 4135              	.LASF1:
 4136 08d8 7369676E 		.ascii	"signed char\000"
 4136      65642063 
 4136      68617200 
 4137              	.LASF41:
 4138 08e4 686F6D69 		.ascii	"homing_debounce_delay\000"
 4138      6E675F64 
 4138      65626F75 
 4138      6E63655F 
 4138      64656C61 
 4139              	.LASF7:
 4140 08fa 73686F72 		.ascii	"short unsigned int\000"
 4140      7420756E 
 4140      7369676E 
 4140      65642069 
 4140      6E7400
 4141              	.LASF36:
 4142 090d 72706D5F 		.ascii	"rpm_min\000"
 4142      6D696E00 
 4143              	.LASF43:
 4144 0915 73657474 		.ascii	"settings_t\000"
 4144      696E6773 
 4144      5F7400
 4145              	.LASF119:
 4146 0920 73797374 		.ascii	"system_clear_exec_motion_overrides\000"
 4146      656D5F63 
 4146      6C656172 
 4146      5F657865 
 4146      635F6D6F 
 4147              	.LASF20:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\ccmDaNpC.s 			page 96


 4148 0943 646F7562 		.ascii	"double\000"
 4148      6C6500
 4149              	.LASF38:
 4150 094a 686F6D69 		.ascii	"homing_dir_mask\000"
 4150      6E675F64 
 4150      69725F6D 
 4150      61736B00 
 4151              	.LASF137:
 4152 095a 73797374 		.ascii	"system_set_exec_accessory_override_flag\000"
 4152      656D5F73 
 4152      65745F65 
 4152      7865635F 
 4152      61636365 
 4153              	.LASF33:
 4154 0982 6A756E63 		.ascii	"junction_deviation\000"
 4154      74696F6E 
 4154      5F646576 
 4154      69617469 
 4154      6F6E00
 4155              	.LASF50:
 4156 0995 686F6D69 		.ascii	"homing_axis_lock\000"
 4156      6E675F61 
 4156      7869735F 
 4156      6C6F636B 
 4156      00
 4157              	.LASF62:
 4158 09a6 636F6E64 		.ascii	"condition\000"
 4158      6974696F 
 4158      6E00
 4159              	.LASF102:
 4160 09b0 63686172 		.ascii	"char_counter\000"
 4160      5F636F75 
 4160      6E746572 
 4160      00
 4161              	.LASF84:
 4162 09bd 706F7369 		.ascii	"position\000"
 4162      74696F6E 
 4162      00
 4163              	.LASF30:
 4164 09c6 6469725F 		.ascii	"dir_invert_mask\000"
 4164      696E7665 
 4164      72745F6D 
 4164      61736B00 
 4165              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
