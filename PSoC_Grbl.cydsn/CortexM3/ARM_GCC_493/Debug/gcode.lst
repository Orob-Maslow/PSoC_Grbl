ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"gcode.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.gc_init,"ax",%progbits
  19              		.align	2
  20              		.global	gc_init
  21              		.thumb
  22              		.thumb_func
  23              		.type	gc_init, %function
  24              	gc_init:
  25              	.LFB63:
  26              		.file 1 "gcode.c"
   1:gcode.c       **** /*
   2:gcode.c       ****   gcode.c - rs274/ngc parser.
   3:gcode.c       ****   Part of Grbl
   4:gcode.c       **** 
   5:gcode.c       ****   Copyright (c) 2011-2016 Sungeun K. Jeon for Gnea Research LLC
   6:gcode.c       ****   Copyright (c) 2009-2011 Simen Svale Skogsrud
   7:gcode.c       **** 
   8:gcode.c       ****   Grbl is free software: you can redistribute it and/or modify
   9:gcode.c       ****   it under the terms of the GNU General Public License as published by
  10:gcode.c       ****   the Free Software Foundation, either version 3 of the License, or
  11:gcode.c       ****   (at your option) any later version.
  12:gcode.c       **** 
  13:gcode.c       ****   Grbl is distributed in the hope that it will be useful,
  14:gcode.c       ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:gcode.c       ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:gcode.c       ****   GNU General Public License for more details.
  17:gcode.c       **** 
  18:gcode.c       ****   You should have received a copy of the GNU General Public License
  19:gcode.c       ****   along with Grbl.  If not, see <http://www.gnu.org/licenses/>.
  20:gcode.c       **** */
  21:gcode.c       **** 
  22:gcode.c       **** #include "grbl.h"
  23:gcode.c       **** 
  24:gcode.c       **** // NOTE: Max line number is defined by the g-code standard to be 99999. It seems to be an
  25:gcode.c       **** // arbitrary value, and some GUIs may require more. So we increased it based on a max safe
  26:gcode.c       **** // value when converting a float (7.2 digit precision)s to an integer.
  27:gcode.c       **** #define MAX_LINE_NUMBER 10000000
  28:gcode.c       **** #define MAX_TOOL_NUMBER 255 // Limited by max unsigned 8-bit value
  29:gcode.c       **** 
  30:gcode.c       **** #define AXIS_COMMAND_NONE 0
  31:gcode.c       **** #define AXIS_COMMAND_NON_MODAL 1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 2


  32:gcode.c       **** #define AXIS_COMMAND_MOTION_MODE 2
  33:gcode.c       **** #define AXIS_COMMAND_TOOL_LENGTH_OFFSET 3 // *Undefined but required
  34:gcode.c       **** 
  35:gcode.c       **** // Declare gc extern struct
  36:gcode.c       **** parser_state_t gc_state;
  37:gcode.c       **** parser_block_t gc_block;
  38:gcode.c       **** 
  39:gcode.c       **** #define FAIL(status) return(status);
  40:gcode.c       **** 
  41:gcode.c       **** 
  42:gcode.c       **** void gc_init()
  43:gcode.c       **** {
  27              		.loc 1 43 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 10B5     		push	{r4, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  44:gcode.c       ****   memset(&gc_state, 0, sizeof(parser_state_t));
  35              		.loc 1 44 0
  36 0002 084C     		ldr	r4, .L4
  37 0004 2046     		mov	r0, r4
  38 0006 0021     		movs	r1, #0
  39 0008 4422     		movs	r2, #68
  40 000a FFF7FEFF 		bl	memset
  41              	.LVL0:
  45:gcode.c       **** 
  46:gcode.c       ****   // Load default G54 coordinate system.
  47:gcode.c       ****   if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) {
  42              		.loc 1 47 0
  43 000e 0020     		movs	r0, #0
  44 0010 04F12801 		add	r1, r4, #40
  45 0014 FFF7FEFF 		bl	settings_read_coord_data
  46              	.LVL1:
  47 0018 10B9     		cbnz	r0, .L1
  48:gcode.c       ****     report_status_message(STATUS_SETTING_READ_FAIL);
  48              		.loc 1 48 0
  49 001a 0720     		movs	r0, #7
  50 001c FFF7FEFF 		bl	report_status_message
  51              	.LVL2:
  52              	.L1:
  53 0020 10BD     		pop	{r4, pc}
  54              	.L5:
  55 0022 00BF     		.align	2
  56              	.L4:
  57 0024 00000000 		.word	gc_state
  58              		.cfi_endproc
  59              	.LFE63:
  60              		.size	gc_init, .-gc_init
  61              		.section	.text.gc_sync_position,"ax",%progbits
  62              		.align	2
  63              		.global	gc_sync_position
  64              		.thumb
  65              		.thumb_func
  66              		.type	gc_sync_position, %function
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 3


  67              	gc_sync_position:
  68              	.LFB64:
  49:gcode.c       ****   }
  50:gcode.c       **** }
  51:gcode.c       **** 
  52:gcode.c       **** 
  53:gcode.c       **** // Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
  54:gcode.c       **** // limit pull-off routines.
  55:gcode.c       **** void gc_sync_position()
  56:gcode.c       **** {
  69              		.loc 1 56 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73 0000 08B5     		push	{r3, lr}
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 3, -8
  76              		.cfi_offset 14, -4
  57:gcode.c       ****   system_convert_array_steps_to_mpos(gc_state.position,sys_position);
  77              		.loc 1 57 0
  78 0002 0248     		ldr	r0, .L8
  79 0004 0249     		ldr	r1, .L8+4
  80 0006 FFF7FEFF 		bl	system_convert_array_steps_to_mpos
  81              	.LVL3:
  82 000a 08BD     		pop	{r3, pc}
  83              	.L9:
  84              		.align	2
  85              	.L8:
  86 000c 1C000000 		.word	gc_state+28
  87 0010 00000000 		.word	sys_position
  88              		.cfi_endproc
  89              	.LFE64:
  90              		.size	gc_sync_position, .-gc_sync_position
  91              		.global	__aeabi_f2d
  92              		.global	__aeabi_d2uiz
  93              		.global	__aeabi_i2f
  94              		.global	__aeabi_fsub
  95              		.global	__aeabi_fmul
  96              		.global	__aeabi_f2iz
  97              		.global	__aeabi_fcmpgt
  98              		.global	__aeabi_fcmplt
  99              		.global	__aeabi_dmul
 100              		.global	__aeabi_d2f
 101              		.global	__aeabi_fadd
 102              		.global	__aeabi_fcmpeq
 103              		.global	__aeabi_dsub
 104              		.global	__aeabi_ddiv
 105              		.global	__aeabi_dcmpgt
 106              		.section	.text.gc_execute_line,"ax",%progbits
 107              		.align	2
 108              		.global	gc_execute_line
 109              		.thumb
 110              		.thumb_func
 111              		.type	gc_execute_line, %function
 112              	gc_execute_line:
 113              	.LFB65:
  58:gcode.c       **** }
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 4


  59:gcode.c       **** 
  60:gcode.c       **** 
  61:gcode.c       **** // Executes one line of 0-terminated G-Code. The line is assumed to contain only uppercase
  62:gcode.c       **** // characters and signed floating point values (no whitespace). Comments and block delete
  63:gcode.c       **** // characters have been removed. In this function, all units and positions are converted and
  64:gcode.c       **** // exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
  65:gcode.c       **** // coordinates, respectively.
  66:gcode.c       **** uint8_t gc_execute_line(char *line)
  67:gcode.c       **** {
 114              		.loc 1 67 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 72
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118              	.LVL4:
 119 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 120              		.cfi_def_cfa_offset 36
 121              		.cfi_offset 4, -36
 122              		.cfi_offset 5, -32
 123              		.cfi_offset 6, -28
 124              		.cfi_offset 7, -24
 125              		.cfi_offset 8, -20
 126              		.cfi_offset 9, -16
 127              		.cfi_offset 10, -12
 128              		.cfi_offset 11, -8
 129              		.cfi_offset 14, -4
 130 0004 99B0     		sub	sp, sp, #100
 131              		.cfi_def_cfa_offset 136
 132 0006 8146     		mov	r9, r0
  68:gcode.c       ****   /* -------------------------------------------------------------------------------------
  69:gcode.c       ****      STEP 1: Initialize parser block struct and copy current g-code state modes. The parser
  70:gcode.c       ****      updates these modes and commands as the block line is parser and will only be used and
  71:gcode.c       ****      executed after successful error-checking. The parser block struct also contains a block
  72:gcode.c       ****      values struct, word tracking variables, and a non-modal commands tracker for the new
  73:gcode.c       ****      block. This struct contains all of the necessary information to execute the block. */
  74:gcode.c       **** 
  75:gcode.c       ****   memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 133              		.loc 1 75 0
 134 0008 9E4C     		ldr	r4, .L254
 135 000a 2046     		mov	r0, r4
 136              	.LVL5:
 137 000c 0021     		movs	r1, #0
 138 000e 4022     		movs	r2, #64
 139 0010 FFF7FEFF 		bl	memset
 140              	.LVL6:
  76:gcode.c       ****   memcpy(&gc_block.modal,&gc_state.modal,sizeof(gc_modal_t)); // Copy current modes
 141              		.loc 1 76 0
 142 0014 9C4B     		ldr	r3, .L254+4
 143 0016 03CB     		ldmia	r3!, {r0, r1}
 144 0018 C4F80100 		str	r0, [r4, #1]	@ unaligned
 145 001c C4F80510 		str	r1, [r4, #5]	@ unaligned
 146 0020 1B88     		ldrh	r3, [r3]	@ unaligned
 147 0022 A4F80930 		strh	r3, [r4, #9]	@ unaligned
 148              	.LVL7:
  77:gcode.c       **** 
  78:gcode.c       ****   uint8_t axis_command = AXIS_COMMAND_NONE;
  79:gcode.c       ****   uint8_t axis_0, axis_1, axis_linear;
  80:gcode.c       ****   uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 5


  81:gcode.c       **** 
  82:gcode.c       ****   // Initialize bitflag tracking variables for axis indices compatible operations.
  83:gcode.c       ****   uint8_t axis_words = 0; // XYZ tracking
  84:gcode.c       ****   uint8_t ijk_words = 0; // IJK tracking
  85:gcode.c       **** 
  86:gcode.c       ****   // Initialize command and value words and parser flags variables.
  87:gcode.c       ****   uint16_t command_words = 0; // Tracks G and M command words. Also used for modal group violations
  88:gcode.c       ****   uint16_t value_words = 0; // Tracks value words.
  89:gcode.c       ****   uint8_t gc_parser_flags = GC_PARSER_NONE;
  90:gcode.c       **** 
  91:gcode.c       ****   // Determine if the line is a jogging motion or a normal g-code block.
  92:gcode.c       ****   if (line[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 149              		.loc 1 92 0
 150 0026 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 151 002a 242B     		cmp	r3, #36
 152 002c 05D1     		bne	.L174
 153              	.LVL8:
  93:gcode.c       ****     // Set G1 and G94 enforced modes to ensure accurate error checks.
  94:gcode.c       ****     gc_parser_flags |= GC_PARSER_JOG_MOTION;
  95:gcode.c       ****     gc_block.modal.motion = MOTION_MODE_LINEAR;
 154              		.loc 1 95 0
 155 002e 0123     		movs	r3, #1
 156 0030 6370     		strb	r3, [r4, #1]
  96:gcode.c       ****     gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 157              		.loc 1 96 0
 158 0032 0021     		movs	r1, #0
 159 0034 A170     		strb	r1, [r4, #2]
  94:gcode.c       ****     gc_block.modal.motion = MOTION_MODE_LINEAR;
 160              		.loc 1 94 0
 161 0036 9A46     		mov	r10, r3
 162 0038 01E0     		b	.L11
 163              	.LVL9:
 164              	.L174:
  89:gcode.c       **** 
 165              		.loc 1 89 0
 166 003a 4FF0000A 		mov	r10, #0
 167              	.LVL10:
 168              	.L11:
  97:gcode.c       ****     #ifdef USE_LINE_NUMBERS
  98:gcode.c       ****       gc_block.values.n = JOG_LINE_NUMBER; // Initialize default line number reported during jog.
  99:gcode.c       ****     #endif
 100:gcode.c       ****   }
 101:gcode.c       **** 
 102:gcode.c       ****   /* -------------------------------------------------------------------------------------
 103:gcode.c       ****      STEP 2: Import all g-code words in the block line. A g-code word is a letter followed by
 104:gcode.c       ****      a number, which can either be a 'G'/'M' command or sets/assigns a command value. Also,
 105:gcode.c       ****      perform initial error-checks for command word modal group violations, for any repeated
 106:gcode.c       ****      words, and for negative values set for the value words F, N, P, T, and S. */
 107:gcode.c       **** 
 108:gcode.c       ****   uint8_t word_bit; // Bit-value for assigning tracking variables
 109:gcode.c       ****   uint8_t char_counter;
 110:gcode.c       ****   char letter;
 111:gcode.c       ****   float value;
 112:gcode.c       ****   uint8_t int_value = 0;
 113:gcode.c       ****   uint16_t mantissa = 0;
 114:gcode.c       ****   if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
 169              		.loc 1 114 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 6


 170 003e 1AF0010B 		ands	fp, r10, #1
 171 0042 08D0     		beq	.L12
 172              		.loc 1 114 0 is_stmt 0 discriminator 1
 173 0044 0323     		movs	r3, #3
 174 0046 8DF85F30 		strb	r3, [sp, #95]
 175              	.L14:
 115:gcode.c       ****   else { char_counter = 0; }
 116:gcode.c       **** 
 117:gcode.c       ****   while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 118:gcode.c       **** 
 119:gcode.c       ****     // Import the next g-code word, expecting a letter followed by a value. Otherwise, error out.
 120:gcode.c       ****     letter = line[char_counter];
 121:gcode.c       ****     if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected wor
 122:gcode.c       ****     char_counter++;
 123:gcode.c       ****     if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected 
 124:gcode.c       **** 
 125:gcode.c       ****     // Convert values to smaller uint8 significand and mantissa values for parsing this word.
 126:gcode.c       ****     // NOTE: Mantissa is multiplied by 100 to catch non-integer command values. This is more
 127:gcode.c       ****     // accurate than the NIST gcode requirement of x10 when used for commands, but not quite
 128:gcode.c       ****     // accurate enough for value words that require integers to within 0.0001. This should be
 129:gcode.c       ****     // a good enough comprimise and catch most all non-integer errors. To make it compliant,
 130:gcode.c       ****     // we would simply need to change the mantissa to int16, but this add compiled flash space.
 131:gcode.c       ****     // Maybe update this later.
 132:gcode.c       ****     int_value = trunc(value);
 133:gcode.c       ****     mantissa =  round(100*(value - int_value)); // Compute mantissa for Gxx.x commands.
 134:gcode.c       ****     // NOTE: Rounding must be used to catch small floating point errors.
 135:gcode.c       **** 
 136:gcode.c       ****     // Check if the g-code word is supported or errors due to modal group violations or has
 137:gcode.c       ****     // been repeated in the g-code block. If ok, update the command or record its value.
 138:gcode.c       ****     switch(letter) {
 139:gcode.c       **** 
 140:gcode.c       ****       /* 'G' and 'M' Command Words: Parse commands and check for modal group violations.
 141:gcode.c       ****          NOTE: Modal group numbers are defined in Table 4 of NIST RS274-NGC v3, pg.20 */
 142:gcode.c       **** 
 143:gcode.c       ****       case 'G':
 144:gcode.c       ****         // Determine 'G' command and its modal group
 145:gcode.c       ****         switch(int_value) {
 146:gcode.c       ****           case 10: case 28: case 30: case 92:
 147:gcode.c       ****             // Check for G10/28/30/92 being called with G0/1/2/3/38 on same block.
 148:gcode.c       ****             // * G43.1 is also an axis command but is not explicitly defined this way.
 149:gcode.c       ****             if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 150:gcode.c       ****               if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command
 151:gcode.c       ****               axis_command = AXIS_COMMAND_NON_MODAL;
 152:gcode.c       ****             }
 153:gcode.c       ****             // No break. Continues to next line.
 154:gcode.c       ****           case 4: case 53:
 155:gcode.c       ****             word_bit = MODAL_GROUP_G0;
 156:gcode.c       ****             gc_block.non_modal_command = int_value;
 157:gcode.c       ****             if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 158:gcode.c       ****               if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 159:gcode.c       ****               gc_block.non_modal_command += mantissa;
 160:gcode.c       ****               mantissa = 0; // Set to zero to indicate valid non-integer G command.
 161:gcode.c       ****             }                
 162:gcode.c       ****             break;
 163:gcode.c       ****           case 0: case 1: case 2: case 3: case 38:
 164:gcode.c       ****             // Check for G0/1/2/3/38 being called with G10/28/30/92 on same block.
 165:gcode.c       ****             // * G43.1 is also an axis command but is not explicitly defined this way.
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 7


 166:gcode.c       ****             if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command c
 167:gcode.c       ****             axis_command = AXIS_COMMAND_MOTION_MODE;
 168:gcode.c       ****             // No break. Continues to next line.
 169:gcode.c       ****           case 80:
 170:gcode.c       ****             word_bit = MODAL_GROUP_G1;
 171:gcode.c       ****             gc_block.modal.motion = int_value;
 172:gcode.c       ****             if (int_value == 38){
 173:gcode.c       ****               if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) 
 174:gcode.c       ****                 FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported G38.x command]
 175:gcode.c       ****               }
 176:gcode.c       ****               gc_block.modal.motion += (mantissa/10)+100;
 177:gcode.c       ****               mantissa = 0; // Set to zero to indicate valid non-integer G command.
 178:gcode.c       ****             }  
 179:gcode.c       ****             break;
 180:gcode.c       ****           case 17: case 18: case 19:
 181:gcode.c       ****             word_bit = MODAL_GROUP_G2;
 182:gcode.c       ****             gc_block.modal.plane_select = int_value - 17;
 183:gcode.c       ****             break;
 184:gcode.c       ****           case 90: case 91:
 185:gcode.c       ****             if (mantissa == 0) {
 186:gcode.c       ****               word_bit = MODAL_GROUP_G3;
 187:gcode.c       ****               gc_block.modal.distance = int_value - 90;
 188:gcode.c       ****             } else {
 189:gcode.c       ****               word_bit = MODAL_GROUP_G4;
 190:gcode.c       ****               if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); 
 191:gcode.c       ****               mantissa = 0; // Set to zero to indicate valid non-integer G command.
 192:gcode.c       ****               // Otherwise, arc IJK incremental mode is default. G91.1 does nothing.
 193:gcode.c       ****             }
 194:gcode.c       ****             break;
 195:gcode.c       ****           case 93: case 94:
 196:gcode.c       ****             word_bit = MODAL_GROUP_G5;
 197:gcode.c       ****             gc_block.modal.feed_rate = 94 - int_value;
 198:gcode.c       ****             break;
 199:gcode.c       ****           case 20: case 21:
 200:gcode.c       ****             word_bit = MODAL_GROUP_G6;
 201:gcode.c       ****             gc_block.modal.units = 21 - int_value;
 202:gcode.c       ****             break;
 203:gcode.c       ****           case 40:
 204:gcode.c       ****             word_bit = MODAL_GROUP_G7;
 205:gcode.c       ****             // NOTE: Not required since cutter radius compensation is always disabled. Only here
 206:gcode.c       ****             // to support G40 commands that often appear in g-code program headers to setup default
 207:gcode.c       ****             // gc_block.modal.cutter_comp = CUTTER_COMP_DISABLE; // G40
 208:gcode.c       ****             break;
 209:gcode.c       ****           case 43: case 49:
 210:gcode.c       ****             word_bit = MODAL_GROUP_G8;
 211:gcode.c       ****             // NOTE: The NIST g-code standard vaguely states that when a tool length offset is chan
 212:gcode.c       ****             // there cannot be any axis motion or coordinate offsets updated. Meaning G43, G43.1, a
 213:gcode.c       ****             // all are explicit axis commands, regardless if they require axis words or not.
 214:gcode.c       ****             if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command c
 215:gcode.c       ****             axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 216:gcode.c       ****             if (int_value == 49) { // G49
 217:gcode.c       ****               gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 218:gcode.c       ****             } else if (mantissa == 10) { // G43.1
 219:gcode.c       ****               gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 220:gcode.c       ****             } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported G43.x command]
 221:gcode.c       ****             mantissa = 0; // Set to zero to indicate valid non-integer G command.
 222:gcode.c       ****             break;
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 8


 223:gcode.c       ****           case 54: case 55: case 56: case 57: case 58: case 59:
 224:gcode.c       ****             // NOTE: G59.x are not supported. (But their int_values would be 60, 61, and 62.)
 225:gcode.c       ****             word_bit = MODAL_GROUP_G12;
 226:gcode.c       ****             gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 227:gcode.c       ****             break;
 228:gcode.c       ****           case 61:
 229:gcode.c       ****             word_bit = MODAL_GROUP_G13;
 230:gcode.c       ****             if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 231:gcode.c       ****             // gc_block.modal.control = CONTROL_MODE_EXACT_PATH; // G61
 232:gcode.c       ****             break;
 233:gcode.c       ****           default: FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported G command]
 234:gcode.c       ****         }
 235:gcode.c       ****         if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or inva
 236:gcode.c       ****         // Check for more than one command per modal group violations in the current block
 237:gcode.c       ****         // NOTE: Variable 'word_bit' is always assigned, if the command is valid.
 238:gcode.c       ****         if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); 
 239:gcode.c       ****         command_words |= bit(word_bit);
 240:gcode.c       ****         break;
 241:gcode.c       **** 
 242:gcode.c       ****       case 'M':
 243:gcode.c       **** 
 244:gcode.c       ****         // Determine 'M' command and its modal group
 245:gcode.c       ****         if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [No Mxx.x commands]
 246:gcode.c       ****         switch(int_value) {
 247:gcode.c       ****           case 0: case 1: case 2: case 30:
 248:gcode.c       ****             word_bit = MODAL_GROUP_M4;
 249:gcode.c       ****             switch(int_value) {
 250:gcode.c       ****               case 0: gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
 251:gcode.c       ****               case 1: break; // Optional stop not supported. Ignore.
 252:gcode.c       ****               default: gc_block.modal.program_flow = int_value; // Program end and reset
 253:gcode.c       ****             }
 254:gcode.c       ****             break;
 255:gcode.c       ****           #ifndef USE_SPINDLE_DIR_AS_ENABLE_PIN
 256:gcode.c       ****             case 4:
 257:gcode.c       ****           #endif
 258:gcode.c       ****           case 3: case 5:
 259:gcode.c       ****             word_bit = MODAL_GROUP_M7;
 260:gcode.c       ****             switch(int_value) {
 261:gcode.c       ****               case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 262:gcode.c       ****               #ifndef USE_SPINDLE_DIR_AS_ENABLE_PIN
 263:gcode.c       ****                 case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
 264:gcode.c       ****               #endif
 265:gcode.c       ****               case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
 266:gcode.c       ****             }
 267:gcode.c       ****             break;
 268:gcode.c       ****           #ifdef ENABLE_M7
 269:gcode.c       ****             case 7: case 8: case 9:
 270:gcode.c       ****           #else
 271:gcode.c       ****             case 8: case 9:
 272:gcode.c       ****           #endif
 273:gcode.c       ****             word_bit = MODAL_GROUP_M8;
 274:gcode.c       ****             switch(int_value) {
 275:gcode.c       ****               #ifdef ENABLE_M7
 276:gcode.c       ****                 case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
 277:gcode.c       ****               #endif
 278:gcode.c       ****               case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 279:gcode.c       ****               case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 9


 280:gcode.c       ****             }
 281:gcode.c       ****             break;
 282:gcode.c       ****           default: FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported M command]
 283:gcode.c       ****         }
 284:gcode.c       **** 
 285:gcode.c       ****         // Check for more than one command per modal group violations in the current block
 286:gcode.c       ****         // NOTE: Variable 'word_bit' is always assigned, if the command is valid.
 287:gcode.c       ****         if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); 
 288:gcode.c       ****         command_words |= bit(word_bit);
 289:gcode.c       ****         break;
 290:gcode.c       **** 
 291:gcode.c       ****       // NOTE: All remaining letters assign values.
 292:gcode.c       ****       default:
 293:gcode.c       **** 
 294:gcode.c       ****         /* Non-Command Words: This initial parsing phase only checks for repeats of the remaining
 295:gcode.c       ****            legal g-code words and stores their value. Error-checking is performed later since some
 296:gcode.c       ****            words (I,J,K,L,P,R) have multiple connotations and/or depend on the issued commands. */
 297:gcode.c       ****         switch(letter){
 298:gcode.c       ****           // case 'A': // Not supported
 299:gcode.c       ****           // case 'B': // Not supported
 300:gcode.c       ****           // case 'C': // Not supported
 301:gcode.c       ****           // case 'D': // Not supported
 302:gcode.c       ****           case 'F': word_bit = WORD_F; gc_block.values.f = value; break;
 303:gcode.c       ****           // case 'H': // Not supported
 304:gcode.c       ****           case 'I': word_bit = WORD_I; gc_block.values.ijk[X_AXIS] = value; ijk_words |= (1<<X_AXIS
 305:gcode.c       ****           case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS
 306:gcode.c       ****           case 'K': word_bit = WORD_K; gc_block.values.ijk[Z_AXIS] = value; ijk_words |= (1<<Z_AXIS
 307:gcode.c       ****           case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 308:gcode.c       ****           case 'N': word_bit = WORD_N; gc_block.values.n = trunc(value); break;
 309:gcode.c       ****           case 'P': word_bit = WORD_P; gc_block.values.p = value; break;
 310:gcode.c       ****           // NOTE: For certain commands, P value must be an integer, but none of these commands are
 311:gcode.c       ****           // case 'Q': // Not supported
 312:gcode.c       ****           case 'R': word_bit = WORD_R; gc_block.values.r = value; break;
 313:gcode.c       ****           case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
 314:gcode.c       ****           case 'T': word_bit = WORD_T;
 315:gcode.c       ****             if(value > MAX_TOOL_NUMBER)  { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 316:gcode.c       ****              gc_block.values.t = int_value;
 317:gcode.c       ****  						break;
 318:gcode.c       ****           case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXI
 319:gcode.c       ****           case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXI
 320:gcode.c       ****           case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXI
 176              		.loc 1 320 0 is_stmt 1
 177 004a 0027     		movs	r7, #0
 178 004c 3E46     		mov	r6, r7
 179 004e 0997     		str	r7, [sp, #36]
 180 0050 0797     		str	r7, [sp, #28]
 181 0052 0897     		str	r7, [sp, #32]
 182 0054 29E2     		b	.L13
 183              	.L12:
 115:gcode.c       ****   else { char_counter = 0; }
 184              		.loc 1 115 0
 185 0056 0023     		movs	r3, #0
 186 0058 8DF85F30 		strb	r3, [sp, #95]
 187 005c F5E7     		b	.L14
 188              	.LVL11:
 189              	.L66:
 121:gcode.c       ****     char_counter++;
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 10


 190              		.loc 1 121 0
 191 005e A4F14102 		sub	r2, r4, #65
 192 0062 D2B2     		uxtb	r2, r2
 193 0064 192A     		cmp	r2, #25
 194 0066 00F2E187 		bhi	.L175
 122:gcode.c       ****     if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected 
 195              		.loc 1 122 0
 196 006a 0133     		adds	r3, r3, #1
 197 006c 18A9     		add	r1, sp, #96
 198 006e 01F8013D 		strb	r3, [r1, #-1]!
 123:gcode.c       **** 
 199              		.loc 1 123 0
 200 0072 4846     		mov	r0, r9
 201 0074 16AA     		add	r2, sp, #88
 202 0076 FFF7FEFF 		bl	read_float
 203              	.LVL12:
 204 007a 0028     		cmp	r0, #0
 205 007c 00F0D887 		beq	.L176
 132:gcode.c       ****     mantissa =  round(100*(value - int_value)); // Compute mantissa for Gxx.x commands.
 206              		.loc 1 132 0
 207 0080 DDF85880 		ldr	r8, [sp, #88]	@ float
 208 0084 4046     		mov	r0, r8
 209 0086 FFF7FEFF 		bl	__aeabi_f2d
 210              	.LVL13:
 211 008a FFF7FEFF 		bl	trunc
 212              	.LVL14:
 213 008e FFF7FEFF 		bl	__aeabi_d2uiz
 214              	.LVL15:
 215 0092 C5B2     		uxtb	r5, r0
 216              	.LVL16:
 133:gcode.c       ****     // NOTE: Rounding must be used to catch small floating point errors.
 217              		.loc 1 133 0
 218 0094 2846     		mov	r0, r5
 219 0096 FFF7FEFF 		bl	__aeabi_i2f
 220              	.LVL17:
 221 009a 0146     		mov	r1, r0
 222 009c 4046     		mov	r0, r8
 223 009e FFF7FEFF 		bl	__aeabi_fsub
 224              	.LVL18:
 225 00a2 7A49     		ldr	r1, .L254+8
 226 00a4 FFF7FEFF 		bl	__aeabi_fmul
 227              	.LVL19:
 228 00a8 FFF7FEFF 		bl	__aeabi_f2d
 229              	.LVL20:
 230 00ac FFF7FEFF 		bl	round
 231              	.LVL21:
 232 00b0 FFF7FEFF 		bl	__aeabi_d2uiz
 233              	.LVL22:
 234 00b4 80B2     		uxth	r0, r0
 235              	.LVL23:
 138:gcode.c       **** 
 236              		.loc 1 138 0
 237 00b6 472C     		cmp	r4, #71
 238 00b8 03D0     		beq	.L17
 239 00ba 4D2C     		cmp	r4, #77
 240 00bc 00F0F980 		beq	.L18
 241 00c0 5FE1     		b	.L246
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 11


 242              	.L17:
 145:gcode.c       ****           case 10: case 28: case 30: case 92:
 243              		.loc 1 145 0
 244 00c2 5E2D     		cmp	r5, #94
 245 00c4 00F2B687 		bhi	.L177
 246 00c8 DFE815F0 		tbh	[pc, r5, lsl #1]
 247              	.L20:
 248 00cc 7800     		.2byte	(.L19-.L20)/2
 249 00ce 7800     		.2byte	(.L19-.L20)/2
 250 00d0 7800     		.2byte	(.L19-.L20)/2
 251 00d2 7800     		.2byte	(.L19-.L20)/2
 252 00d4 6600     		.2byte	(.L21-.L20)/2
 253 00d6 B407     		.2byte	(.L177-.L20)/2
 254 00d8 B407     		.2byte	(.L177-.L20)/2
 255 00da B407     		.2byte	(.L177-.L20)/2
 256 00dc B407     		.2byte	(.L177-.L20)/2
 257 00de B407     		.2byte	(.L177-.L20)/2
 258 00e0 5F00     		.2byte	(.L22-.L20)/2
 259 00e2 B407     		.2byte	(.L177-.L20)/2
 260 00e4 B407     		.2byte	(.L177-.L20)/2
 261 00e6 B407     		.2byte	(.L177-.L20)/2
 262 00e8 B407     		.2byte	(.L177-.L20)/2
 263 00ea B407     		.2byte	(.L177-.L20)/2
 264 00ec B407     		.2byte	(.L177-.L20)/2
 265 00ee 9600     		.2byte	(.L23-.L20)/2
 266 00f0 9600     		.2byte	(.L23-.L20)/2
 267 00f2 9600     		.2byte	(.L23-.L20)/2
 268 00f4 B000     		.2byte	(.L24-.L20)/2
 269 00f6 B000     		.2byte	(.L24-.L20)/2
 270 00f8 B407     		.2byte	(.L177-.L20)/2
 271 00fa B407     		.2byte	(.L177-.L20)/2
 272 00fc B407     		.2byte	(.L177-.L20)/2
 273 00fe B407     		.2byte	(.L177-.L20)/2
 274 0100 B407     		.2byte	(.L177-.L20)/2
 275 0102 B407     		.2byte	(.L177-.L20)/2
 276 0104 5F00     		.2byte	(.L22-.L20)/2
 277 0106 B407     		.2byte	(.L177-.L20)/2
 278 0108 5F00     		.2byte	(.L22-.L20)/2
 279 010a B407     		.2byte	(.L177-.L20)/2
 280 010c B407     		.2byte	(.L177-.L20)/2
 281 010e B407     		.2byte	(.L177-.L20)/2
 282 0110 B407     		.2byte	(.L177-.L20)/2
 283 0112 B407     		.2byte	(.L177-.L20)/2
 284 0114 B407     		.2byte	(.L177-.L20)/2
 285 0116 B407     		.2byte	(.L177-.L20)/2
 286 0118 7800     		.2byte	(.L19-.L20)/2
 287 011a B407     		.2byte	(.L177-.L20)/2
 288 011c D800     		.2byte	(.L178-.L20)/2
 289 011e B407     		.2byte	(.L177-.L20)/2
 290 0120 B407     		.2byte	(.L177-.L20)/2
 291 0122 B600     		.2byte	(.L26-.L20)/2
 292 0124 B407     		.2byte	(.L177-.L20)/2
 293 0126 B407     		.2byte	(.L177-.L20)/2
 294 0128 B407     		.2byte	(.L177-.L20)/2
 295 012a B407     		.2byte	(.L177-.L20)/2
 296 012c B407     		.2byte	(.L177-.L20)/2
 297 012e B600     		.2byte	(.L26-.L20)/2
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 12


 298 0130 B407     		.2byte	(.L177-.L20)/2
 299 0132 B407     		.2byte	(.L177-.L20)/2
 300 0134 B407     		.2byte	(.L177-.L20)/2
 301 0136 6600     		.2byte	(.L21-.L20)/2
 302 0138 CE00     		.2byte	(.L27-.L20)/2
 303 013a CE00     		.2byte	(.L27-.L20)/2
 304 013c CE00     		.2byte	(.L27-.L20)/2
 305 013e CE00     		.2byte	(.L27-.L20)/2
 306 0140 CE00     		.2byte	(.L27-.L20)/2
 307 0142 CE00     		.2byte	(.L27-.L20)/2
 308 0144 B407     		.2byte	(.L177-.L20)/2
 309 0146 D300     		.2byte	(.L28-.L20)/2
 310 0148 B407     		.2byte	(.L177-.L20)/2
 311 014a B407     		.2byte	(.L177-.L20)/2
 312 014c B407     		.2byte	(.L177-.L20)/2
 313 014e B407     		.2byte	(.L177-.L20)/2
 314 0150 B407     		.2byte	(.L177-.L20)/2
 315 0152 B407     		.2byte	(.L177-.L20)/2
 316 0154 B407     		.2byte	(.L177-.L20)/2
 317 0156 B407     		.2byte	(.L177-.L20)/2
 318 0158 B407     		.2byte	(.L177-.L20)/2
 319 015a B407     		.2byte	(.L177-.L20)/2
 320 015c B407     		.2byte	(.L177-.L20)/2
 321 015e B407     		.2byte	(.L177-.L20)/2
 322 0160 B407     		.2byte	(.L177-.L20)/2
 323 0162 B407     		.2byte	(.L177-.L20)/2
 324 0164 B407     		.2byte	(.L177-.L20)/2
 325 0166 B407     		.2byte	(.L177-.L20)/2
 326 0168 B407     		.2byte	(.L177-.L20)/2
 327 016a B407     		.2byte	(.L177-.L20)/2
 328 016c 7E00     		.2byte	(.L29-.L20)/2
 329 016e B407     		.2byte	(.L177-.L20)/2
 330 0170 B407     		.2byte	(.L177-.L20)/2
 331 0172 B407     		.2byte	(.L177-.L20)/2
 332 0174 B407     		.2byte	(.L177-.L20)/2
 333 0176 B407     		.2byte	(.L177-.L20)/2
 334 0178 B407     		.2byte	(.L177-.L20)/2
 335 017a B407     		.2byte	(.L177-.L20)/2
 336 017c B407     		.2byte	(.L177-.L20)/2
 337 017e B407     		.2byte	(.L177-.L20)/2
 338 0180 9B00     		.2byte	(.L30-.L20)/2
 339 0182 9B00     		.2byte	(.L30-.L20)/2
 340 0184 5F00     		.2byte	(.L22-.L20)/2
 341 0186 AA00     		.2byte	(.L31-.L20)/2
 342 0188 AA00     		.2byte	(.L31-.L20)/2
 343              		.p2align 1
 344              	.L22:
 149:gcode.c       ****               if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command
 345              		.loc 1 149 0
 346 018a 28B9     		cbnz	r0, .L21
 150:gcode.c       ****               axis_command = AXIS_COMMAND_NON_MODAL;
 347              		.loc 1 150 0
 348 018c 089B     		ldr	r3, [sp, #32]
 349 018e 002B     		cmp	r3, #0
 350 0190 40F05287 		bne	.L179
 151:gcode.c       ****             }
 351              		.loc 1 151 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 13


 352 0194 0123     		movs	r3, #1
 353 0196 0893     		str	r3, [sp, #32]
 354              	.LVL24:
 355              	.L21:
 156:gcode.c       ****             if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 356              		.loc 1 156 0
 357 0198 3A4B     		ldr	r3, .L254
 358 019a 1D70     		strb	r5, [r3]
 157:gcode.c       ****               if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 359              		.loc 1 157 0
 360 019c 1C2D     		cmp	r5, #28
 361 019e 03D0     		beq	.L32
 157:gcode.c       ****               if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 362              		.loc 1 157 0 is_stmt 0 discriminator 1
 363 01a0 1E2D     		cmp	r5, #30
 364 01a2 01D0     		beq	.L32
 157:gcode.c       ****               if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 365              		.loc 1 157 0 discriminator 2
 366 01a4 5C2D     		cmp	r5, #92
 367 01a6 6BD1     		bne	.L180
 368              	.L32:
 158:gcode.c       ****               gc_block.non_modal_command += mantissa;
 369              		.loc 1 158 0 is_stmt 1
 370 01a8 10B1     		cbz	r0, .L33
 158:gcode.c       ****               gc_block.non_modal_command += mantissa;
 371              		.loc 1 158 0 is_stmt 0 discriminator 1
 372 01aa 0A28     		cmp	r0, #10
 373 01ac 40F04687 		bne	.L181
 374              	.L33:
 159:gcode.c       ****               mantissa = 0; // Set to zero to indicate valid non-integer G command.
 375              		.loc 1 159 0 is_stmt 1
 376 01b0 2844     		add	r0, r0, r5
 377              	.LVL25:
 378 01b2 344B     		ldr	r3, .L254
 379 01b4 1870     		strb	r0, [r3]
 380              	.LVL26:
 160:gcode.c       ****             }                
 381              		.loc 1 160 0
 382 01b6 0020     		movs	r0, #0
 155:gcode.c       ****             gc_block.non_modal_command = int_value;
 383              		.loc 1 155 0
 384 01b8 0246     		mov	r2, r0
 385 01ba 6CE0     		b	.L25
 386              	.LVL27:
 387              	.L19:
 166:gcode.c       ****             axis_command = AXIS_COMMAND_MOTION_MODE;
 388              		.loc 1 166 0
 389 01bc 089B     		ldr	r3, [sp, #32]
 390 01be 002B     		cmp	r3, #0
 391 01c0 40F03E87 		bne	.L182
 167:gcode.c       ****             // No break. Continues to next line.
 392              		.loc 1 167 0
 393 01c4 0223     		movs	r3, #2
 394 01c6 0893     		str	r3, [sp, #32]
 395              	.LVL28:
 396              	.L29:
 171:gcode.c       ****             if (int_value == 38){
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 14


 397              		.loc 1 171 0
 398 01c8 2E4B     		ldr	r3, .L254
 399 01ca 5D70     		strb	r5, [r3, #1]
 172:gcode.c       ****               if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) 
 400              		.loc 1 172 0
 401 01cc 262D     		cmp	r5, #38
 402 01ce 61D1     		bne	.L183
 173:gcode.c       ****                 FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported G38.x command]
 403              		.loc 1 173 0
 404 01d0 1428     		cmp	r0, #20
 405 01d2 06D0     		beq	.L34
 173:gcode.c       ****                 FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported G38.x command]
 406              		.loc 1 173 0 is_stmt 0 discriminator 1
 407 01d4 1E28     		cmp	r0, #30
 408 01d6 04D0     		beq	.L34
 173:gcode.c       ****                 FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported G38.x command]
 409              		.loc 1 173 0 discriminator 2
 410 01d8 2828     		cmp	r0, #40
 411 01da 02D0     		beq	.L34
 173:gcode.c       ****                 FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported G38.x command]
 412              		.loc 1 173 0 discriminator 3
 413 01dc 3228     		cmp	r0, #50
 414 01de 40F03187 		bne	.L184
 415              	.L34:
 176:gcode.c       ****               mantissa = 0; // Set to zero to indicate valid non-integer G command.
 416              		.loc 1 176 0 is_stmt 1
 417 01e2 2B4B     		ldr	r3, .L254+12
 418 01e4 A3FB0023 		umull	r2, r3, r3, r0
 419 01e8 05EBD303 		add	r3, r5, r3, lsr #3
 420 01ec 6433     		adds	r3, r3, #100
 421 01ee 254A     		ldr	r2, .L254
 422 01f0 5370     		strb	r3, [r2, #1]
 423              	.LVL29:
 177:gcode.c       ****             }  
 424              		.loc 1 177 0
 425 01f2 0020     		movs	r0, #0
 170:gcode.c       ****             gc_block.modal.motion = int_value;
 426              		.loc 1 170 0
 427 01f4 0122     		movs	r2, #1
 428 01f6 4EE0     		b	.L25
 429              	.LVL30:
 430              	.L23:
 182:gcode.c       ****             break;
 431              		.loc 1 182 0
 432 01f8 113D     		subs	r5, r5, #17
 433              	.LVL31:
 434 01fa 224B     		ldr	r3, .L254
 435 01fc 5D71     		strb	r5, [r3, #5]
 181:gcode.c       ****             gc_block.modal.plane_select = int_value - 17;
 436              		.loc 1 181 0
 437 01fe 0222     		movs	r2, #2
 183:gcode.c       ****           case 90: case 91:
 438              		.loc 1 183 0
 439 0200 49E0     		b	.L25
 440              	.LVL32:
 441              	.L30:
 185:gcode.c       ****               word_bit = MODAL_GROUP_G3;
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 15


 442              		.loc 1 185 0
 443 0202 20B9     		cbnz	r0, .L35
 444              	.LVL33:
 187:gcode.c       ****             } else {
 445              		.loc 1 187 0
 446 0204 5A3D     		subs	r5, r5, #90
 447              	.LVL34:
 448 0206 1F4B     		ldr	r3, .L254
 449 0208 1D71     		strb	r5, [r3, #4]
 186:gcode.c       ****               gc_block.modal.distance = int_value - 90;
 450              		.loc 1 186 0
 451 020a 0322     		movs	r2, #3
 452 020c 43E0     		b	.L25
 453              	.LVL35:
 454              	.L35:
 190:gcode.c       ****               mantissa = 0; // Set to zero to indicate valid non-integer G command.
 455              		.loc 1 190 0
 456 020e 0A28     		cmp	r0, #10
 457 0210 40F01A87 		bne	.L185
 190:gcode.c       ****               mantissa = 0; // Set to zero to indicate valid non-integer G command.
 458              		.loc 1 190 0 is_stmt 0 discriminator 2
 459 0214 5A2D     		cmp	r5, #90
 460 0216 00F01987 		beq	.L186
 191:gcode.c       ****               // Otherwise, arc IJK incremental mode is default. G91.1 does nothing.
 461              		.loc 1 191 0 is_stmt 1
 462 021a 0020     		movs	r0, #0
 463              	.LVL36:
 189:gcode.c       ****               if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); 
 464              		.loc 1 189 0
 465 021c 0422     		movs	r2, #4
 466 021e 3AE0     		b	.L25
 467              	.LVL37:
 468              	.L31:
 197:gcode.c       ****             break;
 469              		.loc 1 197 0
 470 0220 C5F15E05 		rsb	r5, r5, #94
 471              	.LVL38:
 472 0224 174B     		ldr	r3, .L254
 473 0226 9D70     		strb	r5, [r3, #2]
 196:gcode.c       ****             gc_block.modal.feed_rate = 94 - int_value;
 474              		.loc 1 196 0
 475 0228 0522     		movs	r2, #5
 198:gcode.c       ****           case 20: case 21:
 476              		.loc 1 198 0
 477 022a 34E0     		b	.L25
 478              	.LVL39:
 479              	.L24:
 201:gcode.c       ****             break;
 480              		.loc 1 201 0
 481 022c C5F11505 		rsb	r5, r5, #21
 482              	.LVL40:
 483 0230 144B     		ldr	r3, .L254
 484 0232 DD70     		strb	r5, [r3, #3]
 200:gcode.c       ****             gc_block.modal.units = 21 - int_value;
 485              		.loc 1 200 0
 486 0234 0622     		movs	r2, #6
 202:gcode.c       ****           case 40:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 16


 487              		.loc 1 202 0
 488 0236 2EE0     		b	.L25
 489              	.LVL41:
 490              	.L26:
 214:gcode.c       ****             axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 491              		.loc 1 214 0
 492 0238 089B     		ldr	r3, [sp, #32]
 493 023a 002B     		cmp	r3, #0
 494 023c 40F00887 		bne	.L187
 495              	.LVL42:
 216:gcode.c       ****               gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 496              		.loc 1 216 0
 497 0240 312D     		cmp	r5, #49
 498 0242 06D1     		bne	.L36
 217:gcode.c       ****             } else if (mantissa == 10) { // G43.1
 499              		.loc 1 217 0
 500 0244 0020     		movs	r0, #0
 501              	.LVL43:
 502 0246 0F4B     		ldr	r3, .L254
 503 0248 9871     		strb	r0, [r3, #6]
 210:gcode.c       ****             // NOTE: The NIST g-code standard vaguely states that when a tool length offset is chan
 504              		.loc 1 210 0
 505 024a 0822     		movs	r2, #8
 215:gcode.c       ****             if (int_value == 49) { // G49
 506              		.loc 1 215 0
 507 024c 0323     		movs	r3, #3
 508 024e 0893     		str	r3, [sp, #32]
 509 0250 21E0     		b	.L25
 510              	.LVL44:
 511              	.L36:
 218:gcode.c       ****               gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 512              		.loc 1 218 0
 513 0252 0A28     		cmp	r0, #10
 514 0254 40F0FE86 		bne	.L188
 219:gcode.c       ****             } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported G43.x command]
 515              		.loc 1 219 0
 516 0258 0122     		movs	r2, #1
 517 025a 0A4B     		ldr	r3, .L254
 518 025c 9A71     		strb	r2, [r3, #6]
 221:gcode.c       ****             break;
 519              		.loc 1 221 0
 520 025e 0020     		movs	r0, #0
 521              	.LVL45:
 210:gcode.c       ****             // NOTE: The NIST g-code standard vaguely states that when a tool length offset is chan
 522              		.loc 1 210 0
 523 0260 0822     		movs	r2, #8
 215:gcode.c       ****             if (int_value == 49) { // G49
 524              		.loc 1 215 0
 525 0262 0323     		movs	r3, #3
 526 0264 0893     		str	r3, [sp, #32]
 527 0266 16E0     		b	.L25
 528              	.LVL46:
 529              	.L27:
 226:gcode.c       ****             break;
 530              		.loc 1 226 0
 531 0268 363D     		subs	r5, r5, #54
 532              	.LVL47:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 17


 533 026a 064B     		ldr	r3, .L254
 534 026c DD71     		strb	r5, [r3, #7]
 225:gcode.c       ****             gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 535              		.loc 1 225 0
 536 026e 0922     		movs	r2, #9
 227:gcode.c       ****           case 61:
 537              		.loc 1 227 0
 538 0270 11E0     		b	.L25
 539              	.LVL48:
 540              	.L28:
 230:gcode.c       ****             // gc_block.modal.control = CONTROL_MODE_EXACT_PATH; // G61
 541              		.loc 1 230 0
 542 0272 0028     		cmp	r0, #0
 543 0274 40F0F086 		bne	.L189
 229:gcode.c       ****             if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 544              		.loc 1 229 0
 545 0278 0A22     		movs	r2, #10
 546 027a 0CE0     		b	.L25
 547              	.LVL49:
 548              	.L178:
 204:gcode.c       ****             // NOTE: Not required since cutter radius compensation is always disabled. Only here
 549              		.loc 1 204 0
 550 027c 0722     		movs	r2, #7
 551 027e 0AE0     		b	.L25
 552              	.LVL50:
 553              	.L180:
 155:gcode.c       ****             gc_block.non_modal_command = int_value;
 554              		.loc 1 155 0
 555 0280 0022     		movs	r2, #0
 556 0282 08E0     		b	.L25
 557              	.L255:
 558              		.align	2
 559              	.L254:
 560 0284 00000000 		.word	gc_block
 561 0288 00000000 		.word	gc_state
 562 028c 0000C842 		.word	1120403456
 563 0290 CDCCCCCC 		.word	-858993459
 564              	.LVL51:
 565              	.L183:
 170:gcode.c       ****             gc_block.modal.motion = int_value;
 566              		.loc 1 170 0
 567 0294 0122     		movs	r2, #1
 568              	.LVL52:
 569              	.L25:
 235:gcode.c       ****         // Check for more than one command per modal group violations in the current block
 570              		.loc 1 235 0
 571 0296 0028     		cmp	r0, #0
 572 0298 40F0E086 		bne	.L190
 238:gcode.c       ****         command_words |= bit(word_bit);
 573              		.loc 1 238 0
 574 029c 46FA02F3 		asr	r3, r6, r2
 575 02a0 13F0010F 		tst	r3, #1
 576 02a4 40F0DC86 		bne	.L191
 239:gcode.c       ****         break;
 577              		.loc 1 239 0
 578 02a8 0123     		movs	r3, #1
 579 02aa 9340     		lsls	r3, r3, r2
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 18


 580 02ac 1E43     		orrs	r6, r6, r3
 581              	.LVL53:
 582 02ae B6B2     		uxth	r6, r6
 583              	.LVL54:
 240:gcode.c       **** 
 584              		.loc 1 240 0
 585 02b0 FBE0     		b	.L13
 586              	.LVL55:
 587              	.L18:
 245:gcode.c       ****         switch(int_value) {
 588              		.loc 1 245 0
 589 02b2 0028     		cmp	r0, #0
 590 02b4 40F0D686 		bne	.L192
 246:gcode.c       ****           case 0: case 1: case 2: case 30:
 591              		.loc 1 246 0
 592 02b8 1E2D     		cmp	r5, #30
 593 02ba 00F2D586 		bhi	.L193
 594 02be DFE815F0 		tbh	[pc, r5, lsl #1]
 595              	.L39:
 596 02c2 1F00     		.2byte	(.L38-.L39)/2
 597 02c4 1F00     		.2byte	(.L38-.L39)/2
 598 02c6 1F00     		.2byte	(.L38-.L39)/2
 599 02c8 2C00     		.2byte	(.L40-.L39)/2
 600 02ca 2C00     		.2byte	(.L40-.L39)/2
 601 02cc 2C00     		.2byte	(.L40-.L39)/2
 602 02ce D306     		.2byte	(.L193-.L39)/2
 603 02d0 D306     		.2byte	(.L193-.L39)/2
 604 02d2 4100     		.2byte	(.L41-.L39)/2
 605 02d4 4100     		.2byte	(.L41-.L39)/2
 606 02d6 D306     		.2byte	(.L193-.L39)/2
 607 02d8 D306     		.2byte	(.L193-.L39)/2
 608 02da D306     		.2byte	(.L193-.L39)/2
 609 02dc D306     		.2byte	(.L193-.L39)/2
 610 02de D306     		.2byte	(.L193-.L39)/2
 611 02e0 D306     		.2byte	(.L193-.L39)/2
 612 02e2 D306     		.2byte	(.L193-.L39)/2
 613 02e4 D306     		.2byte	(.L193-.L39)/2
 614 02e6 D306     		.2byte	(.L193-.L39)/2
 615 02e8 D306     		.2byte	(.L193-.L39)/2
 616 02ea D306     		.2byte	(.L193-.L39)/2
 617 02ec D306     		.2byte	(.L193-.L39)/2
 618 02ee D306     		.2byte	(.L193-.L39)/2
 619 02f0 D306     		.2byte	(.L193-.L39)/2
 620 02f2 D306     		.2byte	(.L193-.L39)/2
 621 02f4 D306     		.2byte	(.L193-.L39)/2
 622 02f6 D306     		.2byte	(.L193-.L39)/2
 623 02f8 D306     		.2byte	(.L193-.L39)/2
 624 02fa D306     		.2byte	(.L193-.L39)/2
 625 02fc D306     		.2byte	(.L193-.L39)/2
 626 02fe 1F00     		.2byte	(.L38-.L39)/2
 627              		.p2align 1
 628              	.L38:
 629              	.LVL56:
 249:gcode.c       ****               case 0: gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
 630              		.loc 1 249 0
 631 0300 15B1     		cbz	r5, .L43
 632 0302 012D     		cmp	r5, #1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 19


 633 0304 2DD0     		beq	.L194
 634 0306 04E0     		b	.L247
 635              	.L43:
 250:gcode.c       ****               case 1: break; // Optional stop not supported. Ignore.
 636              		.loc 1 250 0
 637 0308 0322     		movs	r2, #3
 638 030a A74B     		ldr	r3, .L256+8
 639 030c 1A72     		strb	r2, [r3, #8]
 248:gcode.c       ****             switch(int_value) {
 640              		.loc 1 248 0
 641 030e 0B22     		movs	r2, #11
 250:gcode.c       ****               case 1: break; // Optional stop not supported. Ignore.
 642              		.loc 1 250 0
 643 0310 2CE0     		b	.L44
 644              	.L247:
 252:gcode.c       ****             }
 645              		.loc 1 252 0
 646 0312 A54B     		ldr	r3, .L256+8
 647 0314 1D72     		strb	r5, [r3, #8]
 248:gcode.c       ****             switch(int_value) {
 648              		.loc 1 248 0
 649 0316 0B22     		movs	r2, #11
 650 0318 28E0     		b	.L44
 651              	.LVL57:
 652              	.L40:
 260:gcode.c       ****               case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 653              		.loc 1 260 0
 654 031a 042D     		cmp	r5, #4
 655 031c 08D0     		beq	.L45
 656 031e 052D     		cmp	r5, #5
 657 0320 0BD0     		beq	.L46
 658 0322 032D     		cmp	r5, #3
 659 0324 1FD1     		bne	.L248
 261:gcode.c       ****               #ifndef USE_SPINDLE_DIR_AS_ENABLE_PIN
 660              		.loc 1 261 0
 661 0326 1022     		movs	r2, #16
 662 0328 9F4B     		ldr	r3, .L256+8
 663 032a 9A72     		strb	r2, [r3, #10]
 259:gcode.c       ****             switch(int_value) {
 664              		.loc 1 259 0
 665 032c 0C22     		movs	r2, #12
 261:gcode.c       ****               #ifndef USE_SPINDLE_DIR_AS_ENABLE_PIN
 666              		.loc 1 261 0
 667 032e 1DE0     		b	.L44
 668              	.L45:
 263:gcode.c       ****               #endif
 669              		.loc 1 263 0
 670 0330 2022     		movs	r2, #32
 671 0332 9D4B     		ldr	r3, .L256+8
 672 0334 9A72     		strb	r2, [r3, #10]
 259:gcode.c       ****             switch(int_value) {
 673              		.loc 1 259 0
 674 0336 0C22     		movs	r2, #12
 263:gcode.c       ****               #endif
 675              		.loc 1 263 0
 676 0338 18E0     		b	.L44
 677              	.L46:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 20


 265:gcode.c       ****             }
 678              		.loc 1 265 0
 679 033a 0022     		movs	r2, #0
 680 033c 9A4B     		ldr	r3, .L256+8
 681 033e 9A72     		strb	r2, [r3, #10]
 259:gcode.c       ****             switch(int_value) {
 682              		.loc 1 259 0
 683 0340 0C22     		movs	r2, #12
 265:gcode.c       ****             }
 684              		.loc 1 265 0
 685 0342 13E0     		b	.L44
 686              	.LVL58:
 687              	.L41:
 274:gcode.c       ****               #ifdef ENABLE_M7
 688              		.loc 1 274 0
 689 0344 082D     		cmp	r5, #8
 690 0346 02D0     		beq	.L48
 691 0348 092D     		cmp	r5, #9
 692 034a 05D0     		beq	.L49
 693 034c 0DE0     		b	.L249
 694              	.L48:
 278:gcode.c       ****               case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 695              		.loc 1 278 0
 696 034e 4022     		movs	r2, #64
 697 0350 954B     		ldr	r3, .L256+8
 698 0352 5A72     		strb	r2, [r3, #9]
 273:gcode.c       ****             switch(int_value) {
 699              		.loc 1 273 0
 700 0354 0D22     		movs	r2, #13
 278:gcode.c       ****               case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 701              		.loc 1 278 0
 702 0356 09E0     		b	.L44
 703              	.L49:
 279:gcode.c       ****             }
 704              		.loc 1 279 0
 705 0358 0022     		movs	r2, #0
 706 035a 934B     		ldr	r3, .L256+8
 707 035c 5A72     		strb	r2, [r3, #9]
 273:gcode.c       ****             switch(int_value) {
 708              		.loc 1 273 0
 709 035e 0D22     		movs	r2, #13
 279:gcode.c       ****             }
 710              		.loc 1 279 0
 711 0360 04E0     		b	.L44
 712              	.LVL59:
 713              	.L194:
 248:gcode.c       ****             switch(int_value) {
 714              		.loc 1 248 0
 715 0362 0B22     		movs	r2, #11
 716 0364 02E0     		b	.L44
 717              	.LVL60:
 718              	.L248:
 259:gcode.c       ****             switch(int_value) {
 719              		.loc 1 259 0
 720 0366 0C22     		movs	r2, #12
 721 0368 00E0     		b	.L44
 722              	.LVL61:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 21


 723              	.L249:
 273:gcode.c       ****             switch(int_value) {
 724              		.loc 1 273 0
 725 036a 0D22     		movs	r2, #13
 726              	.LVL62:
 727              	.L44:
 287:gcode.c       ****         command_words |= bit(word_bit);
 728              		.loc 1 287 0
 729 036c 46FA02F3 		asr	r3, r6, r2
 730 0370 13F0010F 		tst	r3, #1
 731 0374 40F07A86 		bne	.L197
 288:gcode.c       ****         break;
 732              		.loc 1 288 0
 733 0378 0123     		movs	r3, #1
 734 037a 9340     		lsls	r3, r3, r2
 735 037c 1E43     		orrs	r6, r6, r3
 736              	.LVL63:
 737 037e B6B2     		uxth	r6, r6
 738              	.LVL64:
 289:gcode.c       **** 
 739              		.loc 1 289 0
 740 0380 93E0     		b	.L13
 741              	.LVL65:
 742              	.L246:
 297:gcode.c       ****           // case 'A': // Not supported
 743              		.loc 1 297 0
 744 0382 463C     		subs	r4, r4, #70
 745              	.LVL66:
 746 0384 142C     		cmp	r4, #20
 747 0386 00F27386 		bhi	.L198
 748 038a DFE814F0 		tbh	[pc, r4, lsl #1]
 749              	.L51:
 750 038e 1500     		.2byte	(.L50-.L51)/2
 751 0390 7106     		.2byte	(.L198-.L51)/2
 752 0392 7106     		.2byte	(.L198-.L51)/2
 753 0394 1A00     		.2byte	(.L52-.L51)/2
 754 0396 2300     		.2byte	(.L53-.L51)/2
 755 0398 2C00     		.2byte	(.L54-.L51)/2
 756 039a 3500     		.2byte	(.L55-.L51)/2
 757 039c 7106     		.2byte	(.L198-.L51)/2
 758 039e 3900     		.2byte	(.L56-.L51)/2
 759 03a0 7106     		.2byte	(.L198-.L51)/2
 760 03a2 4000     		.2byte	(.L57-.L51)/2
 761 03a4 7106     		.2byte	(.L198-.L51)/2
 762 03a6 4500     		.2byte	(.L58-.L51)/2
 763 03a8 4A00     		.2byte	(.L59-.L51)/2
 764 03aa 4F00     		.2byte	(.L60-.L51)/2
 765 03ac 7106     		.2byte	(.L198-.L51)/2
 766 03ae 7106     		.2byte	(.L198-.L51)/2
 767 03b0 7106     		.2byte	(.L198-.L51)/2
 768 03b2 5B00     		.2byte	(.L61-.L51)/2
 769 03b4 6400     		.2byte	(.L62-.L51)/2
 770 03b6 6D00     		.2byte	(.L63-.L51)/2
 771              		.p2align 1
 772              	.L50:
 773              	.LVL67:
 302:gcode.c       ****           // case 'H': // Not supported
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 22


 774              		.loc 1 302 0
 775 03b8 7B4B     		ldr	r3, .L256+8
 776 03ba C3F80C80 		str	r8, [r3, #12]	@ float
 777 03be 0023     		movs	r3, #0
 778 03c0 5AE0     		b	.L64
 779              	.LVL68:
 780              	.L52:
 304:gcode.c       ****           case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS
 781              		.loc 1 304 0
 782 03c2 794B     		ldr	r3, .L256+8
 783 03c4 C3F81080 		str	r8, [r3, #16]	@ float
 784 03c8 099B     		ldr	r3, [sp, #36]
 785 03ca 43F00103 		orr	r3, r3, #1
 786 03ce 0993     		str	r3, [sp, #36]
 787              	.LVL69:
 788 03d0 0123     		movs	r3, #1
 789 03d2 51E0     		b	.L64
 790              	.LVL70:
 791              	.L53:
 305:gcode.c       ****           case 'K': word_bit = WORD_K; gc_block.values.ijk[Z_AXIS] = value; ijk_words |= (1<<Z_AXIS
 792              		.loc 1 305 0
 793 03d4 744B     		ldr	r3, .L256+8
 794 03d6 C3F81480 		str	r8, [r3, #20]	@ float
 795 03da 099B     		ldr	r3, [sp, #36]
 796 03dc 43F00203 		orr	r3, r3, #2
 797 03e0 0993     		str	r3, [sp, #36]
 798              	.LVL71:
 799 03e2 0223     		movs	r3, #2
 800 03e4 48E0     		b	.L64
 801              	.LVL72:
 802              	.L54:
 306:gcode.c       ****           case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 803              		.loc 1 306 0
 804 03e6 704B     		ldr	r3, .L256+8
 805 03e8 C3F81880 		str	r8, [r3, #24]	@ float
 806 03ec 099B     		ldr	r3, [sp, #36]
 807 03ee 43F00403 		orr	r3, r3, #4
 808 03f2 0993     		str	r3, [sp, #36]
 809              	.LVL73:
 810 03f4 0323     		movs	r3, #3
 811 03f6 3FE0     		b	.L64
 812              	.LVL74:
 813              	.L55:
 307:gcode.c       ****           case 'N': word_bit = WORD_N; gc_block.values.n = trunc(value); break;
 814              		.loc 1 307 0
 815 03f8 6B4B     		ldr	r3, .L256+8
 816 03fa 1D77     		strb	r5, [r3, #28]
 817 03fc 0423     		movs	r3, #4
 818 03fe 3BE0     		b	.L64
 819              	.LVL75:
 820              	.L56:
 308:gcode.c       ****           case 'P': word_bit = WORD_P; gc_block.values.p = value; break;
 821              		.loc 1 308 0
 822 0400 4046     		mov	r0, r8
 823              	.LVL76:
 824 0402 FFF7FEFF 		bl	__aeabi_f2iz
 825              	.LVL77:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 23


 826 0406 684B     		ldr	r3, .L256+8
 827 0408 1862     		str	r0, [r3, #32]
 828 040a 0523     		movs	r3, #5
 829 040c 34E0     		b	.L64
 830              	.LVL78:
 831              	.L57:
 309:gcode.c       ****           // NOTE: For certain commands, P value must be an integer, but none of these commands are
 832              		.loc 1 309 0
 833 040e 664B     		ldr	r3, .L256+8
 834 0410 C3F82480 		str	r8, [r3, #36]	@ float
 835 0414 0623     		movs	r3, #6
 836 0416 2FE0     		b	.L64
 837              	.LVL79:
 838              	.L58:
 312:gcode.c       ****           case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
 839              		.loc 1 312 0
 840 0418 634B     		ldr	r3, .L256+8
 841 041a C3F82880 		str	r8, [r3, #40]	@ float
 842 041e 0723     		movs	r3, #7
 843 0420 2AE0     		b	.L64
 844              	.LVL80:
 845              	.L59:
 313:gcode.c       ****           case 'T': word_bit = WORD_T;
 846              		.loc 1 313 0
 847 0422 614B     		ldr	r3, .L256+8
 848 0424 C3F82C80 		str	r8, [r3, #44]	@ float
 849 0428 0823     		movs	r3, #8
 850 042a 25E0     		b	.L64
 851              	.LVL81:
 852              	.L60:
 315:gcode.c       ****              gc_block.values.t = int_value;
 853              		.loc 1 315 0
 854 042c 4046     		mov	r0, r8
 855              	.LVL82:
 856 042e 5F49     		ldr	r1, .L256+12
 857 0430 FFF7FEFF 		bl	__aeabi_fcmpgt
 858              	.LVL83:
 859 0434 0028     		cmp	r0, #0
 860 0436 40F01D86 		bne	.L199
 316:gcode.c       ****  						break;
 861              		.loc 1 316 0
 862 043a 5B4B     		ldr	r3, .L256+8
 863 043c 83F83050 		strb	r5, [r3, #48]
 314:gcode.c       ****             if(value > MAX_TOOL_NUMBER)  { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 864              		.loc 1 314 0
 865 0440 0923     		movs	r3, #9
 317:gcode.c       ****           case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXI
 866              		.loc 1 317 0
 867 0442 19E0     		b	.L64
 868              	.LVL84:
 869              	.L61:
 318:gcode.c       ****           case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXI
 870              		.loc 1 318 0
 871 0444 584B     		ldr	r3, .L256+8
 872 0446 C3F83480 		str	r8, [r3, #52]	@ float
 873 044a 079B     		ldr	r3, [sp, #28]
 874 044c 43F00103 		orr	r3, r3, #1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 24


 875 0450 0793     		str	r3, [sp, #28]
 876              	.LVL85:
 877 0452 0A23     		movs	r3, #10
 878 0454 10E0     		b	.L64
 879              	.LVL86:
 880              	.L62:
 319:gcode.c       ****           case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXI
 881              		.loc 1 319 0
 882 0456 544B     		ldr	r3, .L256+8
 883 0458 C3F83880 		str	r8, [r3, #56]	@ float
 884 045c 079B     		ldr	r3, [sp, #28]
 885 045e 43F00203 		orr	r3, r3, #2
 886 0462 0793     		str	r3, [sp, #28]
 887              	.LVL87:
 888 0464 0B23     		movs	r3, #11
 889 0466 07E0     		b	.L64
 890              	.LVL88:
 891              	.L63:
 892              		.loc 1 320 0
 893 0468 4F4B     		ldr	r3, .L256+8
 894 046a C3F83C80 		str	r8, [r3, #60]	@ float
 895 046e 079B     		ldr	r3, [sp, #28]
 896 0470 43F00403 		orr	r3, r3, #4
 897 0474 0793     		str	r3, [sp, #28]
 898              	.LVL89:
 899 0476 0C23     		movs	r3, #12
 900              	.LVL90:
 901              	.L64:
 321:gcode.c       ****           default: FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 322:gcode.c       ****         }
 323:gcode.c       **** 
 324:gcode.c       ****         // NOTE: Variable 'word_bit' is always assigned, if the non-command letter is valid.
 325:gcode.c       ****         if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word r
 902              		.loc 1 325 0
 903 0478 1C46     		mov	r4, r3
 904 047a 47FA03F2 		asr	r2, r7, r3
 905 047e 12F0010F 		tst	r2, #1
 906 0482 40F0F985 		bne	.L200
 326:gcode.c       ****         // Check for invalid negative values for words F, N, P, T, and S.
 327:gcode.c       ****         // NOTE: Negative value check is done here simply for code-efficiency.
 328:gcode.c       ****         if ( bit(word_bit) & (bit(WORD_F)|bit(WORD_N)|bit(WORD_P)|bit(WORD_T)|bit(WORD_S)) ) {
 907              		.loc 1 328 0
 908 0486 40F26132 		movw	r2, #865
 909 048a 42FA03F3 		asr	r3, r2, r3
 910              	.LVL91:
 911 048e 13F0010F 		tst	r3, #1
 912 0492 06D0     		beq	.L65
 329:gcode.c       ****           if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 913              		.loc 1 329 0
 914 0494 4046     		mov	r0, r8
 915 0496 0021     		movs	r1, #0
 916 0498 FFF7FEFF 		bl	__aeabi_fcmplt
 917              	.LVL92:
 918 049c 0028     		cmp	r0, #0
 919 049e 40F0ED85 		bne	.L201
 920              	.L65:
 330:gcode.c       ****         }
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 25


 331:gcode.c       ****         value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 921              		.loc 1 331 0
 922 04a2 0123     		movs	r3, #1
 923 04a4 A340     		lsls	r3, r3, r4
 924 04a6 1F43     		orrs	r7, r7, r3
 925              	.LVL93:
 926 04a8 BFB2     		uxth	r7, r7
 927              	.LVL94:
 928              	.L13:
 117:gcode.c       **** 
 929              		.loc 1 117 0
 930 04aa 9DF85F30 		ldrb	r3, [sp, #95]	@ zero_extendqisi2
 931 04ae 19F80340 		ldrb	r4, [r9, r3]	@ zero_extendqisi2
 932 04b2 002C     		cmp	r4, #0
 933 04b4 7FF4D3AD 		bne	.L66
 332:gcode.c       **** 
 333:gcode.c       ****     }
 334:gcode.c       ****   }
 335:gcode.c       ****   // Parsing complete!
 336:gcode.c       **** 
 337:gcode.c       **** 
 338:gcode.c       ****   /* -------------------------------------------------------------------------------------
 339:gcode.c       ****      STEP 3: Error-check all commands and values passed in this block. This step ensures all of
 340:gcode.c       ****      the commands are valid for execution and follows the NIST standard as closely as possible.
 341:gcode.c       ****      If an error is found, all commands and values in this block are dumped and will not update
 342:gcode.c       ****      the active system g-code modes. If the block is ok, the active system g-code modes will be
 343:gcode.c       ****      updated based on the commands of this block, and signal for it to be executed.
 344:gcode.c       **** 
 345:gcode.c       ****      Also, we have to pre-convert all of the values passed based on the modes set by the parsed
 346:gcode.c       ****      block. There are a number of error-checks that require target information that can only be
 347:gcode.c       ****      accurately calculated if we convert these values in conjunction with the error-checking.
 348:gcode.c       ****      This relegates the next execution step as only updating the system g-code modes and
 349:gcode.c       ****      performing the programmed actions in order. The execution step should not require any
 350:gcode.c       ****      conversion calculations and would only require minimal checks necessary to execute.
 351:gcode.c       ****   */
 352:gcode.c       **** 
 353:gcode.c       ****   /* NOTE: At this point, the g-code block has been parsed and the block line can be freed.
 354:gcode.c       ****      NOTE: It's also possible, at some future point, to break up STEP 2, to allow piece-wise
 355:gcode.c       ****      parsing of the block on a per-word basis, rather than the entire block. This could remove
 356:gcode.c       ****      the need for maintaining a large string variable for the entire block and free up some memory.
 357:gcode.c       ****      To do this, this would simply need to retain all of the data in STEP 1, such as the new block
 358:gcode.c       ****      data struct, the modal group and value bitflag tracking variables, and axis array indices
 359:gcode.c       ****      compatible variables. This data contains all of the information necessary to error-check the
 360:gcode.c       ****      new g-code block when the EOL character is received. However, this would break Grbl's startup
 361:gcode.c       ****      lines in how it currently works and would require some refactoring to make it compatible.
 362:gcode.c       ****   */
 363:gcode.c       **** 
 364:gcode.c       ****   // [0. Non-specific/common error-checks and miscellaneous setup]:
 365:gcode.c       **** 
 366:gcode.c       ****   // Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
 367:gcode.c       ****   // command has been sent. If so, set axis command to current motion mode.
 368:gcode.c       ****   if (axis_words) {
 934              		.loc 1 368 0
 935 04b8 079B     		ldr	r3, [sp, #28]
 936 04ba 1BB1     		cbz	r3, .L67
 369:gcode.c       ****     if (!axis_command) { axis_command = AXIS_COMMAND_MOTION_MODE; } // Assign implicit motion-mode
 937              		.loc 1 369 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 26


 938 04bc 089B     		ldr	r3, [sp, #32]
 939 04be 0BB9     		cbnz	r3, .L67
 940 04c0 0223     		movs	r3, #2
 941 04c2 0893     		str	r3, [sp, #32]
 942              	.LVL95:
 943              	.L67:
 370:gcode.c       ****   }
 371:gcode.c       **** 
 372:gcode.c       ****   // Check for valid line number N value.
 373:gcode.c       ****   if (bit_istrue(value_words,bit(WORD_N))) {
 944              		.loc 1 373 0
 945 04c4 07F02003 		and	r3, r7, #32
 946 04c8 9BB2     		uxth	r3, r3
 947 04ca 2BB1     		cbz	r3, .L68
 374:gcode.c       ****     // Line number value cannot be less than zero (done) or greater than max line number.
 375:gcode.c       ****     if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceed
 948              		.loc 1 375 0
 949 04cc 364B     		ldr	r3, .L256+8
 950 04ce 1A6A     		ldr	r2, [r3, #32]
 951 04d0 374B     		ldr	r3, .L256+16
 952 04d2 9A42     		cmp	r2, r3
 953 04d4 00F3D485 		bgt	.L203
 954              	.L68:
 376:gcode.c       ****   }
 377:gcode.c       ****   // bit_false(value_words,bit(WORD_N)); // NOTE: Single-meaning value word. Set at end of error-ch
 378:gcode.c       **** 
 379:gcode.c       ****   // Track for unused words at the end of error-checking.
 380:gcode.c       ****   // NOTE: Single-meaning value words are removed all at once at the end of error-checking, because
 381:gcode.c       ****   // they are always used when present. This was done to save a few bytes of flash. For clarity, th
 382:gcode.c       ****   // single-meaning value words may be removed as they are used. Also, axis words are treated in th
 383:gcode.c       ****   // same way. If there is an explicit/implicit axis command, XYZ words are always used and are
 384:gcode.c       ****   // are removed at the end of error-checking.
 385:gcode.c       **** 
 386:gcode.c       ****   // [1. Comments ]: MSG's NOT SUPPORTED. Comment handling performed by protocol.
 387:gcode.c       **** 
 388:gcode.c       ****   // [2. Set feed rate mode ]: G93 F word missing with G1,G2/3 active, implicitly or explicitly. Fe
 389:gcode.c       ****   //   is not defined after switching to G94 from G93.
 390:gcode.c       ****   // NOTE: For jogging, ignore prior feed rate mode. Enforce G94 and check for required F word.
 391:gcode.c       ****   if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 955              		.loc 1 391 0
 956 04d8 BBF1000F 		cmp	fp, #0
 957 04dc 14D0     		beq	.L69
 392:gcode.c       ****     if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); }
 958              		.loc 1 392 0
 959 04de 17F0010F 		tst	r7, #1
 960 04e2 00F0CF85 		beq	.L204
 393:gcode.c       ****     if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 961              		.loc 1 393 0
 962 04e6 304B     		ldr	r3, .L256+8
 963 04e8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 964 04ea 012B     		cmp	r3, #1
 965 04ec 33D1     		bne	.L70
 966              		.loc 1 393 0 is_stmt 0 discriminator 1
 967 04ee 2E4C     		ldr	r4, .L256+8
 968 04f0 E068     		ldr	r0, [r4, #12]	@ float
 969 04f2 FFF7FEFF 		bl	__aeabi_f2d
 970              	.LVL96:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 27


 971 04f6 2AA3     		adr	r3, .L256
 972 04f8 D3E90023 		ldrd	r2, [r3]
 973 04fc FFF7FEFF 		bl	__aeabi_dmul
 974              	.LVL97:
 975 0500 FFF7FEFF 		bl	__aeabi_d2f
 976              	.LVL98:
 977 0504 E060     		str	r0, [r4, #12]	@ float
 978 0506 26E0     		b	.L70
 979              	.L69:
 394:gcode.c       ****   } else {
 395:gcode.c       ****     if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 980              		.loc 1 395 0 is_stmt 1
 981 0508 274B     		ldr	r3, .L256+8
 982 050a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 983 050c 012B     		cmp	r3, #1
 984 050e 07D1     		bne	.L71
 396:gcode.c       ****       // NOTE: G38 can also operate in inverse time, but is undefined as an error. Missing F word c
 397:gcode.c       ****       if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 985              		.loc 1 397 0
 986 0510 089B     		ldr	r3, [sp, #32]
 987 0512 022B     		cmp	r3, #2
 988 0514 1FD1     		bne	.L70
 398:gcode.c       ****         if ((gc_block.modal.motion != MOTION_MODE_NONE) || (gc_block.modal.motion != MOTION_MODE_SE
 399:gcode.c       ****           if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // 
 989              		.loc 1 399 0
 990 0516 17F0010F 		tst	r7, #1
 991 051a 00F0B585 		beq	.L205
 992 051e 1AE0     		b	.L70
 993              	.L71:
 400:gcode.c       ****         }
 401:gcode.c       ****       }
 402:gcode.c       ****       // NOTE: It seems redundant to check for an F word to be passed after switching from G94 to G
 403:gcode.c       ****       // accomplish the exact same thing if the feed rate value is always reset to zero and undefin
 404:gcode.c       ****       // inverse time block, since the commands that use this value already perform undefined check
 405:gcode.c       ****       // also allow other commands, following this switch, to execute and not error out needlessly.
 406:gcode.c       ****       // combined with the above feed rate mode and the below set feed rate error-checking.
 407:gcode.c       **** 
 408:gcode.c       ****       // [3. Set feed rate ]: F is negative (done.)
 409:gcode.c       ****       // - In inverse time mode: Always implicitly zero the feed rate value before and after block 
 410:gcode.c       ****       // NOTE: If in G93 mode or switched into it from G94, just keep F value as initialized zero o
 411:gcode.c       ****       // value in the block. If no F word is passed with a motion command that requires a feed rate
 412:gcode.c       ****       // out in the motion modes error-checking. However, if no F word is passed with NO motion com
 413:gcode.c       ****       // a feed rate, we simply move on and the state feed rate value gets updated to zero and rema
 414:gcode.c       ****     } else { // = G94
 415:gcode.c       ****       // - In units per mm mode: If F word passed, ensure value is in mm/min, otherwise push last s
 416:gcode.c       ****       if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN) { // Last state is also G94
 994              		.loc 1 416 0
 995 0520 244B     		ldr	r3, .L256+20
 996 0522 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 997 0524 BBB9     		cbnz	r3, .L70
 417:gcode.c       ****         if (bit_istrue(value_words,bit(WORD_F))) {
 998              		.loc 1 417 0
 999 0526 17F0010F 		tst	r7, #1
 1000 052a 10D0     		beq	.L72
 418:gcode.c       ****           if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 1001              		.loc 1 418 0
 1002 052c 1E4B     		ldr	r3, .L256+8
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 28


 1003 052e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1004 0530 012B     		cmp	r3, #1
 1005 0532 10D1     		bne	.L70
 1006              		.loc 1 418 0 is_stmt 0 discriminator 1
 1007 0534 1C4C     		ldr	r4, .L256+8
 1008 0536 E068     		ldr	r0, [r4, #12]	@ float
 1009 0538 FFF7FEFF 		bl	__aeabi_f2d
 1010              	.LVL99:
 1011 053c 18A3     		adr	r3, .L256
 1012 053e D3E90023 		ldrd	r2, [r3]
 1013 0542 FFF7FEFF 		bl	__aeabi_dmul
 1014              	.LVL100:
 1015 0546 FFF7FEFF 		bl	__aeabi_d2f
 1016              	.LVL101:
 1017 054a E060     		str	r0, [r4, #12]	@ float
 1018 054c 03E0     		b	.L70
 1019              	.L72:
 419:gcode.c       ****         } else {
 420:gcode.c       ****           gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 1020              		.loc 1 420 0 is_stmt 1
 1021 054e 194B     		ldr	r3, .L256+20
 1022 0550 1A69     		ldr	r2, [r3, #16]	@ float
 1023 0552 154B     		ldr	r3, .L256+8
 1024 0554 DA60     		str	r2, [r3, #12]	@ float
 1025              	.L70:
 421:gcode.c       ****         }
 422:gcode.c       ****       } // Else, switching to G94 from G93, so don't push last state feed rate. Its undefined or th
 423:gcode.c       ****     }
 424:gcode.c       ****   }
 425:gcode.c       ****   // bit_false(value_words,bit(WORD_F)); // NOTE: Single-meaning value word. Set at end of error-ch
 426:gcode.c       **** 
 427:gcode.c       ****   // [4. Set spindle speed ]: S is negative (done.)
 428:gcode.c       ****   if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
 1026              		.loc 1 428 0
 1027 0556 07F48073 		and	r3, r7, #256
 1028 055a 9BB2     		uxth	r3, r3
 1029 055c 1BB9     		cbnz	r3, .L73
 1030              		.loc 1 428 0 is_stmt 0 discriminator 1
 1031 055e 154B     		ldr	r3, .L256+20
 1032 0560 DA68     		ldr	r2, [r3, #12]	@ float
 1033 0562 114B     		ldr	r3, .L256+8
 1034 0564 DA62     		str	r2, [r3, #44]	@ float
 1035              	.L73:
 429:gcode.c       ****   // bit_false(value_words,bit(WORD_S)); // NOTE: Single-meaning value word. Set at end of error-ch
 430:gcode.c       **** 
 431:gcode.c       ****   // [5. Select tool ]: NOT SUPPORTED. Only tracks value. T is negative (done.) Not an integer. Gre
 432:gcode.c       ****   // bit_false(value_words,bit(WORD_T)); // NOTE: Single-meaning value word. Set at end of error-ch
 433:gcode.c       **** 
 434:gcode.c       ****   // [6. Change tool ]: N/A
 435:gcode.c       ****   // [7. Spindle control ]: N/A
 436:gcode.c       ****   // [8. Coolant control ]: N/A
 437:gcode.c       ****   // [9. Enable/disable feed rate or spindle overrides ]: NOT SUPPORTED.
 438:gcode.c       **** 
 439:gcode.c       ****   // [10. Dwell ]: P value missing. P is negative (done.) NOTE: See below.
 440:gcode.c       ****   if (gc_block.non_modal_command == NON_MODAL_DWELL) {
 1036              		.loc 1 440 0 is_stmt 1
 1037 0566 104B     		ldr	r3, .L256+8
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 29


 1038 0568 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1039 056a 042B     		cmp	r3, #4
 1040 056c 08D1     		bne	.L74
 441:gcode.c       ****     if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word
 1041              		.loc 1 441 0
 1042 056e 07F04003 		and	r3, r7, #64
 1043 0572 9BB2     		uxth	r3, r3
 1044 0574 002B     		cmp	r3, #0
 1045 0576 00F09985 		beq	.L206
 442:gcode.c       ****     bit_false(value_words,bit(WORD_P));
 1046              		.loc 1 442 0
 1047 057a 27F04007 		bic	r7, r7, #64
 1048              	.LVL102:
 1049 057e BFB2     		uxth	r7, r7
 1050              	.LVL103:
 1051              	.L74:
 443:gcode.c       ****   }
 444:gcode.c       **** 
 445:gcode.c       ****   // [11. Set active plane ]: N/A
 446:gcode.c       ****   switch (gc_block.modal.plane_select) {
 1052              		.loc 1 446 0
 1053 0580 094B     		ldr	r3, .L256+8
 1054 0582 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1055 0584 13B1     		cbz	r3, .L76
 1056 0586 012B     		cmp	r3, #1
 1057 0588 1DD0     		beq	.L207
 1058 058a 15E0     		b	.L250
 1059              	.L76:
 447:gcode.c       ****     case PLANE_SELECT_XY:
 448:gcode.c       ****       axis_0 = X_AXIS;
 449:gcode.c       ****       axis_1 = Y_AXIS;
 450:gcode.c       ****       axis_linear = Z_AXIS;
 1060              		.loc 1 450 0
 1061 058c 0223     		movs	r3, #2
 1062 058e 0C93     		str	r3, [sp, #48]
 449:gcode.c       ****       axis_linear = Z_AXIS;
 1063              		.loc 1 449 0
 1064 0590 0123     		movs	r3, #1
 1065 0592 0A93     		str	r3, [sp, #40]
 448:gcode.c       ****       axis_1 = Y_AXIS;
 1066              		.loc 1 448 0
 1067 0594 4FF0000B 		mov	fp, #0
 1068 0598 1BE0     		b	.L77
 1069              	.L257:
 1070 059a 00BFAFF3 		.align	3
 1070      0080
 1071              	.L256:
 1072 05a0 66666666 		.word	1717986918
 1073 05a4 66663940 		.word	1077503590
 1074 05a8 00000000 		.word	gc_block
 1075 05ac 00007F43 		.word	1132396544
 1076 05b0 80969800 		.word	10000000
 1077 05b4 00000000 		.word	gc_state
 1078              	.L250:
 1079              	.LVL104:
 451:gcode.c       ****       break;
 452:gcode.c       ****     case PLANE_SELECT_ZX:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 30


 453:gcode.c       ****       axis_0 = Z_AXIS;
 454:gcode.c       ****       axis_1 = X_AXIS;
 455:gcode.c       ****       axis_linear = Y_AXIS;
 456:gcode.c       ****       break;
 457:gcode.c       ****     default: // case PLANE_SELECT_YZ:
 458:gcode.c       ****       axis_0 = Y_AXIS;
 459:gcode.c       ****       axis_1 = Z_AXIS;
 460:gcode.c       ****       axis_linear = X_AXIS;
 1080              		.loc 1 460 0
 1081 05b8 0023     		movs	r3, #0
 1082 05ba 0C93     		str	r3, [sp, #48]
 459:gcode.c       ****       axis_linear = X_AXIS;
 1083              		.loc 1 459 0
 1084 05bc 0223     		movs	r3, #2
 1085 05be 0A93     		str	r3, [sp, #40]
 458:gcode.c       ****       axis_1 = Z_AXIS;
 1086              		.loc 1 458 0
 1087 05c0 4FF0010B 		mov	fp, #1
 1088 05c4 05E0     		b	.L77
 1089              	.LVL105:
 1090              	.L207:
 455:gcode.c       ****       break;
 1091              		.loc 1 455 0
 1092 05c6 0123     		movs	r3, #1
 1093 05c8 0C93     		str	r3, [sp, #48]
 454:gcode.c       ****       axis_linear = Y_AXIS;
 1094              		.loc 1 454 0
 1095 05ca 0023     		movs	r3, #0
 1096 05cc 0A93     		str	r3, [sp, #40]
 453:gcode.c       ****       axis_1 = X_AXIS;
 1097              		.loc 1 453 0
 1098 05ce 4FF0020B 		mov	fp, #2
 1099              	.L77:
 1100              	.LVL106:
 461:gcode.c       ****   }
 462:gcode.c       **** 
 463:gcode.c       ****   // [12. Set length units ]: N/A
 464:gcode.c       ****   // Pre-convert XYZ coordinate values to millimeters, if applicable.
 465:gcode.c       ****   uint8_t idx;
 466:gcode.c       ****   if (gc_block.modal.units == UNITS_MODE_INCHES) {
 1101              		.loc 1 466 0
 1102 05d2 B14B     		ldr	r3, .L258+8
 1103 05d4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1104 05d6 012B     		cmp	r3, #1
 1105 05d8 1DD1     		bne	.L79
 1106 05da 17E0     		b	.L208
 1107              	.LVL107:
 1108              	.L81:
 467:gcode.c       ****     for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 468:gcode.c       ****       if (bit_istrue(axis_words,bit(idx)) ) {
 1109              		.loc 1 468 0
 1110 05dc 48FA04F3 		asr	r3, r8, r4
 1111 05e0 13F0010F 		tst	r3, #1
 1112 05e4 0FD0     		beq	.L80
 469:gcode.c       ****         gc_block.values.xyz[idx] *= MM_PER_INCH;
 1113              		.loc 1 469 0
 1114 05e6 04F10C05 		add	r5, r4, #12
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 31


 1115 05ea AB4B     		ldr	r3, .L258+8
 1116 05ec 03EB8505 		add	r5, r3, r5, lsl #2
 1117 05f0 6868     		ldr	r0, [r5, #4]	@ float
 1118 05f2 FFF7FEFF 		bl	__aeabi_f2d
 1119              	.LVL108:
 1120 05f6 A6A3     		adr	r3, .L258
 1121 05f8 D3E90023 		ldrd	r2, [r3]
 1122 05fc FFF7FEFF 		bl	__aeabi_dmul
 1123              	.LVL109:
 1124 0600 FFF7FEFF 		bl	__aeabi_d2f
 1125              	.LVL110:
 1126 0604 6860     		str	r0, [r5, #4]	@ float
 1127              	.L80:
 467:gcode.c       ****     for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 1128              		.loc 1 467 0 discriminator 2
 1129 0606 0134     		adds	r4, r4, #1
 1130              	.LVL111:
 1131 0608 E4B2     		uxtb	r4, r4
 1132              	.LVL112:
 1133 060a 02E0     		b	.L78
 1134              	.LVL113:
 1135              	.L208:
 1136 060c 0024     		movs	r4, #0
 1137 060e DDF81C80 		ldr	r8, [sp, #28]
 1138              	.L78:
 1139              	.LVL114:
 467:gcode.c       ****     for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 1140              		.loc 1 467 0 is_stmt 0 discriminator 1
 1141 0612 022C     		cmp	r4, #2
 1142 0614 E2D9     		bls	.L81
 1143              	.LVL115:
 1144              	.L79:
 470:gcode.c       ****       }
 471:gcode.c       ****     }
 472:gcode.c       ****   }
 473:gcode.c       **** 
 474:gcode.c       ****   // [13. Cutter radius compensation ]: G41/42 NOT SUPPORTED. Error, if enabled while G53 is active
 475:gcode.c       ****   // [G40 Errors]: G2/3 arc is programmed after a G40. The linear move after disabling is less than
 476:gcode.c       ****   //   NOTE: Since cutter radius compensation is never enabled, these G40 errors don't apply. Grbl 
 477:gcode.c       ****   //   only for the purpose to not error when G40 is sent with a g-code program header to setup the
 478:gcode.c       **** 
 479:gcode.c       ****   // [14. Cutter length compensation ]: G43 NOT SUPPORTED, but G43.1 and G49 are.
 480:gcode.c       ****   // [G43.1 Errors]: Motion command in same line.
 481:gcode.c       ****   //   NOTE: Although not explicitly stated so, G43.1 should be applied to only one valid
 482:gcode.c       ****   //   axis that is configured (in config.h). There should be an error if the configured axis
 483:gcode.c       ****   //   is absent or if any of the other axis words are present.
 484:gcode.c       ****   if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates called in block.
 1145              		.loc 1 484 0 is_stmt 1
 1146 0616 089B     		ldr	r3, [sp, #32]
 1147 0618 032B     		cmp	r3, #3
 1148 061a 07D1     		bne	.L82
 485:gcode.c       ****     if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC) {
 1149              		.loc 1 485 0
 1150 061c 9E4B     		ldr	r3, .L258+8
 1151 061e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1152 0620 012B     		cmp	r3, #1
 1153 0622 03D1     		bne	.L82
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 32


 486:gcode.c       ****       if (axis_words ^ (1<<TOOL_LENGTH_OFFSET_AXIS)) { FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR); }
 1154              		.loc 1 486 0
 1155 0624 079B     		ldr	r3, [sp, #28]
 1156 0626 042B     		cmp	r3, #4
 1157 0628 40F04285 		bne	.L209
 1158              	.L82:
 487:gcode.c       ****     }
 488:gcode.c       ****   }
 489:gcode.c       **** 
 490:gcode.c       ****   // [15. Coordinate system selection ]: *N/A. Error, if cutter radius comp is active.
 491:gcode.c       ****   // TODO: An EEPROM read of the coordinate data may require a buffer sync when the cycle
 492:gcode.c       ****   // is active. The read pauses the processor temporarily and may cause a rare crash. For
 493:gcode.c       ****   // future versions on processors with enough memory, all coordinate data should be stored
 494:gcode.c       ****   // in memory and written to EEPROM only when there is not a cycle active.
 495:gcode.c       ****   float block_coord_system[N_AXIS];
 496:gcode.c       ****   memcpy(block_coord_system,gc_state.coord_system,sizeof(gc_state.coord_system));
 1159              		.loc 1 496 0
 1160 062c 13AB     		add	r3, sp, #76
 1161 062e 9B4A     		ldr	r2, .L258+12
 1162 0630 07CA     		ldmia	r2, {r0, r1, r2}
 1163 0632 83E80700 		stmia	r3, {r0, r1, r2}
 497:gcode.c       ****   if ( bit_istrue(command_words,bit(MODAL_GROUP_G12)) ) { // Check if called in block
 1164              		.loc 1 497 0
 1165 0636 06F40073 		and	r3, r6, #512
 1166 063a 9BB2     		uxth	r3, r3
 1167 063c 73B1     		cbz	r3, .L83
 498:gcode.c       ****     if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SY
 1168              		.loc 1 498 0
 1169 063e 964B     		ldr	r3, .L258+8
 1170 0640 D879     		ldrb	r0, [r3, #7]	@ zero_extendqisi2
 1171 0642 0628     		cmp	r0, #6
 1172 0644 00F23685 		bhi	.L210
 499:gcode.c       ****     if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 1173              		.loc 1 499 0
 1174 0648 954B     		ldr	r3, .L258+16
 1175 064a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1176 064c 9842     		cmp	r0, r3
 1177 064e 05D0     		beq	.L83
 500:gcode.c       ****       if (!(settings_read_coord_data(gc_block.modal.coord_select,block_coord_system))) { FAIL(STATU
 1178              		.loc 1 500 0
 1179 0650 13A9     		add	r1, sp, #76
 1180 0652 FFF7FEFF 		bl	settings_read_coord_data
 1181              	.LVL116:
 1182 0656 0028     		cmp	r0, #0
 1183 0658 00F02E85 		beq	.L211
 1184              	.L83:
 501:gcode.c       ****     }
 502:gcode.c       ****   }
 503:gcode.c       **** 
 504:gcode.c       ****   // [16. Set path control mode ]: N/A. Only G61. G61.1 and G64 NOT SUPPORTED.
 505:gcode.c       ****   // [17. Set distance mode ]: N/A. Only G91.1. G90.1 NOT SUPPORTED.
 506:gcode.c       ****   // [18. Set retract mode ]: NOT SUPPORTED.
 507:gcode.c       **** 
 508:gcode.c       ****   // [19. Remaining non-modal actions ]: Check go to predefined position, set G10, or set axis offs
 509:gcode.c       ****   // NOTE: We need to separate the non-modal commands that are axis word-using (G10/G28/G30/G92), a
 510:gcode.c       ****   // commands all treat axis words differently. G10 as absolute offsets or computes current positio
 511:gcode.c       ****   // the axis value, G92 similarly to G10 L20, and G28/30 as an intermediate target position that o
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 33


 512:gcode.c       ****   // all the current coordinate system and G92 offsets.
 513:gcode.c       ****   switch (gc_block.non_modal_command) {
 1185              		.loc 1 513 0
 1186 065c 8E4B     		ldr	r3, .L258+8
 1187 065e 1D78     		ldrb	r5, [r3]	@ zero_extendqisi2
 1188 0660 0A2D     		cmp	r5, #10
 1189 0662 02D0     		beq	.L85
 1190 0664 5C2D     		cmp	r5, #92
 1191 0666 72D0     		beq	.L86
 1192 0668 ADE0     		b	.L251
 1193              	.L85:
 514:gcode.c       ****     case NON_MODAL_SET_COORDINATE_DATA:
 515:gcode.c       ****       // [G10 Errors]: L missing and is not 2 or 20. P word missing. (Negative P value done.)
 516:gcode.c       ****       // [G10 L2 Errors]: R word NOT SUPPORTED. P value not 0 to nCoordSys(max 9). Axis words missi
 517:gcode.c       ****       // [G10 L20 Errors]: P must be 0 to nCoordSys(max 9). Axis words missing.
 518:gcode.c       ****       if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 1194              		.loc 1 518 0
 1195 066a 079B     		ldr	r3, [sp, #28]
 1196 066c 002B     		cmp	r3, #0
 1197 066e 00F02585 		beq	.L212
 519:gcode.c       ****       if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSIN
 1198              		.loc 1 519 0
 1199 0672 17F0500F 		tst	r7, #80
 1200 0676 00F02385 		beq	.L213
 520:gcode.c       ****       coord_select = trunc(gc_block.values.p); // Convert p value to int.
 1201              		.loc 1 520 0
 1202 067a 874B     		ldr	r3, .L258+8
 1203 067c 586A     		ldr	r0, [r3, #36]	@ float
 1204 067e FFF7FEFF 		bl	__aeabi_f2d
 1205              	.LVL117:
 1206 0682 FFF7FEFF 		bl	trunc
 1207              	.LVL118:
 1208 0686 FFF7FEFF 		bl	__aeabi_d2uiz
 1209              	.LVL119:
 1210 068a C0B2     		uxtb	r0, r0
 1211              	.LVL120:
 521:gcode.c       ****       if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Gre
 1212              		.loc 1 521 0
 1213 068c 0628     		cmp	r0, #6
 1214 068e 00F21985 		bhi	.L214
 522:gcode.c       ****       if (gc_block.values.l != 20) {
 1215              		.loc 1 522 0
 1216 0692 814B     		ldr	r3, .L258+8
 1217 0694 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1218 0696 142B     		cmp	r3, #20
 1219 0698 08D0     		beq	.L87
 523:gcode.c       ****         if (gc_block.values.l == 2) {
 1220              		.loc 1 523 0
 1221 069a 022B     		cmp	r3, #2
 1222 069c 40F01485 		bne	.L215
 524:gcode.c       ****           if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [
 1223              		.loc 1 524 0
 1224 06a0 07F08003 		and	r3, r7, #128
 1225 06a4 9BB2     		uxth	r3, r3
 1226 06a6 002B     		cmp	r3, #0
 1227 06a8 40F01085 		bne	.L216
 1228              	.L87:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 34


 525:gcode.c       ****         } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported L]
 526:gcode.c       ****       }
 527:gcode.c       ****       bit_false(value_words,(bit(WORD_L)|bit(WORD_P)));
 1229              		.loc 1 527 0
 1230 06ac 27F05007 		bic	r7, r7, #80
 1231              	.LVL121:
 1232 06b0 BFB2     		uxth	r7, r7
 1233              	.LVL122:
 528:gcode.c       **** 
 529:gcode.c       ****       // Determine coordinate system to change and try to load from EEPROM.
 530:gcode.c       ****       if (coord_select > 0) { coord_select--; } // Adjust P1-P6 index to EEPROM coordinate data ind
 1234              		.loc 1 530 0
 1235 06b2 18B1     		cbz	r0, .L88
 1236              		.loc 1 530 0 is_stmt 0 discriminator 1
 1237 06b4 0138     		subs	r0, r0, #1
 1238              	.LVL123:
 1239 06b6 C3B2     		uxtb	r3, r0
 1240 06b8 0B93     		str	r3, [sp, #44]
 1241              	.LVL124:
 1242 06ba 02E0     		b	.L89
 1243              	.LVL125:
 1244              	.L88:
 531:gcode.c       ****       else { coord_select = gc_block.modal.coord_select; } // Index P0 as the active coordinate sys
 1245              		.loc 1 531 0 is_stmt 1
 1246 06bc 764B     		ldr	r3, .L258+8
 1247 06be DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1248 06c0 0B93     		str	r3, [sp, #44]
 1249              	.LVL126:
 1250              	.L89:
 532:gcode.c       ****       
 533:gcode.c       ****       // NOTE: Store parameter data in IJK values. By rule, they are not in use with this command.
 534:gcode.c       ****       if (!settings_read_coord_data(coord_select,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_F
 1251              		.loc 1 534 0
 1252 06c2 0B98     		ldr	r0, [sp, #44]
 1253 06c4 7749     		ldr	r1, .L258+20
 1254 06c6 FFF7FEFF 		bl	settings_read_coord_data
 1255              	.LVL127:
 1256 06ca 0028     		cmp	r0, #0
 1257 06cc 00F00085 		beq	.L217
 1258 06d0 4FF00009 		mov	r9, #0
 1259              	.LVL128:
 1260 06d4 37E0     		b	.L90
 1261              	.LVL129:
 1262              	.L93:
 535:gcode.c       **** 
 536:gcode.c       ****       // Pre-calculate the coordinate data changes.
 537:gcode.c       ****       for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 538:gcode.c       ****         // Update axes defined only in block. Always in machine coordinates. Can change non-active 
 539:gcode.c       ****         if (bit_istrue(axis_words,bit(idx)) ) {
 1263              		.loc 1 539 0
 1264 06d6 4C46     		mov	r4, r9
 1265 06d8 079B     		ldr	r3, [sp, #28]
 1266 06da 43FA09F3 		asr	r3, r3, r9
 1267 06de 13F0010F 		tst	r3, #1
 1268 06e2 2CD0     		beq	.L91
 540:gcode.c       ****           if (gc_block.values.l == 20) {
 1269              		.loc 1 540 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 35


 1270 06e4 6C4B     		ldr	r3, .L258+8
 1271 06e6 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1272 06e8 142B     		cmp	r3, #20
 1273 06ea 21D1     		bne	.L92
 541:gcode.c       ****             // L20: Update coordinate system axis at current position (with modifiers) with program
 542:gcode.c       ****             // WPos = MPos - WCS - G92 - TLO  ->  WCS = MPos - G92 - TLO - WPos
 543:gcode.c       ****             gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.v
 1274              		.loc 1 543 0
 1275 06ec 6C4B     		ldr	r3, .L258+16
 1276 06ee 03EB8902 		add	r2, r3, r9, lsl #2
 1277 06f2 09F10C05 		add	r5, r9, #12
 1278 06f6 AD00     		lsls	r5, r5, #2
 1279 06f8 2B44     		add	r3, r3, r5
 1280 06fa D069     		ldr	r0, [r2, #28]	@ float
 1281 06fc 5968     		ldr	r1, [r3, #4]	@ float
 1282 06fe FFF7FEFF 		bl	__aeabi_fsub
 1283              	.LVL130:
 1284 0702 DFF89481 		ldr	r8, .L258+8
 1285 0706 4544     		add	r5, r5, r8
 1286 0708 6968     		ldr	r1, [r5, #4]	@ float
 1287 070a FFF7FEFF 		bl	__aeabi_fsub
 1288              	.LVL131:
 1289 070e 08EB8908 		add	r8, r8, r9, lsl #2
 1290 0712 C8F81000 		str	r0, [r8, #16]	@ float
 544:gcode.c       ****             if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_
 1291              		.loc 1 544 0
 1292 0716 B9F1020F 		cmp	r9, #2
 1293 071a 10D1     		bne	.L91
 1294              		.loc 1 544 0 is_stmt 0 discriminator 1
 1295 071c 0234     		adds	r4, r4, #2
 1296 071e 5E4B     		ldr	r3, .L258+8
 1297 0720 03EB8404 		add	r4, r3, r4, lsl #2
 1298 0724 5E4B     		ldr	r3, .L258+16
 1299 0726 196C     		ldr	r1, [r3, #64]	@ float
 1300 0728 FFF7FEFF 		bl	__aeabi_fsub
 1301              	.LVL132:
 1302 072c A060     		str	r0, [r4, #8]	@ float
 1303 072e 06E0     		b	.L91
 1304              	.L92:
 545:gcode.c       ****           } else {
 546:gcode.c       ****             // L2: Update coordinate system axis to programmed value.
 547:gcode.c       ****             gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 1305              		.loc 1 547 0 is_stmt 1
 1306 0730 594B     		ldr	r3, .L258+8
 1307 0732 03EB8902 		add	r2, r3, r9, lsl #2
 1308 0736 526B     		ldr	r2, [r2, #52]	@ float
 1309 0738 03EB8903 		add	r3, r3, r9, lsl #2
 1310 073c 1A61     		str	r2, [r3, #16]	@ float
 1311              	.L91:
 537:gcode.c       ****         // Update axes defined only in block. Always in machine coordinates. Can change non-active 
 1312              		.loc 1 537 0 discriminator 2
 1313 073e 09F10109 		add	r9, r9, #1
 1314              	.LVL133:
 1315 0742 5FFA89F9 		uxtb	r9, r9
 1316              	.LVL134:
 1317              	.L90:
 537:gcode.c       ****         // Update axes defined only in block. Always in machine coordinates. Can change non-active 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 36


 1318              		.loc 1 537 0 is_stmt 0 discriminator 1
 1319 0746 B9F1020F 		cmp	r9, #2
 1320 074a C4D9     		bls	.L93
 1321 074c D8E0     		b	.L94
 1322              	.LVL135:
 1323              	.L86:
 548:gcode.c       ****           }
 549:gcode.c       ****         } // Else, keep current stored value.
 550:gcode.c       ****       }
 551:gcode.c       ****       break;
 552:gcode.c       ****     case NON_MODAL_SET_COORDINATE_OFFSET:
 553:gcode.c       ****       // [G92 Errors]: No axis words.
 554:gcode.c       ****       if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 1324              		.loc 1 554 0 is_stmt 1
 1325 074e 079B     		ldr	r3, [sp, #28]
 1326 0750 002B     		cmp	r3, #0
 1327 0752 00F0BF84 		beq	.L218
 1328 0756 0024     		movs	r4, #0
 1329 0758 30E0     		b	.L95
 1330              	.LVL136:
 1331              	.L98:
 555:gcode.c       **** 
 556:gcode.c       ****       // Update axes defined only in block. Offsets current system to defined value. Does not updat
 557:gcode.c       ****       // active coordinate system is selected, but is still active unless G92.1 disables it.
 558:gcode.c       ****       for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 559:gcode.c       ****         if (bit_istrue(axis_words,bit(idx)) ) {
 1332              		.loc 1 559 0
 1333 075a 079B     		ldr	r3, [sp, #28]
 1334 075c 2341     		asrs	r3, r3, r4
 1335 075e 13F0010F 		tst	r3, #1
 1336 0762 20D0     		beq	.L96
 560:gcode.c       ****           // WPos = MPos - WCS - G92 - TLO  ->  G92 = MPos - WCS - TLO - WPos
 561:gcode.c       ****           gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values
 1337              		.loc 1 561 0
 1338 0764 4E4B     		ldr	r3, .L258+16
 1339 0766 03EB8403 		add	r3, r3, r4, lsl #2
 1340 076a D869     		ldr	r0, [r3, #28]	@ float
 1341 076c 18AB     		add	r3, sp, #96
 1342 076e 03EB8403 		add	r3, r3, r4, lsl #2
 1343 0772 53F8141C 		ldr	r1, [r3, #-20]	@ float
 1344 0776 FFF7FEFF 		bl	__aeabi_fsub
 1345              	.LVL137:
 1346 077a 04F10C05 		add	r5, r4, #12
 1347 077e 464B     		ldr	r3, .L258+8
 1348 0780 03EB8505 		add	r5, r3, r5, lsl #2
 1349 0784 6968     		ldr	r1, [r5, #4]	@ float
 1350 0786 FFF7FEFF 		bl	__aeabi_fsub
 1351              	.LVL138:
 1352 078a 6860     		str	r0, [r5, #4]	@ float
 562:gcode.c       ****           if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_of
 1353              		.loc 1 562 0
 1354 078c 022C     		cmp	r4, #2
 1355 078e 13D1     		bne	.L97
 1356              		.loc 1 562 0 is_stmt 0 discriminator 1
 1357 0790 04F10C05 		add	r5, r4, #12
 1358 0794 404B     		ldr	r3, .L258+8
 1359 0796 03EB8505 		add	r5, r3, r5, lsl #2
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 37


 1360 079a 414B     		ldr	r3, .L258+16
 1361 079c 196C     		ldr	r1, [r3, #64]	@ float
 1362 079e FFF7FEFF 		bl	__aeabi_fsub
 1363              	.LVL139:
 1364 07a2 6860     		str	r0, [r5, #4]	@ float
 1365 07a4 08E0     		b	.L97
 1366              	.L96:
 563:gcode.c       ****         } else {
 564:gcode.c       ****           gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 1367              		.loc 1 564 0 is_stmt 1
 1368 07a6 04F10C03 		add	r3, r4, #12
 1369 07aa 9B00     		lsls	r3, r3, #2
 1370 07ac 3C4A     		ldr	r2, .L258+16
 1371 07ae 1A44     		add	r2, r2, r3
 1372 07b0 5268     		ldr	r2, [r2, #4]	@ float
 1373 07b2 3949     		ldr	r1, .L258+8
 1374 07b4 0B44     		add	r3, r3, r1
 1375 07b6 5A60     		str	r2, [r3, #4]	@ float
 1376              	.L97:
 558:gcode.c       ****         if (bit_istrue(axis_words,bit(idx)) ) {
 1377              		.loc 1 558 0 discriminator 2
 1378 07b8 0134     		adds	r4, r4, #1
 1379              	.LVL140:
 1380 07ba E4B2     		uxtb	r4, r4
 1381              	.LVL141:
 1382              	.L95:
 558:gcode.c       ****         if (bit_istrue(axis_words,bit(idx)) ) {
 1383              		.loc 1 558 0 is_stmt 0 discriminator 1
 1384 07bc 022C     		cmp	r4, #2
 1385 07be CCD9     		bls	.L98
  80:gcode.c       **** 
 1386              		.loc 1 80 0 is_stmt 1
 1387 07c0 0023     		movs	r3, #0
 1388 07c2 0B93     		str	r3, [sp, #44]
 1389 07c4 9CE0     		b	.L94
 1390              	.LVL142:
 1391              	.L251:
 565:gcode.c       ****         }
 566:gcode.c       ****       }
 567:gcode.c       ****       break;
 568:gcode.c       **** 
 569:gcode.c       ****     default:
 570:gcode.c       **** 
 571:gcode.c       ****       // At this point, the rest of the explicit axis commands treat the axis values as the traditi
 572:gcode.c       ****       // target position with the coordinate system offsets, G92 offsets, absolute override, and di
 573:gcode.c       ****       // modes applied. This includes the motion mode commands. We can now pre-compute the target p
 574:gcode.c       ****       // NOTE: Tool offsets may be appended to these conversions when/if this feature is added.
 575:gcode.c       ****       if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // TLO block any axis command.
 1392              		.loc 1 575 0
 1393 07c6 089B     		ldr	r3, [sp, #32]
 1394 07c8 032B     		cmp	r3, #3
 1395 07ca 51D0     		beq	.L99
 576:gcode.c       ****         if (axis_words) {
 1396              		.loc 1 576 0
 1397 07cc 079B     		ldr	r3, [sp, #28]
 1398 07ce 002B     		cmp	r3, #0
 1399 07d0 49D1     		bne	.L219
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 38


 1400 07d2 4DE0     		b	.L99
 1401              	.LVL143:
 1402              	.L104:
 577:gcode.c       ****           for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to s
 578:gcode.c       ****             if ( bit_isfalse(axis_words,bit(idx)) ) {
 1403              		.loc 1 578 0
 1404 07d4 4C46     		mov	r4, r9
 1405 07d6 079B     		ldr	r3, [sp, #28]
 1406 07d8 43FA09F3 		asr	r3, r3, r9
 1407 07dc 13F0010F 		tst	r3, #1
 1408 07e0 08D1     		bne	.L101
 579:gcode.c       ****               gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep sam
 1409              		.loc 1 579 0
 1410 07e2 2F4B     		ldr	r3, .L258+16
 1411 07e4 03EB8903 		add	r3, r3, r9, lsl #2
 1412 07e8 DA69     		ldr	r2, [r3, #28]	@ float
 1413 07ea 2B4B     		ldr	r3, .L258+8
 1414 07ec 03EB8903 		add	r3, r3, r9, lsl #2
 1415 07f0 5A63     		str	r2, [r3, #52]	@ float
 1416 07f2 33E0     		b	.L102
 1417              	.L101:
 580:gcode.c       ****             } else {
 581:gcode.c       ****               // Update specified value according to distance mode or ignore if absolute override i
 582:gcode.c       ****               // NOTE: G53 is never active with G28/30 since they are in the same modal group.
 583:gcode.c       ****               if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 1418              		.loc 1 583 0
 1419 07f4 352D     		cmp	r5, #53
 1420 07f6 31D0     		beq	.L102
 584:gcode.c       ****                 // Apply coordinate offsets based on distance mode.
 585:gcode.c       ****                 if (gc_block.modal.distance == DISTANCE_MODE_ABSOLUTE) {
 1421              		.loc 1 585 0
 1422 07f8 274B     		ldr	r3, .L258+8
 1423 07fa 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1424 07fc 13BB     		cbnz	r3, .L103
 586:gcode.c       ****                   gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 1425              		.loc 1 586 0
 1426 07fe 09F10C08 		add	r8, r9, #12
 1427 0802 4FEA8808 		lsl	r8, r8, #2
 1428 0806 264B     		ldr	r3, .L258+16
 1429 0808 4344     		add	r3, r3, r8
 1430 080a 18AA     		add	r2, sp, #96
 1431 080c 02EB8902 		add	r2, r2, r9, lsl #2
 1432 0810 52F8140C 		ldr	r0, [r2, #-20]	@ float
 1433 0814 5968     		ldr	r1, [r3, #4]	@ float
 1434 0816 FFF7FEFF 		bl	__aeabi_fadd
 1435              	.LVL144:
 1436 081a 1F4B     		ldr	r3, .L258+8
 1437 081c 9844     		add	r8, r8, r3
 1438 081e D8F80410 		ldr	r1, [r8, #4]	@ float
 1439 0822 FFF7FEFF 		bl	__aeabi_fadd
 1440              	.LVL145:
 1441 0826 C8F80400 		str	r0, [r8, #4]	@ float
 587:gcode.c       ****                   if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_l
 1442              		.loc 1 587 0
 1443 082a B9F1020F 		cmp	r9, #2
 1444 082e 15D1     		bne	.L102
 1445              		.loc 1 587 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 39


 1446 0830 0C34     		adds	r4, r4, #12
 1447 0832 194B     		ldr	r3, .L258+8
 1448 0834 03EB8404 		add	r4, r3, r4, lsl #2
 1449 0838 194B     		ldr	r3, .L258+16
 1450 083a 196C     		ldr	r1, [r3, #64]	@ float
 1451 083c FFF7FEFF 		bl	__aeabi_fadd
 1452              	.LVL146:
 1453 0840 6060     		str	r0, [r4, #4]	@ float
 1454 0842 0BE0     		b	.L102
 1455              	.L103:
 588:gcode.c       ****                 } else {  // Incremental mode
 589:gcode.c       ****                   gc_block.values.xyz[idx] += gc_state.position[idx];
 1456              		.loc 1 589 0 is_stmt 1
 1457 0844 164A     		ldr	r2, .L258+16
 1458 0846 02EB8902 		add	r2, r2, r9, lsl #2
 1459 084a 0C34     		adds	r4, r4, #12
 1460 084c 124B     		ldr	r3, .L258+8
 1461 084e 03EB8404 		add	r4, r3, r4, lsl #2
 1462 0852 6068     		ldr	r0, [r4, #4]	@ float
 1463 0854 D169     		ldr	r1, [r2, #28]	@ float
 1464 0856 FFF7FEFF 		bl	__aeabi_fadd
 1465              	.LVL147:
 1466 085a 6060     		str	r0, [r4, #4]	@ float
 1467              	.L102:
 577:gcode.c       ****             if ( bit_isfalse(axis_words,bit(idx)) ) {
 1468              		.loc 1 577 0 discriminator 2
 1469 085c 09F10109 		add	r9, r9, #1
 1470              	.LVL148:
 1471 0860 5FFA89F9 		uxtb	r9, r9
 1472              	.LVL149:
 1473 0864 01E0     		b	.L100
 1474              	.LVL150:
 1475              	.L219:
 1476 0866 4FF00009 		mov	r9, #0
 1477              	.LVL151:
 1478              	.L100:
 577:gcode.c       ****             if ( bit_isfalse(axis_words,bit(idx)) ) {
 1479              		.loc 1 577 0 is_stmt 0 discriminator 1
 1480 086a B9F1020F 		cmp	r9, #2
 1481 086e B1D9     		bls	.L104
 1482              	.LVL152:
 1483              	.L99:
 590:gcode.c       ****                 }
 591:gcode.c       ****               }
 592:gcode.c       ****             }
 593:gcode.c       ****           }
 594:gcode.c       ****         }
 595:gcode.c       ****       }
 596:gcode.c       **** 
 597:gcode.c       ****       // Check remaining non-modal commands for errors.
 598:gcode.c       ****       switch (gc_block.non_modal_command) {
 1484              		.loc 1 598 0 is_stmt 1
 1485 0870 1E2D     		cmp	r5, #30
 1486 0872 03D0     		beq	.L105
 1487 0874 352D     		cmp	r5, #53
 1488 0876 39D0     		beq	.L106
 1489 0878 1C2D     		cmp	r5, #28
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 40


 1490 087a 3FD1     		bne	.L252
 1491              	.L105:
 599:gcode.c       ****         case NON_MODAL_GO_HOME_0: // G28
 600:gcode.c       ****         case NON_MODAL_GO_HOME_1: // G30
 601:gcode.c       ****           // [G28/30 Errors]: Cutter compensation is enabled.
 602:gcode.c       ****           // Retreive G28/30 go-home position data (in machine coordinates) from EEPROM
 603:gcode.c       ****           // NOTE: Store parameter data in IJK values. By rule, they are not in use with this comma
 604:gcode.c       ****           if (gc_block.non_modal_command == NON_MODAL_GO_HOME_0) {
 1492              		.loc 1 604 0
 1493 087c 1C2D     		cmp	r5, #28
 1494 087e 13D1     		bne	.L107
 605:gcode.c       ****             if (!settings_read_coord_data(SETTING_INDEX_G28,gc_block.values.ijk)) { FAIL(STATUS_SET
 1495              		.loc 1 605 0
 1496 0880 0620     		movs	r0, #6
 1497 0882 0849     		ldr	r1, .L258+20
 1498 0884 FFF7FEFF 		bl	settings_read_coord_data
 1499              	.LVL153:
 1500 0888 0028     		cmp	r0, #0
 1501 088a 00F02584 		beq	.L221
 1502 088e 12E0     		b	.L108
 1503              	.L259:
 1504              		.align	3
 1505              	.L258:
 1506 0890 66666666 		.word	1717986918
 1507 0894 66663940 		.word	1077503590
 1508 0898 00000000 		.word	gc_block
 1509 089c 28000000 		.word	gc_state+40
 1510 08a0 00000000 		.word	gc_state
 1511 08a4 10000000 		.word	gc_block+16
 1512              	.L107:
 606:gcode.c       ****           } else { // == NON_MODAL_GO_HOME_1
 607:gcode.c       ****             if (!settings_read_coord_data(SETTING_INDEX_G30,gc_block.values.ijk)) { FAIL(STATUS_SET
 1513              		.loc 1 607 0
 1514 08a8 0720     		movs	r0, #7
 1515 08aa AB49     		ldr	r1, .L260+8
 1516 08ac FFF7FEFF 		bl	settings_read_coord_data
 1517              	.LVL154:
 1518 08b0 0028     		cmp	r0, #0
 1519 08b2 00F01384 		beq	.L222
 1520              	.L108:
 608:gcode.c       ****           }
 609:gcode.c       ****           if (axis_words) {
 1521              		.loc 1 609 0
 1522 08b6 079B     		ldr	r3, [sp, #28]
 1523 08b8 93B9     		cbnz	r3, .L223
  80:gcode.c       **** 
 1524              		.loc 1 80 0
 1525 08ba 0B93     		str	r3, [sp, #44]
 610:gcode.c       ****             // Move only the axes specified in secondary move.
 611:gcode.c       ****             for (idx=0; idx<N_AXIS; idx++) {
 612:gcode.c       ****               if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 613:gcode.c       ****             }
 614:gcode.c       ****           } else {
 615:gcode.c       ****             axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 1526              		.loc 1 615 0
 1527 08bc 0893     		str	r3, [sp, #32]
 1528              	.LVL155:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 41


 1529 08be 1FE0     		b	.L94
 1530              	.LVL156:
 1531              	.L111:
 612:gcode.c       ****             }
 1532              		.loc 1 612 0
 1533 08c0 079A     		ldr	r2, [sp, #28]
 1534 08c2 1A41     		asrs	r2, r2, r3
 1535 08c4 12F0010F 		tst	r2, #1
 1536 08c8 07D1     		bne	.L110
 612:gcode.c       ****             }
 1537              		.loc 1 612 0 is_stmt 0 discriminator 1
 1538 08ca A44A     		ldr	r2, .L260+12
 1539 08cc 02EB8302 		add	r2, r2, r3, lsl #2
 1540 08d0 D169     		ldr	r1, [r2, #28]	@ float
 1541 08d2 A34A     		ldr	r2, .L260+16
 1542 08d4 02EB8302 		add	r2, r2, r3, lsl #2
 1543 08d8 1161     		str	r1, [r2, #16]	@ float
 1544              	.L110:
 611:gcode.c       ****               if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 1545              		.loc 1 611 0 is_stmt 1 discriminator 2
 1546 08da 0133     		adds	r3, r3, #1
 1547              	.LVL157:
 1548 08dc DBB2     		uxtb	r3, r3
 1549              	.LVL158:
 1550 08de 00E0     		b	.L109
 1551              	.LVL159:
 1552              	.L223:
 1553 08e0 0023     		movs	r3, #0
 1554              	.L109:
 1555              	.LVL160:
 611:gcode.c       ****               if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 1556              		.loc 1 611 0 is_stmt 0 discriminator 1
 1557 08e2 022B     		cmp	r3, #2
 1558 08e4 ECD9     		bls	.L111
  80:gcode.c       **** 
 1559              		.loc 1 80 0 is_stmt 1
 1560 08e6 0023     		movs	r3, #0
 1561              	.LVL161:
 1562 08e8 0B93     		str	r3, [sp, #44]
 1563 08ea 09E0     		b	.L94
 1564              	.L106:
 616:gcode.c       ****           }
 617:gcode.c       ****           break;
 618:gcode.c       ****         case NON_MODAL_SET_HOME_0: // G28.1
 619:gcode.c       ****         case NON_MODAL_SET_HOME_1: // G30.1
 620:gcode.c       ****           // [G28.1/30.1 Errors]: Cutter compensation is enabled.
 621:gcode.c       ****           // NOTE: If axis words are passed here, they are interpreted as an implicit motion mode.
 622:gcode.c       ****           break;
 623:gcode.c       ****         case NON_MODAL_RESET_COORDINATE_OFFSET:
 624:gcode.c       ****           // NOTE: If axis words are passed here, they are interpreted as an implicit motion mode.
 625:gcode.c       ****           break;
 626:gcode.c       ****         case NON_MODAL_ABSOLUTE_OVERRIDE:
 627:gcode.c       ****           // [G53 Errors]: G0 and G1 are not active. Cutter compensation is enabled.
 628:gcode.c       ****           // NOTE: All explicit axis word commands are in this modal group. So no implicit check ne
 629:gcode.c       ****           if (!(gc_block.modal.motion == MOTION_MODE_SEEK || gc_block.modal.motion == MOTION_MODE_L
 1565              		.loc 1 629 0
 1566 08ec 9C4B     		ldr	r3, .L260+16
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 42


 1567 08ee 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1568 08f0 012B     		cmp	r3, #1
 1569 08f2 00F2F583 		bhi	.L224
  80:gcode.c       **** 
 1570              		.loc 1 80 0
 1571 08f6 0023     		movs	r3, #0
 1572 08f8 0B93     		str	r3, [sp, #44]
 1573 08fa 01E0     		b	.L94
 1574              	.L252:
 1575 08fc 0023     		movs	r3, #0
 1576 08fe 0B93     		str	r3, [sp, #44]
 1577              	.LVL162:
 1578              	.L94:
 630:gcode.c       ****             FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 631:gcode.c       ****           }
 632:gcode.c       ****           break;
 633:gcode.c       ****       }
 634:gcode.c       ****   }
 635:gcode.c       **** 
 636:gcode.c       ****   // [20. Motion modes ]:
 637:gcode.c       ****   if (gc_block.modal.motion == MOTION_MODE_NONE) {
 1579              		.loc 1 637 0
 1580 0900 974B     		ldr	r3, .L260+16
 1581 0902 5C78     		ldrb	r4, [r3, #1]	@ zero_extendqisi2
 1582 0904 502C     		cmp	r4, #80
 1583 0906 04D1     		bne	.L112
 638:gcode.c       ****     // [G80 Errors]: Axis word are programmed while G80 is active.
 639:gcode.c       ****     // NOTE: Even non-modal commands or TLO that use axis words will throw this strict error.
 640:gcode.c       ****     if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 1584              		.loc 1 640 0
 1585 0908 079B     		ldr	r3, [sp, #28]
 1586 090a 002B     		cmp	r3, #0
 1587 090c 40F0EA83 		bne	.L225
 1588 0910 97E1     		b	.L113
 1589              	.L112:
 641:gcode.c       **** 
 642:gcode.c       ****   // Check remaining motion modes, if axis word are implicit (exist and not used by G10/28/30/92), 
 643:gcode.c       ****   // was explicitly commanded in the g-code block.
 644:gcode.c       ****   } else if ( axis_command == AXIS_COMMAND_MOTION_MODE ) {
 1590              		.loc 1 644 0
 1591 0912 089B     		ldr	r3, [sp, #32]
 1592 0914 022B     		cmp	r3, #2
 1593 0916 40F09481 		bne	.L113
 645:gcode.c       **** 
 646:gcode.c       ****     if (gc_block.modal.motion == MOTION_MODE_SEEK) {
 1594              		.loc 1 646 0
 1595 091a 24B9     		cbnz	r4, .L114
 647:gcode.c       ****       // [G0 Errors]: Axis letter not configured or without real value (done.)
 648:gcode.c       ****       // Axis words are optional. If missing, set axis command flag to ignore execution.
 649:gcode.c       ****       if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 1596              		.loc 1 649 0
 1597 091c 079B     		ldr	r3, [sp, #28]
 1598 091e 002B     		cmp	r3, #0
 1599 0920 00F08A81 		beq	.L226
 1600 0924 8DE1     		b	.L113
 1601              	.L114:
 650:gcode.c       **** 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 43


 651:gcode.c       ****     // All remaining motion modes (all but G0 and G80), require a valid feed rate value. In units p
 652:gcode.c       ****     // the value must be positive. In inverse time mode, a positive value must be passed with each 
 653:gcode.c       ****     } else {
 654:gcode.c       ****       // Check if feed rate is defined for the motion modes that require it.
 655:gcode.c       ****       if (gc_block.values.f == 0.0) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undef
 1602              		.loc 1 655 0
 1603 0926 8E4B     		ldr	r3, .L260+16
 1604 0928 D868     		ldr	r0, [r3, #12]	@ float
 1605 092a 0021     		movs	r1, #0
 1606 092c FFF7FEFF 		bl	__aeabi_fcmpeq
 1607              	.LVL163:
 1608 0930 0028     		cmp	r0, #0
 1609 0932 40F0D983 		bne	.L227
 656:gcode.c       **** 
 657:gcode.c       ****       switch (gc_block.modal.motion) {
 1610              		.loc 1 657 0
 1611 0936 8C2C     		cmp	r4, #140
 1612 0938 00F06A81 		beq	.L115
 1613 093c 07D8     		bhi	.L116
 1614 093e 022C     		cmp	r4, #2
 1615 0940 13D0     		beq	.L117
 1616 0942 032C     		cmp	r4, #3
 1617 0944 13D0     		beq	.L118
 1618 0946 012C     		cmp	r4, #1
 1619 0948 40F07B81 		bne	.L113
 1620 094c 08E0     		b	.L119
 1621              	.L116:
 1622 094e 8E2C     		cmp	r4, #142
 1623 0950 00F05E81 		beq	.L115
 1624 0954 C0F05A81 		bcc	.L120
 1625 0958 8F2C     		cmp	r4, #143
 1626 095a 00F05781 		beq	.L120
 1627 095e 70E1     		b	.L113
 1628              	.L119:
 1629              	.LBB2:
 658:gcode.c       ****         case MOTION_MODE_LINEAR:
 659:gcode.c       ****           // [G1 Errors]: Feed rate undefined. Axis letter not configured or without real value.
 660:gcode.c       ****           // Axis words are optional. If missing, set axis command flag to ignore execution.
 661:gcode.c       ****           if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 1630              		.loc 1 661 0
 1631 0960 079B     		ldr	r3, [sp, #28]
 1632 0962 002B     		cmp	r3, #0
 1633 0964 00F06B81 		beq	.L228
 1634 0968 6BE1     		b	.L113
 1635              	.L117:
 662:gcode.c       ****           break;
 663:gcode.c       ****         case MOTION_MODE_CW_ARC: 
 664:gcode.c       ****           gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 1636              		.loc 1 664 0
 1637 096a 4AF0040A 		orr	r10, r10, #4
 1638              	.LVL164:
 1639              	.L118:
 665:gcode.c       ****         case MOTION_MODE_CCW_ARC:
 666:gcode.c       ****           // [G2/3 Errors All-Modes]: Feed rate undefined.
 667:gcode.c       ****           // [G2/3 Radius-Mode Errors]: No axis words in selected plane. Target point is same as cu
 668:gcode.c       ****           // [G2/3 Offset-Mode Errors]: No axis words and/or offsets in selected plane. The radius 
 669:gcode.c       ****           //   point and the radius to the target point differs more than 0.002mm (EMC def. 0.5mm O
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 44


 670:gcode.c       ****           // [G2/3 Full-Circle-Mode Errors]: NOT SUPPORTED. Axis words exist. No offsets programmed
 671:gcode.c       ****           // NOTE: Both radius and offsets are required for arc tracing and are pre-computed with t
 672:gcode.c       **** 
 673:gcode.c       ****           if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 1640              		.loc 1 673 0
 1641 096e 079B     		ldr	r3, [sp, #28]
 1642 0970 002B     		cmp	r3, #0
 1643 0972 00F0BB83 		beq	.L229
 674:gcode.c       ****           if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE
 1644              		.loc 1 674 0
 1645 0976 D946     		mov	r9, fp
 1646 0978 0123     		movs	r3, #1
 1647 097a 03FA0BF8 		lsl	r8, r3, fp
 1648 097e 0A9A     		ldr	r2, [sp, #40]
 1649 0980 0F92     		str	r2, [sp, #60]
 1650 0982 9340     		lsls	r3, r3, r2
 1651 0984 48EA0308 		orr	r8, r8, r3
 1652 0988 079B     		ldr	r3, [sp, #28]
 1653 098a 13EA080F 		tst	r3, r8
 1654 098e 00F0AF83 		beq	.L230
 675:gcode.c       **** 
 676:gcode.c       ****           // Calculate the change in position along each selected axis
 677:gcode.c       ****           float x,y;
 678:gcode.c       ****           x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current pos
 1655              		.loc 1 678 0
 1656 0992 734D     		ldr	r5, .L260+16
 1657 0994 05EB8B02 		add	r2, r5, fp, lsl #2
 1658 0998 704C     		ldr	r4, .L260+12
 1659 099a 04EB8B03 		add	r3, r4, fp, lsl #2
 1660 099e 506B     		ldr	r0, [r2, #52]	@ float
 1661 09a0 D969     		ldr	r1, [r3, #28]	@ float
 1662 09a2 FFF7FEFF 		bl	__aeabi_fsub
 1663              	.LVL165:
 1664 09a6 0D90     		str	r0, [sp, #52]	@ float
 1665              	.LVL166:
 679:gcode.c       ****           y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current pos
 1666              		.loc 1 679 0
 1667 09a8 0A9A     		ldr	r2, [sp, #40]
 1668 09aa 05EB8205 		add	r5, r5, r2, lsl #2
 1669 09ae 04EB8204 		add	r4, r4, r2, lsl #2
 1670 09b2 686B     		ldr	r0, [r5, #52]	@ float
 1671              	.LVL167:
 1672 09b4 E169     		ldr	r1, [r4, #28]	@ float
 1673 09b6 FFF7FEFF 		bl	__aeabi_fsub
 1674              	.LVL168:
 1675 09ba 0E90     		str	r0, [sp, #56]	@ float
 1676              	.LVL169:
 680:gcode.c       **** 
 681:gcode.c       ****           if (value_words & bit(WORD_R)) { // Arc Radius Mode
 1677              		.loc 1 681 0
 1678 09bc 07F08003 		and	r3, r7, #128
 1679 09c0 9BB2     		uxth	r3, r3
 1680 09c2 002B     		cmp	r3, #0
 1681 09c4 00F09D80 		beq	.L121
 1682              	.LBB3:
 682:gcode.c       ****             bit_false(value_words,bit(WORD_R));
 1683              		.loc 1 682 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 45


 1684 09c8 27F08007 		bic	r7, r7, #128
 1685              	.LVL170:
 1686 09cc BFB2     		uxth	r7, r7
 1687              	.LVL171:
 683:gcode.c       ****             if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCOD
 1688              		.loc 1 683 0
 1689 09ce 6548     		ldr	r0, .L260+20
 1690              	.LVL172:
 1691 09d0 6549     		ldr	r1, .L260+24
 1692 09d2 0C22     		movs	r2, #12
 1693 09d4 FFF7FEFF 		bl	memcmp
 1694              	.LVL173:
 1695 09d8 0028     		cmp	r0, #0
 1696 09da 00F08B83 		beq	.L231
 684:gcode.c       **** 
 685:gcode.c       ****             // Convert radius value to proper units.
 686:gcode.c       ****             if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.r *= MM_PER_INCH; }
 1697              		.loc 1 686 0
 1698 09de 604B     		ldr	r3, .L260+16
 1699 09e0 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1700 09e2 012B     		cmp	r3, #1
 1701 09e4 0BD1     		bne	.L122
 1702              		.loc 1 686 0 is_stmt 0 discriminator 1
 1703 09e6 5E4C     		ldr	r4, .L260+16
 1704 09e8 A06A     		ldr	r0, [r4, #40]	@ float
 1705 09ea FFF7FEFF 		bl	__aeabi_f2d
 1706              	.LVL174:
 1707 09ee 58A3     		adr	r3, .L260
 1708 09f0 D3E90023 		ldrd	r2, [r3]
 1709 09f4 FFF7FEFF 		bl	__aeabi_dmul
 1710              	.LVL175:
 1711 09f8 FFF7FEFF 		bl	__aeabi_d2f
 1712              	.LVL176:
 1713 09fc A062     		str	r0, [r4, #40]	@ float
 1714              	.L122:
 687:gcode.c       ****             /*  We need to calculate the center of the circle that has the designated radius and pa
 688:gcode.c       ****                 through both the current position and the target position. This method calculates t
 689:gcode.c       ****                 set of equations where [x,y] is the vector from current to target position, d == ma
 690:gcode.c       ****                 that vector, h == hypotenuse of the triangle formed by the radius of the circle, th
 691:gcode.c       ****                 the center of the travel vector. A vector perpendicular to the travel vector [-y,x]
 692:gcode.c       ****                 length of h [-y/d*h, x/d*h] and added to the center of the travel vector [x/2,y/2] 
 693:gcode.c       ****                 [i,j] at [x/2-y/d*h, y/2+x/d*h] which will be the center of our arc.
 694:gcode.c       **** 
 695:gcode.c       ****                 d^2 == x^2 + y^2
 696:gcode.c       ****                 h^2 == r^2 - (d/2)^2
 697:gcode.c       ****                 i == x/2 - y/d*h
 698:gcode.c       ****                 j == y/2 + x/d*h
 699:gcode.c       **** 
 700:gcode.c       ****                                                                      O <- [i,j]
 701:gcode.c       ****                                                                   -  |
 702:gcode.c       ****                                                         r      -     |
 703:gcode.c       ****                                                             -        |
 704:gcode.c       ****                                                          -           | h
 705:gcode.c       ****                                                       -              |
 706:gcode.c       ****                                         [0,0] ->  C -----------------+--------------- T  <- [x,y]
 707:gcode.c       ****                                                   | <------ d/2 ---->|
 708:gcode.c       **** 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 46


 709:gcode.c       ****                 C - Current position
 710:gcode.c       ****                 T - Target position
 711:gcode.c       ****                 O - center of circle that pass through both C and T
 712:gcode.c       ****                 d - distance from C to T
 713:gcode.c       ****                 r - designated radius
 714:gcode.c       ****                 h - distance from center of CT to O
 715:gcode.c       **** 
 716:gcode.c       ****                 Expanding the equations:
 717:gcode.c       **** 
 718:gcode.c       ****                 d -> sqrt(x^2 + y^2)
 719:gcode.c       ****                 h -> sqrt(4 * r^2 - x^2 - y^2)/2
 720:gcode.c       ****                 i -> (x - (y * sqrt(4 * r^2 - x^2 - y^2)) / sqrt(x^2 + y^2)) / 2
 721:gcode.c       ****                 j -> (y + (x * sqrt(4 * r^2 - x^2 - y^2)) / sqrt(x^2 + y^2)) / 2
 722:gcode.c       **** 
 723:gcode.c       ****                 Which can be written:
 724:gcode.c       **** 
 725:gcode.c       ****                 i -> (x - (y * sqrt(4 * r^2 - x^2 - y^2))/sqrt(x^2 + y^2))/2
 726:gcode.c       ****                 j -> (y + (x * sqrt(4 * r^2 - x^2 - y^2))/sqrt(x^2 + y^2))/2
 727:gcode.c       **** 
 728:gcode.c       ****                 Which we for size and speed reasons optimize to:
 729:gcode.c       **** 
 730:gcode.c       ****                 h_x2_div_d = sqrt(4 * r^2 - x^2 - y^2)/sqrt(x^2 + y^2)
 731:gcode.c       ****                 i = (x - (y * h_x2_div_d))/2
 732:gcode.c       ****                 j = (y + (x * h_x2_div_d))/2
 733:gcode.c       ****             */
 734:gcode.c       **** 
 735:gcode.c       ****             // First, use h_x2_div_d to compute 4*h^2 to check if it is negative or r is smaller
 736:gcode.c       ****             // than d. If so, the sqrt of a negative number is complex and error out.
 737:gcode.c       ****             float h_x2_div_d = 4.0 * gc_block.values.r*gc_block.values.r - x*x - y*y;
 1715              		.loc 1 737 0 is_stmt 1
 1716 09fe 584B     		ldr	r3, .L260+16
 1717 0a00 986A     		ldr	r0, [r3, #40]	@ float
 1718 0a02 FFF7FEFF 		bl	__aeabi_f2d
 1719              	.LVL177:
 1720 0a06 0446     		mov	r4, r0
 1721 0a08 0D46     		mov	r5, r1
 1722 0a0a 0022     		movs	r2, #0
 1723 0a0c 574B     		ldr	r3, .L260+28
 1724 0a0e FFF7FEFF 		bl	__aeabi_dmul
 1725              	.LVL178:
 1726 0a12 0246     		mov	r2, r0
 1727 0a14 0B46     		mov	r3, r1
 1728 0a16 2046     		mov	r0, r4
 1729 0a18 2946     		mov	r1, r5
 1730 0a1a FFF7FEFF 		bl	__aeabi_dmul
 1731              	.LVL179:
 1732 0a1e 0446     		mov	r4, r0
 1733 0a20 0D46     		mov	r5, r1
 1734 0a22 0D99     		ldr	r1, [sp, #52]	@ float
 1735 0a24 0846     		mov	r0, r1
 1736 0a26 FFF7FEFF 		bl	__aeabi_fmul
 1737              	.LVL180:
 1738 0a2a FFF7FEFF 		bl	__aeabi_f2d
 1739              	.LVL181:
 1740 0a2e 0246     		mov	r2, r0
 1741 0a30 0B46     		mov	r3, r1
 1742 0a32 2046     		mov	r0, r4
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 47


 1743 0a34 2946     		mov	r1, r5
 1744 0a36 FFF7FEFF 		bl	__aeabi_dsub
 1745              	.LVL182:
 1746 0a3a 0446     		mov	r4, r0
 1747 0a3c 0D46     		mov	r5, r1
 1748 0a3e 0E99     		ldr	r1, [sp, #56]	@ float
 1749 0a40 0846     		mov	r0, r1
 1750 0a42 FFF7FEFF 		bl	__aeabi_fmul
 1751              	.LVL183:
 1752 0a46 FFF7FEFF 		bl	__aeabi_f2d
 1753              	.LVL184:
 1754 0a4a 0246     		mov	r2, r0
 1755 0a4c 0B46     		mov	r3, r1
 1756 0a4e 2046     		mov	r0, r4
 1757 0a50 2946     		mov	r1, r5
 1758 0a52 FFF7FEFF 		bl	__aeabi_dsub
 1759              	.LVL185:
 1760 0a56 FFF7FEFF 		bl	__aeabi_d2f
 1761              	.LVL186:
 1762 0a5a 0446     		mov	r4, r0
 1763              	.LVL187:
 738:gcode.c       **** 
 739:gcode.c       ****             if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 1764              		.loc 1 739 0
 1765 0a5c 0021     		movs	r1, #0
 1766 0a5e FFF7FEFF 		bl	__aeabi_fcmplt
 1767              	.LVL188:
 1768 0a62 0028     		cmp	r0, #0
 1769 0a64 40F04883 		bne	.L232
 740:gcode.c       **** 
 741:gcode.c       ****             // Finish computing h_x2_div_d.
 742:gcode.c       ****             h_x2_div_d = -sqrt(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 1770              		.loc 1 742 0
 1771 0a68 2046     		mov	r0, r4
 1772 0a6a FFF7FEFF 		bl	__aeabi_f2d
 1773              	.LVL189:
 1774 0a6e FFF7FEFF 		bl	sqrt
 1775              	.LVL190:
 1776 0a72 0546     		mov	r5, r0
 1777 0a74 01F10044 		add	r4, r1, #-2147483648
 1778              	.LVL191:
 1779 0a78 0D98     		ldr	r0, [sp, #52]	@ float
 1780 0a7a 0E99     		ldr	r1, [sp, #56]	@ float
 1781 0a7c FFF7FEFF 		bl	hypot_f
 1782              	.LVL192:
 1783 0a80 FFF7FEFF 		bl	__aeabi_f2d
 1784              	.LVL193:
 1785 0a84 0246     		mov	r2, r0
 1786 0a86 0B46     		mov	r3, r1
 1787 0a88 2846     		mov	r0, r5
 1788 0a8a 2146     		mov	r1, r4
 1789 0a8c FFF7FEFF 		bl	__aeabi_ddiv
 1790              	.LVL194:
 1791 0a90 FFF7FEFF 		bl	__aeabi_d2f
 1792              	.LVL195:
 1793 0a94 8046     		mov	r8, r0
 1794              	.LVL196:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 48


 743:gcode.c       ****             // Invert the sign of h_x2_div_d if the circle is counter clockwise (see sketch below)
 744:gcode.c       ****             if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 1795              		.loc 1 744 0
 1796 0a96 324B     		ldr	r3, .L260+16
 1797 0a98 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1798 0a9a 032B     		cmp	r3, #3
 1799 0a9c 01D1     		bne	.L123
 1800              		.loc 1 744 0 is_stmt 0 discriminator 1
 1801 0a9e 00F10048 		add	r8, r0, #-2147483648
 1802              	.LVL197:
 1803              	.L123:
 745:gcode.c       **** 
 746:gcode.c       ****             /* The counter clockwise circle lies to the left of the target direction. When offset i
 747:gcode.c       ****                the left hand circle will be generated - when it is negative the right hand circle i
 748:gcode.c       **** 
 749:gcode.c       ****                                                                    T  <-- Target position
 750:gcode.c       **** 
 751:gcode.c       ****                                                                    ^
 752:gcode.c       ****                         Clockwise circles with this center         |          Clockwise circles wit
 753:gcode.c       ****                         will have > 180 deg of angular travel      |          < 180 deg of angular 
 754:gcode.c       ****                                                          \         |          /
 755:gcode.c       ****             center of arc when h_x2_div_d is positive ->  x <----- | -----> x <- center of arc when
 756:gcode.c       ****                                                                    |
 757:gcode.c       ****                                                                    |
 758:gcode.c       **** 
 759:gcode.c       ****                                                                    C  <-- Current position
 760:gcode.c       ****             */
 761:gcode.c       ****             // Negative R is g-code-alese for "I want a circle with more than 180 degrees of travel
 762:gcode.c       ****             // even though it is advised against ever generating such circles in a single line of g
 763:gcode.c       ****             // inverting the sign of h_x2_div_d the center of the circles is placed on the opposite
 764:gcode.c       ****             // travel and thus we get the unadvisably long arcs as prescribed.
 765:gcode.c       ****             if (gc_block.values.r < 0) {
 1804              		.loc 1 765 0 is_stmt 1
 1805 0aa2 2F4B     		ldr	r3, .L260+16
 1806 0aa4 9C6A     		ldr	r4, [r3, #40]	@ float
 1807 0aa6 2046     		mov	r0, r4
 1808 0aa8 0021     		movs	r1, #0
 1809 0aaa FFF7FEFF 		bl	__aeabi_fcmplt
 1810              	.LVL198:
 1811 0aae 28B1     		cbz	r0, .L124
 766:gcode.c       ****                 h_x2_div_d = -h_x2_div_d;
 1812              		.loc 1 766 0
 1813 0ab0 08F10048 		add	r8, r8, #-2147483648
 1814              	.LVL199:
 767:gcode.c       ****                 gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_
 1815              		.loc 1 767 0
 1816 0ab4 04F10044 		add	r4, r4, #-2147483648
 1817 0ab8 294B     		ldr	r3, .L260+16
 1818 0aba 9C62     		str	r4, [r3, #40]	@ float
 1819              	.LVL200:
 1820              	.L124:
 768:gcode.c       ****             }
 769:gcode.c       ****             // Complete the operation by calculating the actual center of the arc
 770:gcode.c       ****             gc_block.values.ijk[axis_0] = 0.5*(x-(y*h_x2_div_d));
 1821              		.loc 1 770 0
 1822 0abc 0E98     		ldr	r0, [sp, #56]	@ float
 1823 0abe 4146     		mov	r1, r8
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 49


 1824 0ac0 FFF7FEFF 		bl	__aeabi_fmul
 1825              	.LVL201:
 1826 0ac4 0146     		mov	r1, r0
 1827 0ac6 0D98     		ldr	r0, [sp, #52]	@ float
 1828 0ac8 FFF7FEFF 		bl	__aeabi_fsub
 1829              	.LVL202:
 1830 0acc 244D     		ldr	r5, .L260+16
 1831 0ace 09F10204 		add	r4, r9, #2
 1832 0ad2 05EB8404 		add	r4, r5, r4, lsl #2
 1833 0ad6 4FF07C51 		mov	r1, #1056964608
 1834 0ada FFF7FEFF 		bl	__aeabi_fmul
 1835              	.LVL203:
 1836 0ade A060     		str	r0, [r4, #8]	@ float
 771:gcode.c       ****             gc_block.values.ijk[axis_1] = 0.5*(y+(x*h_x2_div_d));
 1837              		.loc 1 771 0
 1838 0ae0 0D98     		ldr	r0, [sp, #52]	@ float
 1839 0ae2 4146     		mov	r1, r8
 1840 0ae4 FFF7FEFF 		bl	__aeabi_fmul
 1841              	.LVL204:
 1842 0ae8 0E99     		ldr	r1, [sp, #56]	@ float
 1843 0aea FFF7FEFF 		bl	__aeabi_fadd
 1844              	.LVL205:
 1845 0aee 0F9B     		ldr	r3, [sp, #60]
 1846 0af0 0233     		adds	r3, r3, #2
 1847 0af2 05EB8305 		add	r5, r5, r3, lsl #2
 1848 0af6 4FF07C51 		mov	r1, #1056964608
 1849 0afa FFF7FEFF 		bl	__aeabi_fmul
 1850              	.LVL206:
 1851 0afe A860     		str	r0, [r5, #8]	@ float
 1852              	.LBE3:
 1853 0b00 9FE0     		b	.L113
 1854              	.LVL207:
 1855              	.L121:
 1856              	.LBB4:
 772:gcode.c       **** 
 773:gcode.c       ****           } else { // Arc Center Format Offset Mode
 774:gcode.c       ****             if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE);
 1857              		.loc 1 774 0
 1858 0b02 099B     		ldr	r3, [sp, #36]
 1859 0b04 18EA030F 		tst	r8, r3
 1860 0b08 00F0F882 		beq	.L233
 775:gcode.c       ****             bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 1861              		.loc 1 775 0
 1862 0b0c 27F00E07 		bic	r7, r7, #14
 1863              	.LVL208:
 1864 0b10 BFB2     		uxth	r7, r7
 1865              	.LVL209:
 776:gcode.c       **** 
 777:gcode.c       ****             // Convert IJK values to proper units.
 778:gcode.c       ****             if (gc_block.modal.units == UNITS_MODE_INCHES) {
 1866              		.loc 1 778 0
 1867 0b12 134B     		ldr	r3, .L260+16
 1868 0b14 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1869 0b16 012B     		cmp	r3, #1
 1870 0b18 2DD1     		bne	.L127
 1871 0b1a 29E0     		b	.L234
 1872              	.LVL210:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 50


 1873              	.L129:
 779:gcode.c       ****               for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used 
 780:gcode.c       ****                 if (ijk_words & bit(idx)) { gc_block.values.ijk[idx] *= MM_PER_INCH; }
 1874              		.loc 1 780 0
 1875 0b1c 099B     		ldr	r3, [sp, #36]
 1876 0b1e 2B41     		asrs	r3, r3, r5
 1877 0b20 13F0010F 		tst	r3, #1
 1878 0b24 0ED0     		beq	.L128
 1879              		.loc 1 780 0 is_stmt 0 discriminator 1
 1880 0b26 AC1C     		adds	r4, r5, #2
 1881 0b28 0D4B     		ldr	r3, .L260+16
 1882 0b2a 03EB8404 		add	r4, r3, r4, lsl #2
 1883 0b2e A068     		ldr	r0, [r4, #8]	@ float
 1884 0b30 FFF7FEFF 		bl	__aeabi_f2d
 1885              	.LVL211:
 1886 0b34 06A3     		adr	r3, .L260
 1887 0b36 D3E90023 		ldrd	r2, [r3]
 1888 0b3a FFF7FEFF 		bl	__aeabi_dmul
 1889              	.LVL212:
 1890 0b3e FFF7FEFF 		bl	__aeabi_d2f
 1891              	.LVL213:
 1892 0b42 A060     		str	r0, [r4, #8]	@ float
 1893              	.L128:
 779:gcode.c       ****               for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used 
 1894              		.loc 1 779 0 is_stmt 1 discriminator 2
 1895 0b44 0135     		adds	r5, r5, #1
 1896              	.LVL214:
 1897 0b46 EDB2     		uxtb	r5, r5
 1898              	.LVL215:
 1899 0b48 13E0     		b	.L126
 1900              	.L261:
 1901 0b4a 00BFAFF3 		.align	3
 1901      0080
 1902              	.L260:
 1903 0b50 66666666 		.word	1717986918
 1904 0b54 66663940 		.word	1077503590
 1905 0b58 10000000 		.word	gc_block+16
 1906 0b5c 00000000 		.word	gc_state
 1907 0b60 00000000 		.word	gc_block
 1908 0b64 1C000000 		.word	gc_state+28
 1909 0b68 34000000 		.word	gc_block+52
 1910 0b6c 00001040 		.word	1074790400
 1911              	.LVL216:
 1912              	.L234:
 1913 0b70 0025     		movs	r5, #0
 1914              	.LVL217:
 1915              	.L126:
 779:gcode.c       ****               for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used 
 1916              		.loc 1 779 0 is_stmt 0 discriminator 1
 1917 0b72 022D     		cmp	r5, #2
 1918 0b74 D2D9     		bls	.L129
 1919              	.LVL218:
 1920              	.L127:
 781:gcode.c       ****               }
 782:gcode.c       ****             }
 783:gcode.c       **** 
 784:gcode.c       ****             // Arc radius from center to target
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 51


 785:gcode.c       ****             x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 1921              		.loc 1 785 0 is_stmt 1
 1922 0b76 964D     		ldr	r5, .L262+16
 1923 0b78 09F10209 		add	r9, r9, #2
 1924 0b7c 05EB8909 		add	r9, r5, r9, lsl #2
 1925 0b80 0D98     		ldr	r0, [sp, #52]	@ float
 1926 0b82 D9F80810 		ldr	r1, [r9, #8]	@ float
 1927 0b86 FFF7FEFF 		bl	__aeabi_fsub
 1928              	.LVL219:
 1929 0b8a 8046     		mov	r8, r0
 1930              	.LVL220:
 786:gcode.c       ****             y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 1931              		.loc 1 786 0
 1932 0b8c 0F9C     		ldr	r4, [sp, #60]
 1933 0b8e 0234     		adds	r4, r4, #2
 1934 0b90 05EB8404 		add	r4, r5, r4, lsl #2
 1935 0b94 0E98     		ldr	r0, [sp, #56]	@ float
 1936              	.LVL221:
 1937 0b96 A168     		ldr	r1, [r4, #8]	@ float
 1938 0b98 FFF7FEFF 		bl	__aeabi_fsub
 1939              	.LVL222:
 1940 0b9c 0146     		mov	r1, r0
 1941              	.LVL223:
 787:gcode.c       ****             float target_r = hypot_f(x,y);
 1942              		.loc 1 787 0
 1943 0b9e 4046     		mov	r0, r8
 1944              	.LVL224:
 1945 0ba0 FFF7FEFF 		bl	hypot_f
 1946              	.LVL225:
 1947 0ba4 8046     		mov	r8, r0
 1948              	.LVL226:
 788:gcode.c       **** 
 789:gcode.c       ****             // Compute arc radius for mc_arc. Defined from current location to center.
 790:gcode.c       ****             gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 1949              		.loc 1 790 0
 1950 0ba6 D9F80800 		ldr	r0, [r9, #8]	@ float
 1951              	.LVL227:
 1952 0baa A168     		ldr	r1, [r4, #8]	@ float
 1953 0bac FFF7FEFF 		bl	hypot_f
 1954              	.LVL228:
 1955 0bb0 0446     		mov	r4, r0
 1956 0bb2 A862     		str	r0, [r5, #40]	@ float
 791:gcode.c       **** 
 792:gcode.c       ****             // Compute difference between current location and target radii for final error-checks.
 793:gcode.c       ****             float delta_r = fabs(target_r-gc_block.values.r);
 1957              		.loc 1 793 0
 1958 0bb4 4046     		mov	r0, r8
 1959 0bb6 2146     		mov	r1, r4
 1960 0bb8 FFF7FEFF 		bl	__aeabi_fsub
 1961              	.LVL229:
 1962 0bbc 20F00045 		bic	r5, r0, #-2147483648
 1963              	.LVL230:
 794:gcode.c       ****             if (delta_r > 0.005) {
 1964              		.loc 1 794 0
 1965 0bc0 2846     		mov	r0, r5
 1966 0bc2 FFF7FEFF 		bl	__aeabi_f2d
 1967              	.LVL231:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 52


 1968 0bc6 8046     		mov	r8, r0
 1969              	.LVL232:
 1970 0bc8 8946     		mov	r9, r1
 1971 0bca 7DA3     		adr	r3, .L262
 1972 0bcc D3E90023 		ldrd	r2, [r3]
 1973 0bd0 FFF7FEFF 		bl	__aeabi_dcmpgt
 1974              	.LVL233:
 1975 0bd4 0028     		cmp	r0, #0
 1976 0bd6 34D0     		beq	.L113
 795:gcode.c       ****               if (delta_r > 0.5) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] >
 1977              		.loc 1 795 0
 1978 0bd8 2846     		mov	r0, r5
 1979 0bda 4FF07C51 		mov	r1, #1056964608
 1980 0bde FFF7FEFF 		bl	__aeabi_fcmpgt
 1981              	.LVL234:
 1982 0be2 0028     		cmp	r0, #0
 1983 0be4 40F08C82 		bne	.L235
 796:gcode.c       ****               if (delta_r > (0.001*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [A
 1984              		.loc 1 796 0
 1985 0be8 2046     		mov	r0, r4
 1986 0bea FFF7FEFF 		bl	__aeabi_f2d
 1987              	.LVL235:
 1988 0bee 76A3     		adr	r3, .L262+8
 1989 0bf0 D3E90023 		ldrd	r2, [r3]
 1990 0bf4 FFF7FEFF 		bl	__aeabi_dmul
 1991              	.LVL236:
 1992 0bf8 0246     		mov	r2, r0
 1993 0bfa 0B46     		mov	r3, r1
 1994 0bfc 4046     		mov	r0, r8
 1995 0bfe 4946     		mov	r1, r9
 1996 0c00 FFF7FEFF 		bl	__aeabi_dcmpgt
 1997              	.LVL237:
 1998 0c04 0028     		cmp	r0, #0
 1999 0c06 40F07D82 		bne	.L236
 2000 0c0a 1AE0     		b	.L113
 2001              	.LVL238:
 2002              	.L120:
 2003              	.LBE4:
 797:gcode.c       ****             }
 798:gcode.c       ****           }
 799:gcode.c       ****           break;
 800:gcode.c       ****         case MOTION_MODE_PROBE_TOWARD_NO_ERROR: case MOTION_MODE_PROBE_AWAY_NO_ERROR:
 801:gcode.c       ****           gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 2004              		.loc 1 801 0
 2005 0c0c 4AF0100A 		orr	r10, r10, #16
 2006              	.LVL239:
 2007              	.L115:
 802:gcode.c       ****         case MOTION_MODE_PROBE_TOWARD: case MOTION_MODE_PROBE_AWAY:
 803:gcode.c       ****           if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) || 
 2008              		.loc 1 803 0
 2009 0c10 04F17203 		add	r3, r4, #114
 2010 0c14 DBB2     		uxtb	r3, r3
 2011 0c16 012B     		cmp	r3, #1
 2012 0c18 01D8     		bhi	.L131
 804:gcode.c       ****               (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_P
 2013              		.loc 1 804 0
 2014 0c1a 4AF0080A 		orr	r10, r10, #8
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 53


 2015              	.LVL240:
 2016              	.L131:
 805:gcode.c       ****           // [G38 Errors]: Target is same current. No axis words. Cutter compensation is enabled. F
 806:gcode.c       ****           //   is undefined. Probe is triggered. NOTE: Probe check moved to probe cycle. Instead of
 807:gcode.c       ****           //   an error, it issues an alarm to prevent further motion to the probe. It's also done 
 808:gcode.c       ****           //   allow the planner buffer to empty and move off the probe trigger before another prob
 809:gcode.c       ****           if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 2017              		.loc 1 809 0
 2018 0c1e 079B     		ldr	r3, [sp, #28]
 2019 0c20 002B     		cmp	r3, #0
 2020 0c22 00F07182 		beq	.L237
 810:gcode.c       ****           if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_
 2021              		.loc 1 810 0
 2022 0c26 6B48     		ldr	r0, .L262+20
 2023 0c28 6B49     		ldr	r1, .L262+24
 2024 0c2a 0C22     		movs	r2, #12
 2025 0c2c FFF7FEFF 		bl	memcmp
 2026              	.LVL241:
 2027 0c30 0028     		cmp	r0, #0
 2028 0c32 00F06B82 		beq	.L238
 2029 0c36 04E0     		b	.L113
 2030              	.L226:
 2031              	.LBE2:
 649:gcode.c       **** 
 2032              		.loc 1 649 0
 2033 0c38 0023     		movs	r3, #0
 2034 0c3a 0893     		str	r3, [sp, #32]
 2035              	.LVL242:
 2036 0c3c 01E0     		b	.L113
 2037              	.LVL243:
 2038              	.L228:
 2039              	.LBB7:
 661:gcode.c       ****           break;
 2040              		.loc 1 661 0
 2041 0c3e 0023     		movs	r3, #0
 2042 0c40 0893     		str	r3, [sp, #32]
 2043              	.LVL244:
 2044              	.L113:
 2045              	.LBE7:
 811:gcode.c       ****           break;
 812:gcode.c       ****       }
 813:gcode.c       ****     }
 814:gcode.c       ****   }
 815:gcode.c       **** 
 816:gcode.c       ****   // [21. Program flow ]: No error checks required.
 817:gcode.c       **** 
 818:gcode.c       ****   // [0. Non-specific error-checks]: Complete unused value words check, i.e. IJK used when in arc
 819:gcode.c       ****   // radius mode, or axis words that aren't used in the block.
 820:gcode.c       ****   if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 2046              		.loc 1 820 0
 2047 0c42 1AF00104 		ands	r4, r10, #1
 2048 0c46 03D0     		beq	.L132
 821:gcode.c       ****     // Jogging only uses the F feed rate and XYZ value words. N is valid, but S and T are invalid.
 822:gcode.c       ****     bit_false(value_words,(bit(WORD_N)|bit(WORD_F)));
 2049              		.loc 1 822 0
 2050 0c48 27F02103 		bic	r3, r7, #33
 2051 0c4c 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 54


 2052              	.LVL245:
 2053 0c4e 04E0     		b	.L133
 2054              	.LVL246:
 2055              	.L132:
 823:gcode.c       ****   } else {
 824:gcode.c       ****     bit_false(value_words,(bit(WORD_N)|bit(WORD_F)|bit(WORD_S)|bit(WORD_T))); // Remove single-mean
 2056              		.loc 1 824 0
 2057 0c50 27F44873 		bic	r3, r7, #800
 2058 0c54 23F00103 		bic	r3, r3, #1
 2059 0c58 9BB2     		uxth	r3, r3
 2060              	.LVL247:
 2061              	.L133:
 825:gcode.c       ****   }
 826:gcode.c       ****   if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z))); } // Remove axi
 2062              		.loc 1 826 0
 2063 0c5a 089A     		ldr	r2, [sp, #32]
 2064 0c5c 12B1     		cbz	r2, .L134
 2065              		.loc 1 826 0 is_stmt 0 discriminator 1
 2066 0c5e 23F4E053 		bic	r3, r3, #7168
 2067              	.LVL248:
 2068 0c62 9BB2     		uxth	r3, r3
 2069              	.LVL249:
 2070              	.L134:
 827:gcode.c       ****   if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 2071              		.loc 1 827 0 is_stmt 1
 2072 0c64 002B     		cmp	r3, #0
 2073 0c66 40F05382 		bne	.L239
 2074              	.LVL250:
 828:gcode.c       **** 
 829:gcode.c       ****   /* -------------------------------------------------------------------------------------
 830:gcode.c       ****      STEP 4: EXECUTE!!
 831:gcode.c       ****      Assumes that all error-checking has been completed and no failure modes exist. We just
 832:gcode.c       ****      need to update the state and execute the block according to the order-of-execution.
 833:gcode.c       ****   */
 834:gcode.c       **** 
 835:gcode.c       ****   // Initialize planner data struct for motion blocks.
 836:gcode.c       ****   plan_line_data_t plan_data;
 837:gcode.c       ****   plan_line_data_t *pl_data = &plan_data;
 838:gcode.c       ****   memset(pl_data,0,sizeof(plan_line_data_t)); // Zero pl_data struct
 2075              		.loc 1 838 0
 2076 0c6a 10A8     		add	r0, sp, #64
 2077              	.LVL251:
 2078 0c6c 0021     		movs	r1, #0
 2079 0c6e 0C22     		movs	r2, #12
 2080 0c70 FFF7FEFF 		bl	memset
 2081              	.LVL252:
 839:gcode.c       **** 
 840:gcode.c       ****   // Intercept jog commands and complete error checking for valid jog commands and execute.
 841:gcode.c       ****   // NOTE: G-code parser state is not updated, except the position to ensure sequential jog
 842:gcode.c       ****   // targets are computed correctly. The final parser position after a jog is updated in
 843:gcode.c       ****   // protocol_execute_realtime() when jogging completes or is canceled.
 844:gcode.c       ****   if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 2082              		.loc 1 844 0
 2083 0c74 FCB1     		cbz	r4, .L135
 2084              	.LBB8:
 845:gcode.c       ****     // Only distance and unit modal commands and G53 absolute override command are allowed.
 846:gcode.c       ****     // NOTE: Feed rate word and axis word checks have already been performed in STEP 3.
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 55


 847:gcode.c       ****     if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0))) ) { FAIL
 2085              		.loc 1 847 0
 2086 0c76 36F04903 		bics	r3, r6, #73
 2087 0c7a 40F04B82 		bne	.L240
 848:gcode.c       ****     if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE || gc_block.non_modal_command =
 2088              		.loc 1 848 0
 2089 0c7e 544B     		ldr	r3, .L262+16
 2090 0c80 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2091 0c82 352B     		cmp	r3, #53
 2092 0c84 02D0     		beq	.L136
 2093              		.loc 1 848 0 is_stmt 0 discriminator 1
 2094 0c86 002B     		cmp	r3, #0
 2095 0c88 40F04682 		bne	.L241
 2096              	.L136:
 849:gcode.c       **** 
 850:gcode.c       ****     // Initialize planner data to current spindle and coolant modal state.
 851:gcode.c       ****     pl_data->spindle_speed = gc_state.spindle_speed;
 2097              		.loc 1 851 0 is_stmt 1
 2098 0c8c 534A     		ldr	r2, .L262+28
 2099 0c8e D368     		ldr	r3, [r2, #12]	@ float
 2100 0c90 1193     		str	r3, [sp, #68]	@ float
 852:gcode.c       ****     plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 2101              		.loc 1 852 0
 2102 0c92 517A     		ldrb	r1, [r2, #9]	@ zero_extendqisi2
 2103 0c94 137A     		ldrb	r3, [r2, #8]	@ zero_extendqisi2
 2104 0c96 0B43     		orrs	r3, r3, r1
 2105 0c98 8DF84830 		strb	r3, [sp, #72]
 853:gcode.c       **** 
 854:gcode.c       ****     uint8_t status = jog_execute(&plan_data, &gc_block);
 2106              		.loc 1 854 0
 2107 0c9c 10A8     		add	r0, sp, #64
 2108              	.LVL253:
 2109 0c9e 4C49     		ldr	r1, .L262+16
 2110 0ca0 FFF7FEFF 		bl	jog_execute
 2111              	.LVL254:
 855:gcode.c       ****     if (status == STATUS_OK) { memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.value
 2112              		.loc 1 855 0
 2113 0ca4 0346     		mov	r3, r0
 2114 0ca6 20B9     		cbnz	r0, .L137
 2115              		.loc 1 855 0 is_stmt 0 discriminator 1
 2116 0ca8 4A4C     		ldr	r4, .L262+20
 2117 0caa 4B4A     		ldr	r2, .L262+24
 2118 0cac 07CA     		ldmia	r2, {r0, r1, r2}
 2119              	.LVL255:
 2120 0cae 84E80700 		stmia	r4, {r0, r1, r2}
 2121              	.L137:
 856:gcode.c       ****     return(status);
 2122              		.loc 1 856 0 is_stmt 1
 2123 0cb2 1846     		mov	r0, r3
 2124 0cb4 33E2     		b	.L15
 2125              	.L135:
 2126              	.LBE8:
 857:gcode.c       ****   }
 858:gcode.c       ****   
 859:gcode.c       ****   // If in laser mode, setup laser power based on current and past parser conditions.
 860:gcode.c       ****   if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 2127              		.loc 1 860 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 56


 2128 0cb6 4A4B     		ldr	r3, .L262+32
 2129 0cb8 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 2130 0cbc 13F0020F 		tst	r3, #2
 2131 0cc0 24D0     		beq	.L138
 861:gcode.c       ****     if ( !((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_C
 2132              		.loc 1 861 0
 2133 0cc2 434B     		ldr	r3, .L262+16
 2134 0cc4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2135 0cc6 013B     		subs	r3, r3, #1
 2136 0cc8 DBB2     		uxtb	r3, r3
 2137 0cca 022B     		cmp	r3, #2
 2138 0ccc 01D9     		bls	.L139
 862:gcode.c       ****         || (gc_block.modal.motion == MOTION_MODE_CCW_ARC)) ) {
 863:gcode.c       ****       gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 2139              		.loc 1 863 0
 2140 0cce 4AF0400A 		orr	r10, r10, #64
 2141              	.LVL256:
 2142              	.L139:
 864:gcode.c       ****     }
 865:gcode.c       **** 
 866:gcode.c       ****     // Any motion mode with axis words is allowed to be passed from a spindle speed update. 
 867:gcode.c       ****     // NOTE: G1 and G0 without axis words sets axis_command to none. G28/30 are intentionally omitt
 868:gcode.c       ****     // TODO: Check sync conditions for M3 enabled motions that don't enter the planner. (zero lengt
 869:gcode.c       ****     if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE)) { 
 2143              		.loc 1 869 0
 2144 0cd2 079B     		ldr	r3, [sp, #28]
 2145 0cd4 2BB1     		cbz	r3, .L140
 2146              		.loc 1 869 0 is_stmt 0 discriminator 1
 2147 0cd6 089B     		ldr	r3, [sp, #32]
 2148 0cd8 022B     		cmp	r3, #2
 2149 0cda 02D1     		bne	.L140
 870:gcode.c       ****       gc_parser_flags |= GC_PARSER_LASER_ISMOTION; 
 2150              		.loc 1 870 0 is_stmt 1
 2151 0cdc 4AF0800A 		orr	r10, r10, #128
 2152              	.LVL257:
 2153 0ce0 14E0     		b	.L138
 2154              	.L140:
 871:gcode.c       ****     } else {
 872:gcode.c       ****       // M3 constant power laser requires planner syncs to update the laser when changing between
 873:gcode.c       ****       // a G1/2/3 motion mode state and vice versa when there is no motion in the line.
 874:gcode.c       ****       if (gc_state.modal.spindle == SPINDLE_ENABLE_CW) {
 2155              		.loc 1 874 0
 2156 0ce2 3E4B     		ldr	r3, .L262+28
 2157 0ce4 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 2158 0ce6 102B     		cmp	r3, #16
 2159 0ce8 10D1     		bne	.L138
 875:gcode.c       ****         if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_
 2160              		.loc 1 875 0
 2161 0cea 3C4B     		ldr	r3, .L262+28
 2162 0cec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 876:gcode.c       ****             || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 2163              		.loc 1 876 0
 2164 0cee 013B     		subs	r3, r3, #1
 2165 0cf0 DBB2     		uxtb	r3, r3
 875:gcode.c       ****         if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_
 2166              		.loc 1 875 0
 2167 0cf2 022B     		cmp	r3, #2
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 57


 2168 0cf4 05D8     		bhi	.L141
 877:gcode.c       ****           if (bit_istrue(gc_parser_flags,GC_PARSER_LASER_DISABLE)) { 
 2169              		.loc 1 877 0
 2170 0cf6 1AF0400F 		tst	r10, #64
 2171 0cfa 07D0     		beq	.L138
 878:gcode.c       ****             gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC; // Change from G1/2/3 motion mode.
 2172              		.loc 1 878 0
 2173 0cfc 4AF0200A 		orr	r10, r10, #32
 2174              	.LVL258:
 2175 0d00 04E0     		b	.L138
 2176              	.L141:
 879:gcode.c       ****           }
 880:gcode.c       ****         } else {
 881:gcode.c       ****           // When changing to a G1 motion mode without axis words from a non-G1/2/3 motion mode.
 882:gcode.c       ****           if (bit_isfalse(gc_parser_flags,GC_PARSER_LASER_DISABLE)) { 
 2177              		.loc 1 882 0
 2178 0d02 1AF0400F 		tst	r10, #64
 2179 0d06 01D1     		bne	.L138
 883:gcode.c       ****             gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 2180              		.loc 1 883 0
 2181 0d08 4AF0200A 		orr	r10, r10, #32
 2182              	.LVL259:
 2183              	.L138:
 884:gcode.c       ****           }
 885:gcode.c       ****         } 
 886:gcode.c       ****       }
 887:gcode.c       ****     }
 888:gcode.c       ****   }
 889:gcode.c       **** 
 890:gcode.c       ****   // [0. Non-specific/common error-checks and miscellaneous setup]:
 891:gcode.c       ****   // NOTE: If no line number is present, the value is zero.
 892:gcode.c       ****   gc_state.line_number = gc_block.values.n;
 2184              		.loc 1 892 0
 2185 0d0c 304B     		ldr	r3, .L262+16
 2186 0d0e 196A     		ldr	r1, [r3, #32]
 2187 0d10 324A     		ldr	r2, .L262+28
 2188 0d12 9161     		str	r1, [r2, #24]
 893:gcode.c       ****   #ifdef USE_LINE_NUMBERS
 894:gcode.c       ****     pl_data->line_number = gc_state.line_number; // Record data for planner use.
 895:gcode.c       ****   #endif
 896:gcode.c       **** 
 897:gcode.c       ****   // [1. Comments feedback ]:  NOT SUPPORTED
 898:gcode.c       **** 
 899:gcode.c       ****   // [2. Set feed rate mode ]:
 900:gcode.c       ****   gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 2189              		.loc 1 900 0
 2190 0d14 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2191 0d16 5370     		strb	r3, [r2, #1]
 901:gcode.c       ****   if (gc_state.modal.feed_rate) { pl_data->condition |= PL_COND_FLAG_INVERSE_TIME; } // Set conditi
 2192              		.loc 1 901 0
 2193 0d18 13B1     		cbz	r3, .L142
 2194              		.loc 1 901 0 is_stmt 0 discriminator 1
 2195 0d1a 0823     		movs	r3, #8
 2196 0d1c 8DF84830 		strb	r3, [sp, #72]
 2197              	.L142:
 902:gcode.c       **** 
 903:gcode.c       ****   // [3. Set feed rate ]:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 58


 904:gcode.c       ****   gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 2198              		.loc 1 904 0 is_stmt 1
 2199 0d20 2B4A     		ldr	r2, .L262+16
 2200 0d22 D168     		ldr	r1, [r2, #12]	@ float
 2201 0d24 2D4B     		ldr	r3, .L262+28
 2202 0d26 1961     		str	r1, [r3, #16]	@ float
 905:gcode.c       ****   pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 2203              		.loc 1 905 0
 2204 0d28 1091     		str	r1, [sp, #64]	@ float
 906:gcode.c       **** 
 907:gcode.c       ****   // [4. Set spindle speed ]:
 908:gcode.c       ****   if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags,GC_PARSER_LASER_F
 2205              		.loc 1 908 0
 2206 0d2a D56A     		ldr	r5, [r2, #44]	@ float
 2207 0d2c D868     		ldr	r0, [r3, #12]	@ float
 2208 0d2e 2946     		mov	r1, r5
 2209 0d30 FFF7FEFF 		bl	__aeabi_fcmpeq
 2210              	.LVL260:
 2211 0d34 10B1     		cbz	r0, .L143
 2212              		.loc 1 908 0 is_stmt 0 discriminator 1
 2213 0d36 1AF0200F 		tst	r10, #32
 2214 0d3a 13D0     		beq	.L144
 2215              	.L143:
 909:gcode.c       ****     if (gc_state.modal.spindle != SPINDLE_DISABLE) { 
 2216              		.loc 1 909 0 is_stmt 1
 2217 0d3c 274B     		ldr	r3, .L262+28
 2218 0d3e 587A     		ldrb	r0, [r3, #9]	@ zero_extendqisi2
 2219 0d40 60B1     		cbz	r0, .L145
 910:gcode.c       ****       #ifdef VARIABLE_SPINDLE
 911:gcode.c       ****         if (bit_isfalse(gc_parser_flags,GC_PARSER_LASER_ISMOTION)) {
 2220              		.loc 1 911 0
 2221 0d42 1AF0800F 		tst	r10, #128
 2222 0d46 09D1     		bne	.L145
 912:gcode.c       ****           if (bit_istrue(gc_parser_flags,GC_PARSER_LASER_DISABLE)) {
 2223              		.loc 1 912 0
 2224 0d48 1AF0400F 		tst	r10, #64
 2225 0d4c 03D0     		beq	.L146
 913:gcode.c       ****              spindle_sync(gc_state.modal.spindle, 0.0);
 2226              		.loc 1 913 0
 2227 0d4e 0021     		movs	r1, #0
 2228 0d50 FFF7FEFF 		bl	spindle_sync
 2229              	.LVL261:
 2230 0d54 02E0     		b	.L145
 2231              	.L146:
 914:gcode.c       ****           } else { spindle_sync(gc_state.modal.spindle, gc_block.values.s); }
 2232              		.loc 1 914 0
 2233 0d56 2946     		mov	r1, r5
 2234 0d58 FFF7FEFF 		bl	spindle_sync
 2235              	.LVL262:
 2236              	.L145:
 915:gcode.c       ****         }
 916:gcode.c       ****       #else
 917:gcode.c       ****         spindle_sync(gc_state.modal.spindle, 0.0);
 918:gcode.c       ****       #endif
 919:gcode.c       ****     }
 920:gcode.c       ****     gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 2237              		.loc 1 920 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 59


 2238 0d5c 1C4B     		ldr	r3, .L262+16
 2239 0d5e DA6A     		ldr	r2, [r3, #44]	@ float
 2240 0d60 1E4B     		ldr	r3, .L262+28
 2241 0d62 DA60     		str	r2, [r3, #12]	@ float
 2242              	.L144:
 921:gcode.c       ****   }
 922:gcode.c       ****   // NOTE: Pass zero spindle speed for all restricted laser motions.
 923:gcode.c       ****   if (bit_isfalse(gc_parser_flags,GC_PARSER_LASER_DISABLE)) {
 2243              		.loc 1 923 0
 2244 0d64 1AF0400F 		tst	r10, #64
 2245 0d68 02D1     		bne	.L147
 924:gcode.c       ****     pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use. 
 2246              		.loc 1 924 0
 2247 0d6a 1C4B     		ldr	r3, .L262+28
 2248 0d6c DB68     		ldr	r3, [r3, #12]	@ float
 2249 0d6e 1193     		str	r3, [sp, #68]	@ float
 2250              	.L147:
 925:gcode.c       ****   } // else { pl_data->spindle_speed = 0.0; } // Initialized as zero already.
 926:gcode.c       ****   
 927:gcode.c       ****   // [5. Select tool ]: NOT SUPPORTED. Only tracks tool value.
 928:gcode.c       ****   gc_state.tool = gc_block.values.t;
 2251              		.loc 1 928 0
 2252 0d70 174B     		ldr	r3, .L262+16
 2253 0d72 93F83010 		ldrb	r1, [r3, #48]	@ zero_extendqisi2
 2254 0d76 194A     		ldr	r2, .L262+28
 2255 0d78 1175     		strb	r1, [r2, #20]
 929:gcode.c       **** 
 930:gcode.c       ****   // [6. Change tool ]: NOT SUPPORTED
 931:gcode.c       **** 
 932:gcode.c       ****   // [7. Spindle control ]:
 933:gcode.c       ****   if (gc_state.modal.spindle != gc_block.modal.spindle) {
 2256              		.loc 1 933 0
 2257 0d7a 527A     		ldrb	r2, [r2, #9]	@ zero_extendqisi2
 2258 0d7c 987A     		ldrb	r0, [r3, #10]	@ zero_extendqisi2
 2259 0d7e 8242     		cmp	r2, r0
 2260 0d80 06D0     		beq	.L148
 934:gcode.c       ****     // Update spindle control and apply spindle speed when enabling it in this block.
 935:gcode.c       ****     // NOTE: All spindle state changes are synced, even in laser mode. Also, pl_data,
 936:gcode.c       ****     // rather than gc_state, is used to manage laser state for non-laser motions.
 937:gcode.c       ****     spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 2261              		.loc 1 937 0
 2262 0d82 1199     		ldr	r1, [sp, #68]	@ float
 2263 0d84 FFF7FEFF 		bl	spindle_sync
 2264              	.LVL263:
 938:gcode.c       ****     gc_state.modal.spindle = gc_block.modal.spindle;
 2265              		.loc 1 938 0
 2266 0d88 114B     		ldr	r3, .L262+16
 2267 0d8a 9A7A     		ldrb	r2, [r3, #10]	@ zero_extendqisi2
 2268 0d8c 134B     		ldr	r3, .L262+28
 2269 0d8e 5A72     		strb	r2, [r3, #9]
 2270              	.L148:
 939:gcode.c       ****   }
 940:gcode.c       ****   pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 2271              		.loc 1 940 0
 2272 0d90 124A     		ldr	r2, .L262+28
 2273 0d92 517A     		ldrb	r1, [r2, #9]	@ zero_extendqisi2
 2274 0d94 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 60


 2275 0d98 0B43     		orrs	r3, r3, r1
 2276 0d9a 8DF84830 		strb	r3, [sp, #72]
 941:gcode.c       **** 
 942:gcode.c       ****   // [8. Coolant control ]:
 943:gcode.c       ****   if (gc_state.modal.coolant != gc_block.modal.coolant) {
 2277              		.loc 1 943 0
 2278 0d9e 137A     		ldrb	r3, [r2, #8]	@ zero_extendqisi2
 2279 0da0 0B4A     		ldr	r2, .L262+16
 2280 0da2 507A     		ldrb	r0, [r2, #9]	@ zero_extendqisi2
 2281 0da4 8342     		cmp	r3, r0
 2282 0da6 21D0     		beq	.L149
 944:gcode.c       ****     // NOTE: Coolant M-codes are modal. Only one command per line is allowed. But, multiple states
 945:gcode.c       ****     // can exist at the same time, while coolant disable clears all states.
 946:gcode.c       ****     coolant_sync(gc_block.modal.coolant);
 2283              		.loc 1 946 0
 2284 0da8 FFF7FEFF 		bl	coolant_sync
 2285              	.LVL264:
 947:gcode.c       ****     if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
 2286              		.loc 1 947 0
 2287 0dac 084B     		ldr	r3, .L262+16
 2288 0dae 597A     		ldrb	r1, [r3, #9]	@ zero_extendqisi2
 2289 0db0 C1B9     		cbnz	r1, .L150
 2290              		.loc 1 947 0 is_stmt 0 discriminator 1
 2291 0db2 0022     		movs	r2, #0
 2292 0db4 094B     		ldr	r3, .L262+28
 2293 0db6 1A72     		strb	r2, [r3, #8]
 2294 0db8 18E0     		b	.L149
 2295              	.L263:
 2296 0dba 00BFAFF3 		.align	3
 2296      0080
 2297              	.L262:
 2298 0dc0 7B14AE47 		.word	1202590843
 2299 0dc4 E17A743F 		.word	1064598241
 2300 0dc8 FCA9F1D2 		.word	-755914244
 2301 0dcc 4D62503F 		.word	1062232653
 2302 0dd0 00000000 		.word	gc_block
 2303 0dd4 1C000000 		.word	gc_state+28
 2304 0dd8 34000000 		.word	gc_block+52
 2305 0ddc 00000000 		.word	gc_state
 2306 0de0 00000000 		.word	settings
 2307              	.L150:
 948:gcode.c       ****     else { gc_state.modal.coolant |= gc_block.modal.coolant; }
 2308              		.loc 1 948 0 is_stmt 1
 2309 0de4 A94A     		ldr	r2, .L264
 2310 0de6 137A     		ldrb	r3, [r2, #8]	@ zero_extendqisi2
 2311 0de8 0B43     		orrs	r3, r3, r1
 2312 0dea 1372     		strb	r3, [r2, #8]
 2313              	.L149:
 949:gcode.c       ****   }
 950:gcode.c       ****   pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 2314              		.loc 1 950 0
 2315 0dec A74B     		ldr	r3, .L264
 2316 0dee 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 2317 0df0 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 2318 0df4 1343     		orrs	r3, r3, r2
 2319 0df6 8DF84830 		strb	r3, [sp, #72]
 951:gcode.c       **** 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 61


 952:gcode.c       ****   // [9. Enable/disable feed rate or spindle overrides ]: NOT SUPPORTED. Always enabled.
 953:gcode.c       **** 
 954:gcode.c       ****   // [10. Dwell ]:
 955:gcode.c       ****   if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 2320              		.loc 1 955 0
 2321 0dfa A54B     		ldr	r3, .L264+4
 2322 0dfc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2323 0dfe 042B     		cmp	r3, #4
 2324 0e00 03D1     		bne	.L151
 2325              		.loc 1 955 0 is_stmt 0 discriminator 1
 2326 0e02 A34B     		ldr	r3, .L264+4
 2327 0e04 586A     		ldr	r0, [r3, #36]	@ float
 2328 0e06 FFF7FEFF 		bl	mc_dwell
 2329              	.LVL265:
 2330              	.L151:
 956:gcode.c       **** 
 957:gcode.c       ****   // [11. Set active plane ]:
 958:gcode.c       ****   gc_state.modal.plane_select = gc_block.modal.plane_select;
 2331              		.loc 1 958 0 is_stmt 1
 2332 0e0a A14A     		ldr	r2, .L264+4
 2333 0e0c 5179     		ldrb	r1, [r2, #5]	@ zero_extendqisi2
 2334 0e0e 9F4B     		ldr	r3, .L264
 2335 0e10 1971     		strb	r1, [r3, #4]
 959:gcode.c       **** 
 960:gcode.c       ****   // [12. Set length units ]:
 961:gcode.c       ****   gc_state.modal.units = gc_block.modal.units;
 2336              		.loc 1 961 0
 2337 0e12 D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 2338 0e14 9A70     		strb	r2, [r3, #2]
 962:gcode.c       **** 
 963:gcode.c       ****   // [13. Cutter radius compensation ]: G41/42 NOT SUPPORTED
 964:gcode.c       ****   // gc_state.modal.cutter_comp = gc_block.modal.cutter_comp; // NOTE: Not needed since always disa
 965:gcode.c       **** 
 966:gcode.c       ****   // [14. Cutter length compensation ]: G43.1 and G49 supported. G43 NOT SUPPORTED.
 967:gcode.c       ****   // NOTE: If G43 were supported, its operation wouldn't be any different from G43.1 in terms
 968:gcode.c       ****   // of execution. The error-checking step would simply load the offset value into the correct
 969:gcode.c       ****   // axis of the block XYZ value array.
 970:gcode.c       ****   if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 2339              		.loc 1 970 0
 2340 0e16 089B     		ldr	r3, [sp, #32]
 2341 0e18 032B     		cmp	r3, #3
 2342 0e1a 13D1     		bne	.L152
 971:gcode.c       ****     gc_state.modal.tool_length = gc_block.modal.tool_length;
 2343              		.loc 1 971 0
 2344 0e1c 9C4B     		ldr	r3, .L264+4
 2345 0e1e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2346 0e20 9A4A     		ldr	r2, .L264
 2347 0e22 5371     		strb	r3, [r2, #5]
 972:gcode.c       ****     if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL) { // G49
 2348              		.loc 1 972 0
 2349 0e24 13B9     		cbnz	r3, .L153
 973:gcode.c       ****       gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0;
 2350              		.loc 1 973 0
 2351 0e26 0022     		movs	r2, #0
 2352 0e28 994B     		ldr	r3, .L264+4
 2353 0e2a DA63     		str	r2, [r3, #60]	@ float
 2354              	.L153:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 62


 974:gcode.c       ****     } // else G43.1
 975:gcode.c       ****     if ( gc_state.tool_length_offset != gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] ) {
 2355              		.loc 1 975 0
 2356 0e2c 984B     		ldr	r3, .L264+4
 2357 0e2e DD6B     		ldr	r5, [r3, #60]	@ float
 2358 0e30 964B     		ldr	r3, .L264
 2359 0e32 186C     		ldr	r0, [r3, #64]	@ float
 2360 0e34 2946     		mov	r1, r5
 2361 0e36 FFF7FEFF 		bl	__aeabi_fcmpeq
 2362              	.LVL266:
 2363 0e3a 18B9     		cbnz	r0, .L152
 976:gcode.c       ****       gc_state.tool_length_offset = gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
 2364              		.loc 1 976 0
 2365 0e3c 934B     		ldr	r3, .L264
 2366 0e3e 1D64     		str	r5, [r3, #64]	@ float
 977:gcode.c       ****       system_flag_wco_change();
 2367              		.loc 1 977 0
 2368 0e40 FFF7FEFF 		bl	system_flag_wco_change
 2369              	.LVL267:
 2370              	.L152:
 978:gcode.c       ****     }
 979:gcode.c       ****   }
 980:gcode.c       **** 
 981:gcode.c       ****   // [15. Coordinate system selection ]:
 982:gcode.c       ****   if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 2371              		.loc 1 982 0
 2372 0e44 914B     		ldr	r3, .L264
 2373 0e46 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2374 0e48 914A     		ldr	r2, .L264+4
 2375 0e4a D279     		ldrb	r2, [r2, #7]	@ zero_extendqisi2
 2376 0e4c 9342     		cmp	r3, r2
 2377 0e4e 08D0     		beq	.L155
 983:gcode.c       ****     gc_state.modal.coord_select = gc_block.modal.coord_select;
 2378              		.loc 1 983 0
 2379 0e50 8E4B     		ldr	r3, .L264
 2380 0e52 9A71     		strb	r2, [r3, #6]
 984:gcode.c       ****     memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 2381              		.loc 1 984 0
 2382 0e54 2833     		adds	r3, r3, #40
 2383 0e56 13AA     		add	r2, sp, #76
 2384 0e58 07CA     		ldmia	r2, {r0, r1, r2}
 2385 0e5a 83E80700 		stmia	r3, {r0, r1, r2}
 985:gcode.c       ****     system_flag_wco_change();
 2386              		.loc 1 985 0
 2387 0e5e FFF7FEFF 		bl	system_flag_wco_change
 2388              	.LVL268:
 2389              	.L155:
 986:gcode.c       ****   }
 987:gcode.c       **** 
 988:gcode.c       ****   // [16. Set path control mode ]: G61.1/G64 NOT SUPPORTED
 989:gcode.c       ****   // gc_state.modal.control = gc_block.modal.control; // NOTE: Always default.
 990:gcode.c       **** 
 991:gcode.c       ****   // [17. Set distance mode ]:
 992:gcode.c       ****   gc_state.modal.distance = gc_block.modal.distance;
 2390              		.loc 1 992 0
 2391 0e62 8B4B     		ldr	r3, .L264+4
 2392 0e64 1979     		ldrb	r1, [r3, #4]	@ zero_extendqisi2
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 63


 2393 0e66 894A     		ldr	r2, .L264
 2394 0e68 D170     		strb	r1, [r2, #3]
 993:gcode.c       **** 
 994:gcode.c       ****   // [18. Set retract mode ]: NOT SUPPORTED
 995:gcode.c       **** 
 996:gcode.c       ****   // [19. Go to predefined position, Set G10, or Set axis offsets ]:
 997:gcode.c       ****   switch(gc_block.non_modal_command) {
 2395              		.loc 1 997 0
 2396 0e6a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2397 0e6c 262B     		cmp	r3, #38
 2398 0e6e 36D0     		beq	.L157
 2399 0e70 06D8     		bhi	.L158
 2400 0e72 1C2B     		cmp	r3, #28
 2401 0e74 1CD0     		beq	.L159
 2402 0e76 1E2B     		cmp	r3, #30
 2403 0e78 1AD0     		beq	.L159
 2404 0e7a 0A2B     		cmp	r3, #10
 2405 0e7c 07D0     		beq	.L160
 2406 0e7e 47E0     		b	.L156
 2407              	.L158:
 2408 0e80 5C2B     		cmp	r3, #92
 2409 0e82 36D0     		beq	.L161
 2410 0e84 662B     		cmp	r3, #102
 2411 0e86 3CD0     		beq	.L162
 2412 0e88 282B     		cmp	r3, #40
 2413 0e8a 41D1     		bne	.L156
 2414 0e8c 2CE0     		b	.L163
 2415              	.L160:
 998:gcode.c       ****     case NON_MODAL_SET_COORDINATE_DATA:
 999:gcode.c       ****       settings_write_coord_data(coord_select,gc_block.values.ijk);
 2416              		.loc 1 999 0
 2417 0e8e 0B9D     		ldr	r5, [sp, #44]
 2418 0e90 2846     		mov	r0, r5
 2419 0e92 8049     		ldr	r1, .L264+8
 2420 0e94 FFF7FEFF 		bl	settings_write_coord_data
 2421              	.LVL269:
1000:gcode.c       ****       // Update system coordinate system if currently active.
1001:gcode.c       ****       if (gc_state.modal.coord_select == coord_select) {
 2422              		.loc 1 1001 0
 2423 0e98 7C4B     		ldr	r3, .L264
 2424 0e9a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2425 0e9c AB42     		cmp	r3, r5
 2426 0e9e 37D1     		bne	.L156
1002:gcode.c       ****         memcpy(gc_state.coord_system,gc_block.values.ijk,N_AXIS*sizeof(float));
 2427              		.loc 1 1002 0
 2428 0ea0 7D4B     		ldr	r3, .L264+12
 2429 0ea2 7C4A     		ldr	r2, .L264+8
 2430 0ea4 07CA     		ldmia	r2, {r0, r1, r2}
 2431 0ea6 83E80700 		stmia	r3, {r0, r1, r2}
1003:gcode.c       ****         system_flag_wco_change();
 2432              		.loc 1 1003 0
 2433 0eaa FFF7FEFF 		bl	system_flag_wco_change
 2434              	.LVL270:
 2435 0eae 2FE0     		b	.L156
 2436              	.L159:
1004:gcode.c       ****       }
1005:gcode.c       ****       break;
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 64


1006:gcode.c       ****     case NON_MODAL_GO_HOME_0: case NON_MODAL_GO_HOME_1:
1007:gcode.c       ****       // Move to intermediate position before going home. Obeys current coordinate system and offse
1008:gcode.c       ****       // and absolute and incremental modes.
1009:gcode.c       ****       pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 2437              		.loc 1 1009 0
 2438 0eb0 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 2439 0eb4 43F00103 		orr	r3, r3, #1
 2440 0eb8 8DF84830 		strb	r3, [sp, #72]
1010:gcode.c       ****       if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 2441              		.loc 1 1010 0
 2442 0ebc 089B     		ldr	r3, [sp, #32]
 2443 0ebe 1BB1     		cbz	r3, .L164
 2444              		.loc 1 1010 0 is_stmt 0 discriminator 1
 2445 0ec0 7648     		ldr	r0, .L264+16
 2446 0ec2 10A9     		add	r1, sp, #64
 2447              	.LVL271:
 2448 0ec4 FFF7FEFF 		bl	mc_line
 2449              	.LVL272:
 2450              	.L164:
1011:gcode.c       ****       mc_line(gc_block.values.ijk, pl_data);
 2451              		.loc 1 1011 0 is_stmt 1
 2452 0ec8 724D     		ldr	r5, .L264+8
 2453 0eca 2846     		mov	r0, r5
 2454 0ecc 10A9     		add	r1, sp, #64
 2455              	.LVL273:
 2456 0ece FFF7FEFF 		bl	mc_line
 2457              	.LVL274:
1012:gcode.c       ****       memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 2458              		.loc 1 1012 0
 2459 0ed2 734B     		ldr	r3, .L264+20
 2460 0ed4 95E80700 		ldmia	r5, {r0, r1, r2}
 2461 0ed8 83E80700 		stmia	r3, {r0, r1, r2}
1013:gcode.c       ****       break;
 2462              		.loc 1 1013 0
 2463 0edc 18E0     		b	.L156
 2464              	.L157:
1014:gcode.c       ****     case NON_MODAL_SET_HOME_0:
1015:gcode.c       ****       settings_write_coord_data(SETTING_INDEX_G28,gc_state.position);
 2465              		.loc 1 1015 0
 2466 0ede 0620     		movs	r0, #6
 2467 0ee0 6F49     		ldr	r1, .L264+20
 2468 0ee2 FFF7FEFF 		bl	settings_write_coord_data
 2469              	.LVL275:
1016:gcode.c       ****       break;
 2470              		.loc 1 1016 0
 2471 0ee6 13E0     		b	.L156
 2472              	.L163:
1017:gcode.c       ****     case NON_MODAL_SET_HOME_1:
1018:gcode.c       ****       settings_write_coord_data(SETTING_INDEX_G30,gc_state.position);
 2473              		.loc 1 1018 0
 2474 0ee8 0720     		movs	r0, #7
 2475 0eea 6D49     		ldr	r1, .L264+20
 2476 0eec FFF7FEFF 		bl	settings_write_coord_data
 2477              	.LVL276:
1019:gcode.c       ****       break;
 2478              		.loc 1 1019 0
 2479 0ef0 0EE0     		b	.L156
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 65


 2480              	.L161:
1020:gcode.c       ****     case NON_MODAL_SET_COORDINATE_OFFSET:
1021:gcode.c       ****       memcpy(gc_state.coord_offset,gc_block.values.xyz,sizeof(gc_block.values.xyz));
 2481              		.loc 1 1021 0
 2482 0ef2 6C4B     		ldr	r3, .L264+24
 2483 0ef4 694A     		ldr	r2, .L264+16
 2484 0ef6 07CA     		ldmia	r2, {r0, r1, r2}
 2485 0ef8 83E80700 		stmia	r3, {r0, r1, r2}
1022:gcode.c       ****       system_flag_wco_change();
 2486              		.loc 1 1022 0
 2487 0efc FFF7FEFF 		bl	system_flag_wco_change
 2488              	.LVL277:
1023:gcode.c       ****       break;
 2489              		.loc 1 1023 0
 2490 0f00 06E0     		b	.L156
 2491              	.L162:
1024:gcode.c       ****     case NON_MODAL_RESET_COORDINATE_OFFSET:
1025:gcode.c       ****       clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 2492              		.loc 1 1025 0
 2493 0f02 6848     		ldr	r0, .L264+24
 2494 0f04 0021     		movs	r1, #0
 2495 0f06 0C22     		movs	r2, #12
 2496 0f08 FFF7FEFF 		bl	memset
 2497              	.LVL278:
1026:gcode.c       ****       system_flag_wco_change();
 2498              		.loc 1 1026 0
 2499 0f0c FFF7FEFF 		bl	system_flag_wco_change
 2500              	.LVL279:
 2501              	.L156:
1027:gcode.c       ****       break;
1028:gcode.c       ****   }
1029:gcode.c       **** 
1030:gcode.c       **** 
1031:gcode.c       ****   // [20. Motion modes ]:
1032:gcode.c       ****   // NOTE: Commands G10,G28,G30,G92 lock out and prevent axis words from use in motion modes.
1033:gcode.c       ****   // Enter motion modes only if there are axis words or a motion mode command word in the block.
1034:gcode.c       ****   gc_state.modal.motion = gc_block.modal.motion;
 2502              		.loc 1 1034 0
 2503 0f10 5F4B     		ldr	r3, .L264+4
 2504 0f12 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2505 0f14 5D4A     		ldr	r2, .L264
 2506 0f16 1370     		strb	r3, [r2]
1035:gcode.c       ****   if (gc_state.modal.motion != MOTION_MODE_NONE) {
 2507              		.loc 1 1035 0
 2508 0f18 502B     		cmp	r3, #80
 2509 0f1a 46D0     		beq	.L165
1036:gcode.c       ****     if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 2510              		.loc 1 1036 0
 2511 0f1c 089A     		ldr	r2, [sp, #32]
 2512 0f1e 022A     		cmp	r2, #2
 2513 0f20 43D1     		bne	.L165
 2514              	.LVL280:
 2515              	.LBB9:
1037:gcode.c       ****       uint8_t gc_update_pos = GC_UPDATE_POS_TARGET;
1038:gcode.c       ****       if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 2516              		.loc 1 1038 0
 2517 0f22 012B     		cmp	r3, #1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 66


 2518 0f24 05D1     		bne	.L166
1039:gcode.c       ****         mc_line(gc_block.values.xyz, pl_data);
 2519              		.loc 1 1039 0
 2520 0f26 5D48     		ldr	r0, .L264+16
 2521 0f28 10A9     		add	r1, sp, #64
 2522              	.LVL281:
 2523 0f2a FFF7FEFF 		bl	mc_line
 2524              	.LVL282:
1037:gcode.c       ****       uint8_t gc_update_pos = GC_UPDATE_POS_TARGET;
 2525              		.loc 1 1037 0
 2526 0f2e 0020     		movs	r0, #0
 2527 0f30 30E0     		b	.L167
 2528              	.L166:
1040:gcode.c       ****       } else if (gc_state.modal.motion == MOTION_MODE_SEEK) {
 2529              		.loc 1 1040 0
 2530 0f32 5BB9     		cbnz	r3, .L168
1041:gcode.c       ****         pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 2531              		.loc 1 1041 0
 2532 0f34 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 2533 0f38 43F00103 		orr	r3, r3, #1
 2534 0f3c 8DF84830 		strb	r3, [sp, #72]
1042:gcode.c       ****         mc_line(gc_block.values.xyz, pl_data);
 2535              		.loc 1 1042 0
 2536 0f40 5648     		ldr	r0, .L264+16
 2537 0f42 10A9     		add	r1, sp, #64
 2538              	.LVL283:
 2539 0f44 FFF7FEFF 		bl	mc_line
 2540              	.LVL284:
1037:gcode.c       ****       if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 2541              		.loc 1 1037 0
 2542 0f48 0020     		movs	r0, #0
 2543 0f4a 23E0     		b	.L167
 2544              	.L168:
1043:gcode.c       ****       } else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC) || (gc_state.modal.motion == MOTION_
 2545              		.loc 1 1043 0
 2546 0f4c 023B     		subs	r3, r3, #2
 2547 0f4e DBB2     		uxtb	r3, r3
 2548 0f50 012B     		cmp	r3, #1
 2549 0f52 14D8     		bhi	.L169
1044:gcode.c       ****         mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.value
 2550              		.loc 1 1044 0
 2551 0f54 514B     		ldr	r3, .L264+16
 2552 0f56 53F80C2C 		ldr	r2, [r3, #-12]	@ float
 2553 0f5a 0092     		str	r2, [sp]	@ float
 2554 0f5c CDF804B0 		str	fp, [sp, #4]
 2555 0f60 0A9A     		ldr	r2, [sp, #40]
 2556 0f62 0292     		str	r2, [sp, #8]
 2557 0f64 0C9A     		ldr	r2, [sp, #48]
 2558 0f66 0392     		str	r2, [sp, #12]
 2559 0f68 CAF38002 		ubfx	r2, r10, #2, #1
 2560 0f6c 0492     		str	r2, [sp, #16]
 2561 0f6e 1846     		mov	r0, r3
 2562 0f70 10A9     		add	r1, sp, #64
 2563              	.LVL285:
 2564 0f72 4B4A     		ldr	r2, .L264+20
 2565 0f74 243B     		subs	r3, r3, #36
 2566 0f76 FFF7FEFF 		bl	mc_arc
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 67


 2567              	.LVL286:
1037:gcode.c       ****       if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 2568              		.loc 1 1037 0
 2569 0f7a 0020     		movs	r0, #0
 2570 0f7c 0AE0     		b	.L167
 2571              	.L169:
1045:gcode.c       ****             axis_0, axis_1, axis_linear, bit_istrue(gc_parser_flags,GC_PARSER_ARC_IS_CLOCKWISE));
1046:gcode.c       ****       } else {
1047:gcode.c       ****         // NOTE: gc_block.values.xyz is returned from mc_probe_cycle with the updated position valu
1048:gcode.c       ****         // upon a successful probing cycle, the machine position and the returned value should be t
1049:gcode.c       ****         #ifndef ALLOW_FEED_OVERRIDE_DURING_PROBE_CYCLES
1050:gcode.c       ****           pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 2572              		.loc 1 1050 0
 2573 0f7e 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 2574 0f82 43F00403 		orr	r3, r3, #4
 2575 0f86 8DF84830 		strb	r3, [sp, #72]
1051:gcode.c       ****         #endif
1052:gcode.c       ****         gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 2576              		.loc 1 1052 0
 2577 0f8a 4448     		ldr	r0, .L264+16
 2578 0f8c 10A9     		add	r1, sp, #64
 2579              	.LVL287:
 2580 0f8e 5246     		mov	r2, r10
 2581 0f90 FFF7FEFF 		bl	mc_probe_cycle
 2582              	.LVL288:
 2583              	.L167:
1053:gcode.c       ****       }  
1054:gcode.c       ****      
1055:gcode.c       ****       // As far as the parser is concerned, the position is now == target. In reality the
1056:gcode.c       ****       // motion control system might still be processing the action and the real tool position
1057:gcode.c       ****       // in any intermediate location.
1058:gcode.c       ****       if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 2584              		.loc 1 1058 0
 2585 0f94 28B9     		cbnz	r0, .L170
1059:gcode.c       ****         memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); // gc_state.po
 2586              		.loc 1 1059 0
 2587 0f96 424B     		ldr	r3, .L264+20
 2588 0f98 404A     		ldr	r2, .L264+16
 2589 0f9a 07CA     		ldmia	r2, {r0, r1, r2}
 2590              	.LVL289:
 2591 0f9c 83E80700 		stmia	r3, {r0, r1, r2}
 2592 0fa0 03E0     		b	.L165
 2593              	.LVL290:
 2594              	.L170:
1060:gcode.c       ****       } else if (gc_update_pos == GC_UPDATE_POS_SYSTEM) {
 2595              		.loc 1 1060 0
 2596 0fa2 0128     		cmp	r0, #1
 2597 0fa4 01D1     		bne	.L165
1061:gcode.c       ****         gc_sync_position(); // gc_state.position[] = sys_position
 2598              		.loc 1 1061 0
 2599 0fa6 FFF7FEFF 		bl	gc_sync_position
 2600              	.LVL291:
 2601              	.L165:
 2602              	.LBE9:
1062:gcode.c       ****       } // == GC_UPDATE_POS_NONE
1063:gcode.c       ****     }     
1064:gcode.c       ****   }
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 68


1065:gcode.c       **** 
1066:gcode.c       ****   // [21. Program flow ]:
1067:gcode.c       ****   // M0,M1,M2,M30: Perform non-running program flow actions. During a program pause, the buffer may
1068:gcode.c       ****   // refill and can only be resumed by the cycle start run-time command.
1069:gcode.c       ****   gc_state.modal.program_flow = gc_block.modal.program_flow;
 2603              		.loc 1 1069 0
 2604 0faa 394B     		ldr	r3, .L264+4
 2605 0fac 187A     		ldrb	r0, [r3, #8]	@ zero_extendqisi2
 2606 0fae 374B     		ldr	r3, .L264
 2607 0fb0 D871     		strb	r0, [r3, #7]
1070:gcode.c       ****   if (gc_state.modal.program_flow) {
 2608              		.loc 1 1070 0
 2609 0fb2 0028     		cmp	r0, #0
 2610 0fb4 00F0B380 		beq	.L15
1071:gcode.c       ****     protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving 
 2611              		.loc 1 1071 0
 2612 0fb8 FFF7FEFF 		bl	protocol_buffer_synchronize
 2613              	.LVL292:
1072:gcode.c       ****     if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED) {
 2614              		.loc 1 1072 0
 2615 0fbc 334B     		ldr	r3, .L264
 2616 0fbe DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2617 0fc0 032B     		cmp	r3, #3
 2618 0fc2 09D1     		bne	.L171
1073:gcode.c       ****       if (sys.state != STATE_CHECK_MODE) {
 2619              		.loc 1 1073 0
 2620 0fc4 384B     		ldr	r3, .L264+28
 2621 0fc6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2622 0fc8 022B     		cmp	r3, #2
 2623 0fca 2AD0     		beq	.L172
1074:gcode.c       ****         system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 2624              		.loc 1 1074 0
 2625 0fcc 0820     		movs	r0, #8
 2626 0fce FFF7FEFF 		bl	system_set_exec_state_flag
 2627              	.LVL293:
1075:gcode.c       ****         protocol_execute_realtime(); // Execute suspend.
 2628              		.loc 1 1075 0
 2629 0fd2 FFF7FEFF 		bl	protocol_execute_realtime
 2630              	.LVL294:
 2631 0fd6 24E0     		b	.L172
 2632              	.L171:
1076:gcode.c       ****       }
1077:gcode.c       ****     } else { // == PROGRAM_FLOW_COMPLETED
1078:gcode.c       ****       // Upon program complete, only a subset of g-codes reset to certain defaults, according to
1079:gcode.c       ****       // LinuxCNC's program end descriptions and testing. Only modal groups [G-code 1,2,3,5,7,12]
1080:gcode.c       ****       // and [M-code 7,8,9] reset to [G1,G17,G90,G94,G40,G54,M5,M9,M48]. The remaining modal groups
1081:gcode.c       ****       // [G-code 4,6,8,10,13,14,15] and [M-code 4,5,6] and the modal words [F,S,T,H] do not reset.
1082:gcode.c       ****       gc_state.modal.motion = MOTION_MODE_LINEAR;
 2633              		.loc 1 1082 0
 2634 0fd8 2C4B     		ldr	r3, .L264
 2635 0fda 0122     		movs	r2, #1
 2636 0fdc 1A70     		strb	r2, [r3]
1083:gcode.c       ****       gc_state.modal.plane_select = PLANE_SELECT_XY;
 2637              		.loc 1 1083 0
 2638 0fde 0022     		movs	r2, #0
 2639 0fe0 1A71     		strb	r2, [r3, #4]
1084:gcode.c       ****       gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 69


 2640              		.loc 1 1084 0
 2641 0fe2 DA70     		strb	r2, [r3, #3]
1085:gcode.c       ****       gc_state.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 2642              		.loc 1 1085 0
 2643 0fe4 5A70     		strb	r2, [r3, #1]
1086:gcode.c       ****       // gc_state.modal.cutter_comp = CUTTER_COMP_DISABLE; // Not supported.
1087:gcode.c       ****       gc_state.modal.coord_select = 0; // G54
 2644              		.loc 1 1087 0
 2645 0fe6 9A71     		strb	r2, [r3, #6]
1088:gcode.c       ****       gc_state.modal.spindle = SPINDLE_DISABLE;
 2646              		.loc 1 1088 0
 2647 0fe8 5A72     		strb	r2, [r3, #9]
1089:gcode.c       ****       gc_state.modal.coolant = COOLANT_DISABLE;
 2648              		.loc 1 1089 0
 2649 0fea 1A72     		strb	r2, [r3, #8]
1090:gcode.c       ****       // gc_state.modal.override = OVERRIDE_DISABLE; // Not supported.
1091:gcode.c       **** 
1092:gcode.c       ****       #ifdef RESTORE_OVERRIDES_AFTER_PROGRAM_END
1093:gcode.c       ****         sys.f_override = DEFAULT_FEED_OVERRIDE;
 2650              		.loc 1 1093 0
 2651 0fec 2E4B     		ldr	r3, .L264+28
 2652 0fee 6422     		movs	r2, #100
 2653 0ff0 DA71     		strb	r2, [r3, #7]
1094:gcode.c       ****         sys.r_override = DEFAULT_RAPID_OVERRIDE;
 2654              		.loc 1 1094 0
 2655 0ff2 1A72     		strb	r2, [r3, #8]
1095:gcode.c       ****         sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 2656              		.loc 1 1095 0
 2657 0ff4 5A72     		strb	r2, [r3, #9]
1096:gcode.c       ****       #endif
1097:gcode.c       **** 
1098:gcode.c       ****       // Execute coordinate change and spindle/coolant stop.
1099:gcode.c       ****       if (sys.state != STATE_CHECK_MODE) {
 2658              		.loc 1 1099 0
 2659 0ff6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2660 0ff8 022B     		cmp	r3, #2
 2661 0ffa 0FD0     		beq	.L173
1100:gcode.c       ****         if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(
 2662              		.loc 1 1100 0
 2663 0ffc 0020     		movs	r0, #0
 2664 0ffe 2649     		ldr	r1, .L264+12
 2665 1000 FFF7FEFF 		bl	settings_read_coord_data
 2666              	.LVL295:
 2667 1004 0028     		cmp	r0, #0
 2668 1006 00F08980 		beq	.L242
1101:gcode.c       ****         system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 2669              		.loc 1 1101 0
 2670 100a FFF7FEFF 		bl	system_flag_wco_change
 2671              	.LVL296:
1102:gcode.c       ****         spindle_set_state(SPINDLE_DISABLE,0.0);
 2672              		.loc 1 1102 0
 2673 100e 0020     		movs	r0, #0
 2674 1010 0021     		movs	r1, #0
 2675 1012 FFF7FEFF 		bl	spindle_set_state
 2676              	.LVL297:
1103:gcode.c       ****         coolant_set_state(COOLANT_DISABLE);
 2677              		.loc 1 1103 0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 70


 2678 1016 0020     		movs	r0, #0
 2679 1018 FFF7FEFF 		bl	coolant_set_state
 2680              	.LVL298:
 2681              	.L173:
1104:gcode.c       ****       }
1105:gcode.c       ****       report_feedback_message(MESSAGE_PROGRAM_END);
 2682              		.loc 1 1105 0
 2683 101c 0820     		movs	r0, #8
 2684 101e FFF7FEFF 		bl	report_feedback_message
 2685              	.LVL299:
 2686              	.L172:
1106:gcode.c       ****     }
1107:gcode.c       ****     gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 2687              		.loc 1 1107 0
 2688 1022 0022     		movs	r2, #0
 2689 1024 194B     		ldr	r3, .L264
 2690 1026 DA71     		strb	r2, [r3, #7]
1108:gcode.c       ****   }
1109:gcode.c       **** 
1110:gcode.c       ****   // TODO: % to denote start of program.
1111:gcode.c       **** 
1112:gcode.c       ****   return(STATUS_OK);
 2691              		.loc 1 1112 0
 2692 1028 2046     		mov	r0, r4
 2693 102a 78E0     		b	.L15
 2694              	.LVL300:
 2695              	.L175:
 121:gcode.c       ****     char_counter++;
 2696              		.loc 1 121 0
 2697 102c 0120     		movs	r0, #1
 2698 102e 76E0     		b	.L15
 2699              	.L176:
 123:gcode.c       **** 
 2700              		.loc 1 123 0
 2701 1030 0220     		movs	r0, #2
 2702 1032 74E0     		b	.L15
 2703              	.LVL301:
 2704              	.L177:
 233:gcode.c       ****         }
 2705              		.loc 1 233 0
 2706 1034 1420     		movs	r0, #20
 2707              	.LVL302:
 2708 1036 72E0     		b	.L15
 2709              	.LVL303:
 2710              	.L179:
 150:gcode.c       ****               axis_command = AXIS_COMMAND_NON_MODAL;
 2711              		.loc 1 150 0
 2712 1038 1820     		movs	r0, #24
 2713              	.LVL304:
 2714 103a 70E0     		b	.L15
 2715              	.LVL305:
 2716              	.L181:
 158:gcode.c       ****               gc_block.non_modal_command += mantissa;
 2717              		.loc 1 158 0
 2718 103c 1420     		movs	r0, #20
 2719              	.LVL306:
 2720 103e 6EE0     		b	.L15
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 71


 2721              	.LVL307:
 2722              	.L182:
 166:gcode.c       ****             axis_command = AXIS_COMMAND_MOTION_MODE;
 2723              		.loc 1 166 0
 2724 1040 1820     		movs	r0, #24
 2725              	.LVL308:
 2726 1042 6CE0     		b	.L15
 2727              	.LVL309:
 2728              	.L184:
 174:gcode.c       ****               }
 2729              		.loc 1 174 0
 2730 1044 1420     		movs	r0, #20
 2731              	.LVL310:
 2732 1046 6AE0     		b	.L15
 2733              	.LVL311:
 2734              	.L185:
 190:gcode.c       ****               mantissa = 0; // Set to zero to indicate valid non-integer G command.
 2735              		.loc 1 190 0
 2736 1048 1420     		movs	r0, #20
 2737              	.LVL312:
 2738 104a 68E0     		b	.L15
 2739              	.LVL313:
 2740              	.L186:
 2741 104c 1420     		movs	r0, #20
 2742              	.LVL314:
 2743 104e 66E0     		b	.L15
 2744              	.LVL315:
 2745              	.L187:
 214:gcode.c       ****             axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 2746              		.loc 1 214 0
 2747 1050 1820     		movs	r0, #24
 2748              	.LVL316:
 2749 1052 64E0     		b	.L15
 2750              	.LVL317:
 2751              	.L188:
 220:gcode.c       ****             mantissa = 0; // Set to zero to indicate valid non-integer G command.
 2752              		.loc 1 220 0
 2753 1054 1420     		movs	r0, #20
 2754              	.LVL318:
 2755 1056 62E0     		b	.L15
 2756              	.LVL319:
 2757              	.L189:
 230:gcode.c       ****             // gc_block.modal.control = CONTROL_MODE_EXACT_PATH; // G61
 2758              		.loc 1 230 0
 2759 1058 1420     		movs	r0, #20
 2760              	.LVL320:
 2761 105a 60E0     		b	.L15
 2762              	.LVL321:
 2763              	.L190:
 235:gcode.c       ****         // Check for more than one command per modal group violations in the current block
 2764              		.loc 1 235 0
 2765 105c 1720     		movs	r0, #23
 2766              	.LVL322:
 2767 105e 5EE0     		b	.L15
 2768              	.LVL323:
 2769              	.L191:
 238:gcode.c       ****         command_words |= bit(word_bit);
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 72


 2770              		.loc 1 238 0
 2771 1060 1520     		movs	r0, #21
 2772              	.LVL324:
 2773 1062 5CE0     		b	.L15
 2774              	.LVL325:
 2775              	.L192:
 245:gcode.c       ****         switch(int_value) {
 2776              		.loc 1 245 0
 2777 1064 1720     		movs	r0, #23
 2778              	.LVL326:
 2779 1066 5AE0     		b	.L15
 2780              	.LVL327:
 2781              	.L193:
 282:gcode.c       ****         }
 2782              		.loc 1 282 0
 2783 1068 1420     		movs	r0, #20
 2784              	.LVL328:
 2785 106a 58E0     		b	.L15
 2786              	.LVL329:
 2787              	.L197:
 287:gcode.c       ****         command_words |= bit(word_bit);
 2788              		.loc 1 287 0
 2789 106c 1520     		movs	r0, #21
 2790              	.LVL330:
 2791 106e 56E0     		b	.L15
 2792              	.LVL331:
 2793              	.L198:
 321:gcode.c       ****         }
 2794              		.loc 1 321 0
 2795 1070 1420     		movs	r0, #20
 2796              	.LVL332:
 2797 1072 54E0     		b	.L15
 2798              	.LVL333:
 2799              	.L199:
 315:gcode.c       ****              gc_block.values.t = int_value;
 2800              		.loc 1 315 0
 2801 1074 2620     		movs	r0, #38
 2802 1076 52E0     		b	.L15
 2803              	.LVL334:
 2804              	.L200:
 325:gcode.c       ****         // Check for invalid negative values for words F, N, P, T, and S.
 2805              		.loc 1 325 0
 2806 1078 1920     		movs	r0, #25
 2807 107a 50E0     		b	.L15
 2808              	.LVL335:
 2809              	.L201:
 329:gcode.c       ****         }
 2810              		.loc 1 329 0
 2811 107c 0420     		movs	r0, #4
 2812 107e 4EE0     		b	.L15
 2813              	.LVL336:
 2814              	.L203:
 375:gcode.c       ****   }
 2815              		.loc 1 375 0
 2816 1080 1B20     		movs	r0, #27
 2817 1082 4CE0     		b	.L15
 2818              	.L204:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 73


 392:gcode.c       ****     if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 2819              		.loc 1 392 0
 2820 1084 1620     		movs	r0, #22
 2821 1086 4AE0     		b	.L15
 2822              	.L205:
 399:gcode.c       ****         }
 2823              		.loc 1 399 0
 2824 1088 1620     		movs	r0, #22
 2825 108a 48E0     		b	.L15
 2826              	.L265:
 2827              		.align	2
 2828              	.L264:
 2829 108c 00000000 		.word	gc_state
 2830 1090 00000000 		.word	gc_block
 2831 1094 10000000 		.word	gc_block+16
 2832 1098 28000000 		.word	gc_state+40
 2833 109c 34000000 		.word	gc_block+52
 2834 10a0 1C000000 		.word	gc_state+28
 2835 10a4 34000000 		.word	gc_state+52
 2836 10a8 00000000 		.word	sys
 2837              	.L206:
 441:gcode.c       ****     bit_false(value_words,bit(WORD_P));
 2838              		.loc 1 441 0
 2839 10ac 1C20     		movs	r0, #28
 2840 10ae 36E0     		b	.L15
 2841              	.LVL337:
 2842              	.L209:
 486:gcode.c       ****     }
 2843              		.loc 1 486 0
 2844 10b0 2520     		movs	r0, #37
 2845 10b2 34E0     		b	.L15
 2846              	.L210:
 498:gcode.c       ****     if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 2847              		.loc 1 498 0
 2848 10b4 1D20     		movs	r0, #29
 2849 10b6 32E0     		b	.L15
 2850              	.L211:
 500:gcode.c       ****     }
 2851              		.loc 1 500 0
 2852 10b8 0720     		movs	r0, #7
 2853 10ba 30E0     		b	.L15
 2854              	.L212:
 518:gcode.c       ****       if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSIN
 2855              		.loc 1 518 0
 2856 10bc 1A20     		movs	r0, #26
 2857 10be 2EE0     		b	.L15
 2858              	.L213:
 519:gcode.c       ****       coord_select = trunc(gc_block.values.p); // Convert p value to int.
 2859              		.loc 1 519 0
 2860 10c0 1C20     		movs	r0, #28
 2861 10c2 2CE0     		b	.L15
 2862              	.LVL338:
 2863              	.L214:
 521:gcode.c       ****       if (gc_block.values.l != 20) {
 2864              		.loc 1 521 0
 2865 10c4 1D20     		movs	r0, #29
 2866              	.LVL339:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 74


 2867 10c6 2AE0     		b	.L15
 2868              	.LVL340:
 2869              	.L215:
 525:gcode.c       ****       }
 2870              		.loc 1 525 0
 2871 10c8 1420     		movs	r0, #20
 2872              	.LVL341:
 2873 10ca 28E0     		b	.L15
 2874              	.LVL342:
 2875              	.L216:
 524:gcode.c       ****         } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported L]
 2876              		.loc 1 524 0
 2877 10cc 1420     		movs	r0, #20
 2878              	.LVL343:
 2879 10ce 26E0     		b	.L15
 2880              	.LVL344:
 2881              	.L217:
 534:gcode.c       **** 
 2882              		.loc 1 534 0
 2883 10d0 0720     		movs	r0, #7
 2884 10d2 24E0     		b	.L15
 2885              	.LVL345:
 2886              	.L218:
 554:gcode.c       **** 
 2887              		.loc 1 554 0
 2888 10d4 1A20     		movs	r0, #26
 2889 10d6 22E0     		b	.L15
 2890              	.LVL346:
 2891              	.L221:
 605:gcode.c       ****           } else { // == NON_MODAL_GO_HOME_1
 2892              		.loc 1 605 0
 2893 10d8 0720     		movs	r0, #7
 2894 10da 20E0     		b	.L15
 2895              	.L222:
 607:gcode.c       ****           }
 2896              		.loc 1 607 0
 2897 10dc 0720     		movs	r0, #7
 2898 10de 1EE0     		b	.L15
 2899              	.L224:
 630:gcode.c       ****           }
 2900              		.loc 1 630 0
 2901 10e0 1E20     		movs	r0, #30
 2902 10e2 1CE0     		b	.L15
 2903              	.LVL347:
 2904              	.L225:
 640:gcode.c       **** 
 2905              		.loc 1 640 0
 2906 10e4 1F20     		movs	r0, #31
 2907 10e6 1AE0     		b	.L15
 2908              	.L227:
 655:gcode.c       **** 
 2909              		.loc 1 655 0
 2910 10e8 1620     		movs	r0, #22
 2911 10ea 18E0     		b	.L15
 2912              	.L229:
 2913              	.LBB10:
 673:gcode.c       ****           if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 75


 2914              		.loc 1 673 0
 2915 10ec 1A20     		movs	r0, #26
 2916 10ee 16E0     		b	.L15
 2917              	.L230:
 674:gcode.c       **** 
 2918              		.loc 1 674 0
 2919 10f0 2020     		movs	r0, #32
 2920 10f2 14E0     		b	.L15
 2921              	.LVL348:
 2922              	.L231:
 2923              	.LBB5:
 683:gcode.c       **** 
 2924              		.loc 1 683 0
 2925 10f4 2120     		movs	r0, #33
 2926 10f6 12E0     		b	.L15
 2927              	.LVL349:
 2928              	.L232:
 739:gcode.c       **** 
 2929              		.loc 1 739 0
 2930 10f8 2220     		movs	r0, #34
 2931 10fa 10E0     		b	.L15
 2932              	.LVL350:
 2933              	.L233:
 2934              	.LBE5:
 2935              	.LBB6:
 774:gcode.c       ****             bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 2936              		.loc 1 774 0
 2937 10fc 2320     		movs	r0, #35
 2938              	.LVL351:
 2939 10fe 0EE0     		b	.L15
 2940              	.LVL352:
 2941              	.L235:
 795:gcode.c       ****               if (delta_r > (0.001*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [A
 2942              		.loc 1 795 0
 2943 1100 2120     		movs	r0, #33
 2944 1102 0CE0     		b	.L15
 2945              	.L236:
 796:gcode.c       ****             }
 2946              		.loc 1 796 0
 2947 1104 2120     		movs	r0, #33
 2948 1106 0AE0     		b	.L15
 2949              	.LVL353:
 2950              	.L237:
 2951              	.LBE6:
 809:gcode.c       ****           if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_
 2952              		.loc 1 809 0
 2953 1108 1A20     		movs	r0, #26
 2954 110a 08E0     		b	.L15
 2955              	.L238:
 810:gcode.c       ****           break;
 2956              		.loc 1 810 0
 2957 110c 2120     		movs	r0, #33
 2958 110e 06E0     		b	.L15
 2959              	.LVL354:
 2960              	.L239:
 2961              	.LBE10:
 827:gcode.c       **** 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 76


 2962              		.loc 1 827 0
 2963 1110 2420     		movs	r0, #36
 2964 1112 04E0     		b	.L15
 2965              	.LVL355:
 2966              	.L240:
 2967              	.LBB11:
 847:gcode.c       ****     if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE || gc_block.non_modal_command =
 2968              		.loc 1 847 0
 2969 1114 1020     		movs	r0, #16
 2970 1116 02E0     		b	.L15
 2971              	.L241:
 848:gcode.c       **** 
 2972              		.loc 1 848 0
 2973 1118 1020     		movs	r0, #16
 2974 111a 00E0     		b	.L15
 2975              	.L242:
 2976              	.LBE11:
1100:gcode.c       ****         system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 2977              		.loc 1 1100 0
 2978 111c 0720     		movs	r0, #7
 2979              	.LVL356:
 2980              	.L15:
1113:gcode.c       **** }
 2981              		.loc 1 1113 0
 2982 111e 19B0     		add	sp, sp, #100
 2983              		.cfi_def_cfa_offset 36
 2984              		@ sp needed
 2985 1120 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2986              		.cfi_endproc
 2987              	.LFE65:
 2988              		.size	gc_execute_line, .-gc_execute_line
 2989              		.comm	gc_block,64,4
 2990              		.comm	gc_state,68,4
 2991              		.comm	exec_lcd_status,1,1
 2992              		.comm	sys_rt_exec_debug,1,1
 2993              		.comm	sys_rt_exec_accessory_override,1,1
 2994              		.comm	sys_rt_exec_motion_override,1,1
 2995              		.comm	sys_rt_exec_alarm,1,1
 2996              		.comm	sys_rt_exec_state,1,1
 2997              		.comm	sys_probe_state,1,1
 2998              		.comm	sys_probe_position,12,4
 2999              		.comm	sys_position,12,4
 3000 1124 AFF30080 		.text
 3001              	.Letext0:
 3002              		.file 2 "d:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 3003              		.file 3 "d:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 3004              		.file 4 "d:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 3005              		.file 5 "settings.h"
 3006              		.file 6 "system.h"
 3007              		.file 7 "planner.h"
 3008              		.file 8 "gcode.h"
 3009              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 3010              		.file 10 "lcd_report.h"
 3011              		.file 11 "report.h"
 3012              		.file 12 "d:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9
 3013              		.file 13 "d:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9
 3014              		.file 14 "nuts_bolts.h"
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 77


 3015              		.file 15 "jog.h"
 3016              		.file 16 "motion_control.h"
 3017              		.file 17 "spindle_control.h"
 3018              		.file 18 "coolant_control.h"
 3019              		.file 19 "protocol.h"
 3020              		.section	.debug_info,"",%progbits
 3021              	.Ldebug_info0:
 3022 0000 4B0E0000 		.4byte	0xe4b
 3023 0004 0400     		.2byte	0x4
 3024 0006 00000000 		.4byte	.Ldebug_abbrev0
 3025 000a 04       		.byte	0x4
 3026 000b 01       		.uleb128 0x1
 3027 000c 5D060000 		.4byte	.LASF144
 3028 0010 01       		.byte	0x1
 3029 0011 6E000000 		.4byte	.LASF145
 3030 0015 DF020000 		.4byte	.LASF146
 3031 0019 68000000 		.4byte	.Ldebug_ranges0+0x68
 3032 001d 00000000 		.4byte	0
 3033 0021 00000000 		.4byte	.Ldebug_line0
 3034 0025 02       		.uleb128 0x2
 3035 0026 04       		.byte	0x4
 3036 0027 04       		.byte	0x4
 3037 0028 6F010000 		.4byte	.LASF0
 3038 002c 02       		.uleb128 0x2
 3039 002d 01       		.byte	0x1
 3040 002e 06       		.byte	0x6
 3041 002f 4F070000 		.4byte	.LASF1
 3042 0033 03       		.uleb128 0x3
 3043 0034 82050000 		.4byte	.LASF4
 3044 0038 02       		.byte	0x2
 3045 0039 1D       		.byte	0x1d
 3046 003a 3E000000 		.4byte	0x3e
 3047 003e 02       		.uleb128 0x2
 3048 003f 01       		.byte	0x1
 3049 0040 08       		.byte	0x8
 3050 0041 4F060000 		.4byte	.LASF2
 3051 0045 02       		.uleb128 0x2
 3052 0046 02       		.byte	0x2
 3053 0047 05       		.byte	0x5
 3054 0048 12050000 		.4byte	.LASF3
 3055 004c 03       		.uleb128 0x3
 3056 004d E7010000 		.4byte	.LASF5
 3057 0051 02       		.byte	0x2
 3058 0052 2B       		.byte	0x2b
 3059 0053 57000000 		.4byte	0x57
 3060 0057 02       		.uleb128 0x2
 3061 0058 02       		.byte	0x2
 3062 0059 07       		.byte	0x7
 3063 005a 71070000 		.4byte	.LASF6
 3064 005e 03       		.uleb128 0x3
 3065 005f 81000000 		.4byte	.LASF7
 3066 0063 02       		.byte	0x2
 3067 0064 3F       		.byte	0x3f
 3068 0065 69000000 		.4byte	0x69
 3069 0069 02       		.uleb128 0x2
 3070 006a 04       		.byte	0x4
 3071 006b 05       		.byte	0x5
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 78


 3072 006c 1C050000 		.4byte	.LASF8
 3073 0070 02       		.uleb128 0x2
 3074 0071 04       		.byte	0x4
 3075 0072 07       		.byte	0x7
 3076 0073 ED050000 		.4byte	.LASF9
 3077 0077 02       		.uleb128 0x2
 3078 0078 08       		.byte	0x8
 3079 0079 05       		.byte	0x5
 3080 007a 09040000 		.4byte	.LASF10
 3081 007e 02       		.uleb128 0x2
 3082 007f 08       		.byte	0x8
 3083 0080 07       		.byte	0x7
 3084 0081 AB010000 		.4byte	.LASF11
 3085 0085 04       		.uleb128 0x4
 3086 0086 04       		.byte	0x4
 3087 0087 05       		.byte	0x5
 3088 0088 696E7400 		.ascii	"int\000"
 3089 008c 02       		.uleb128 0x2
 3090 008d 04       		.byte	0x4
 3091 008e 07       		.byte	0x7
 3092 008f 55000000 		.4byte	.LASF12
 3093 0093 03       		.uleb128 0x3
 3094 0094 B8030000 		.4byte	.LASF13
 3095 0098 03       		.byte	0x3
 3096 0099 15       		.byte	0x15
 3097 009a 33000000 		.4byte	0x33
 3098 009e 03       		.uleb128 0x3
 3099 009f D7040000 		.4byte	.LASF14
 3100 00a3 03       		.byte	0x3
 3101 00a4 21       		.byte	0x21
 3102 00a5 4C000000 		.4byte	0x4c
 3103 00a9 03       		.uleb128 0x3
 3104 00aa 16060000 		.4byte	.LASF15
 3105 00ae 03       		.byte	0x3
 3106 00af 2C       		.byte	0x2c
 3107 00b0 5E000000 		.4byte	0x5e
 3108 00b4 02       		.uleb128 0x2
 3109 00b5 08       		.byte	0x8
 3110 00b6 04       		.byte	0x4
 3111 00b7 BA070000 		.4byte	.LASF16
 3112 00bb 02       		.uleb128 0x2
 3113 00bc 01       		.byte	0x1
 3114 00bd 08       		.byte	0x8
 3115 00be 28030000 		.4byte	.LASF17
 3116 00c2 03       		.uleb128 0x3
 3117 00c3 37020000 		.4byte	.LASF18
 3118 00c7 04       		.byte	0x4
 3119 00c8 D4       		.byte	0xd4
 3120 00c9 8C000000 		.4byte	0x8c
 3121 00cd 02       		.uleb128 0x2
 3122 00ce 04       		.byte	0x4
 3123 00cf 07       		.byte	0x7
 3124 00d0 E4050000 		.4byte	.LASF19
 3125 00d4 05       		.uleb128 0x5
 3126 00d5 04       		.byte	0x4
 3127 00d6 06       		.uleb128 0x6
 3128 00d7 04       		.byte	0x4
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 79


 3129 00d8 BB000000 		.4byte	0xbb
 3130 00dc 07       		.uleb128 0x7
 3131 00dd 93000000 		.4byte	0x93
 3132 00e1 02       		.uleb128 0x2
 3133 00e2 08       		.byte	0x8
 3134 00e3 04       		.byte	0x4
 3135 00e4 CB040000 		.4byte	.LASF20
 3136 00e8 08       		.uleb128 0x8
 3137 00e9 5C       		.byte	0x5c
 3138 00ea 05       		.byte	0x5
 3139 00eb 4F       		.byte	0x4f
 3140 00ec D5010000 		.4byte	0x1d5
 3141 00f0 09       		.uleb128 0x9
 3142 00f1 5B040000 		.4byte	.LASF21
 3143 00f5 05       		.byte	0x5
 3144 00f6 51       		.byte	0x51
 3145 00f7 D5010000 		.4byte	0x1d5
 3146 00fb 00       		.byte	0
 3147 00fc 09       		.uleb128 0x9
 3148 00fd E0040000 		.4byte	.LASF22
 3149 0101 05       		.byte	0x5
 3150 0102 52       		.byte	0x52
 3151 0103 D5010000 		.4byte	0x1d5
 3152 0107 0C       		.byte	0xc
 3153 0108 09       		.uleb128 0x9
 3154 0109 40010000 		.4byte	.LASF23
 3155 010d 05       		.byte	0x5
 3156 010e 53       		.byte	0x53
 3157 010f D5010000 		.4byte	0x1d5
 3158 0113 18       		.byte	0x18
 3159 0114 09       		.uleb128 0x9
 3160 0115 1D030000 		.4byte	.LASF24
 3161 0119 05       		.byte	0x5
 3162 011a 54       		.byte	0x54
 3163 011b D5010000 		.4byte	0x1d5
 3164 011f 24       		.byte	0x24
 3165 0120 09       		.uleb128 0x9
 3166 0121 00000000 		.4byte	.LASF25
 3167 0125 05       		.byte	0x5
 3168 0126 57       		.byte	0x57
 3169 0127 93000000 		.4byte	0x93
 3170 012b 30       		.byte	0x30
 3171 012c 09       		.uleb128 0x9
 3172 012d BA040000 		.4byte	.LASF26
 3173 0131 05       		.byte	0x5
 3174 0132 58       		.byte	0x58
 3175 0133 93000000 		.4byte	0x93
 3176 0137 31       		.byte	0x31
 3177 0138 09       		.uleb128 0x9
 3178 0139 2E080000 		.4byte	.LASF27
 3179 013d 05       		.byte	0x5
 3180 013e 59       		.byte	0x59
 3181 013f 93000000 		.4byte	0x93
 3182 0143 32       		.byte	0x32
 3183 0144 09       		.uleb128 0x9
 3184 0145 E7000000 		.4byte	.LASF28
 3185 0149 05       		.byte	0x5
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 80


 3186 014a 5A       		.byte	0x5a
 3187 014b 93000000 		.4byte	0x93
 3188 014f 33       		.byte	0x33
 3189 0150 09       		.uleb128 0x9
 3190 0151 42000000 		.4byte	.LASF29
 3191 0155 05       		.byte	0x5
 3192 0156 5B       		.byte	0x5b
 3193 0157 93000000 		.4byte	0x93
 3194 015b 34       		.byte	0x34
 3195 015c 09       		.uleb128 0x9
 3196 015d D1070000 		.4byte	.LASF30
 3197 0161 05       		.byte	0x5
 3198 0162 5C       		.byte	0x5c
 3199 0163 25000000 		.4byte	0x25
 3200 0167 38       		.byte	0x38
 3201 0168 09       		.uleb128 0x9
 3202 0169 04010000 		.4byte	.LASF31
 3203 016d 05       		.byte	0x5
 3204 016e 5D       		.byte	0x5d
 3205 016f 25000000 		.4byte	0x25
 3206 0173 3C       		.byte	0x3c
 3207 0174 09       		.uleb128 0x9
 3208 0175 40030000 		.4byte	.LASF32
 3209 0179 05       		.byte	0x5
 3210 017a 5F       		.byte	0x5f
 3211 017b 25000000 		.4byte	0x25
 3212 017f 40       		.byte	0x40
 3213 0180 09       		.uleb128 0x9
 3214 0181 84070000 		.4byte	.LASF33
 3215 0185 05       		.byte	0x5
 3216 0186 60       		.byte	0x60
 3217 0187 25000000 		.4byte	0x25
 3218 018b 44       		.byte	0x44
 3219 018c 09       		.uleb128 0x9
 3220 018d 34000000 		.4byte	.LASF34
 3221 0191 05       		.byte	0x5
 3222 0192 62       		.byte	0x62
 3223 0193 93000000 		.4byte	0x93
 3224 0197 48       		.byte	0x48
 3225 0198 09       		.uleb128 0x9
 3226 0199 C1070000 		.4byte	.LASF35
 3227 019d 05       		.byte	0x5
 3228 019e 64       		.byte	0x64
 3229 019f 93000000 		.4byte	0x93
 3230 01a3 49       		.byte	0x49
 3231 01a4 09       		.uleb128 0x9
 3232 01a5 5E010000 		.4byte	.LASF36
 3233 01a9 05       		.byte	0x5
 3234 01aa 65       		.byte	0x65
 3235 01ab 25000000 		.4byte	0x25
 3236 01af 4C       		.byte	0x4c
 3237 01b0 09       		.uleb128 0x9
 3238 01b1 4D010000 		.4byte	.LASF37
 3239 01b5 05       		.byte	0x5
 3240 01b6 66       		.byte	0x66
 3241 01b7 25000000 		.4byte	0x25
 3242 01bb 50       		.byte	0x50
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 81


 3243 01bc 09       		.uleb128 0x9
 3244 01bd 5B070000 		.4byte	.LASF38
 3245 01c1 05       		.byte	0x5
 3246 01c2 67       		.byte	0x67
 3247 01c3 9E000000 		.4byte	0x9e
 3248 01c7 54       		.byte	0x54
 3249 01c8 09       		.uleb128 0x9
 3250 01c9 23020000 		.4byte	.LASF39
 3251 01cd 05       		.byte	0x5
 3252 01ce 68       		.byte	0x68
 3253 01cf 25000000 		.4byte	0x25
 3254 01d3 58       		.byte	0x58
 3255 01d4 00       		.byte	0
 3256 01d5 0A       		.uleb128 0xa
 3257 01d6 25000000 		.4byte	0x25
 3258 01da E5010000 		.4byte	0x1e5
 3259 01de 0B       		.uleb128 0xb
 3260 01df CD000000 		.4byte	0xcd
 3261 01e3 02       		.byte	0x2
 3262 01e4 00       		.byte	0
 3263 01e5 03       		.uleb128 0x3
 3264 01e6 8C070000 		.4byte	.LASF40
 3265 01ea 05       		.byte	0x5
 3266 01eb 69       		.byte	0x69
 3267 01ec E8000000 		.4byte	0xe8
 3268 01f0 08       		.uleb128 0x8
 3269 01f1 14       		.byte	0x14
 3270 01f2 06       		.byte	0x6
 3271 01f3 80       		.byte	0x80
 3272 01f4 A1020000 		.4byte	0x2a1
 3273 01f8 09       		.uleb128 0x9
 3274 01f9 0D070000 		.4byte	.LASF41
 3275 01fd 06       		.byte	0x6
 3276 01fe 81       		.byte	0x81
 3277 01ff 93000000 		.4byte	0x93
 3278 0203 00       		.byte	0
 3279 0204 09       		.uleb128 0x9
 3280 0205 09020000 		.4byte	.LASF42
 3281 0209 06       		.byte	0x6
 3282 020a 82       		.byte	0x82
 3283 020b 93000000 		.4byte	0x93
 3284 020f 01       		.byte	0x1
 3285 0210 09       		.uleb128 0x9
 3286 0211 57020000 		.4byte	.LASF43
 3287 0215 06       		.byte	0x6
 3288 0216 83       		.byte	0x83
 3289 0217 93000000 		.4byte	0x93
 3290 021b 02       		.byte	0x2
 3291 021c 09       		.uleb128 0x9
 3292 021d 70050000 		.4byte	.LASF44
 3293 0221 06       		.byte	0x6
 3294 0222 84       		.byte	0x84
 3295 0223 93000000 		.4byte	0x93
 3296 0227 03       		.byte	0x3
 3297 0228 09       		.uleb128 0x9
 3298 0229 05050000 		.4byte	.LASF45
 3299 022d 06       		.byte	0x6
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 82


 3300 022e 85       		.byte	0x85
 3301 022f 93000000 		.4byte	0x93
 3302 0233 04       		.byte	0x4
 3303 0234 09       		.uleb128 0x9
 3304 0235 8C050000 		.4byte	.LASF46
 3305 0239 06       		.byte	0x6
 3306 023a 86       		.byte	0x86
 3307 023b 93000000 		.4byte	0x93
 3308 023f 05       		.byte	0x5
 3309 0240 09       		.uleb128 0x9
 3310 0241 FD070000 		.4byte	.LASF47
 3311 0245 06       		.byte	0x6
 3312 0246 87       		.byte	0x87
 3313 0247 93000000 		.4byte	0x93
 3314 024b 06       		.byte	0x6
 3315 024c 09       		.uleb128 0x9
 3316 024d C2010000 		.4byte	.LASF48
 3317 0251 06       		.byte	0x6
 3318 0252 88       		.byte	0x88
 3319 0253 93000000 		.4byte	0x93
 3320 0257 07       		.byte	0x7
 3321 0258 09       		.uleb128 0x9
 3322 0259 76000000 		.4byte	.LASF49
 3323 025d 06       		.byte	0x6
 3324 025e 89       		.byte	0x89
 3325 025f 93000000 		.4byte	0x93
 3326 0263 08       		.byte	0x8
 3327 0264 09       		.uleb128 0x9
 3328 0265 A6030000 		.4byte	.LASF50
 3329 0269 06       		.byte	0x6
 3330 026a 8A       		.byte	0x8a
 3331 026b 93000000 		.4byte	0x93
 3332 026f 09       		.byte	0x9
 3333 0270 09       		.uleb128 0x9
 3334 0271 F2010000 		.4byte	.LASF51
 3335 0275 06       		.byte	0x6
 3336 0276 8B       		.byte	0x8b
 3337 0277 93000000 		.4byte	0x93
 3338 027b 0A       		.byte	0xa
 3339 027c 09       		.uleb128 0x9
 3340 027d 6D030000 		.4byte	.LASF52
 3341 0281 06       		.byte	0x6
 3342 0282 8C       		.byte	0x8c
 3343 0283 93000000 		.4byte	0x93
 3344 0287 0B       		.byte	0xb
 3345 0288 09       		.uleb128 0x9
 3346 0289 45050000 		.4byte	.LASF53
 3347 028d 06       		.byte	0x6
 3348 028e 8D       		.byte	0x8d
 3349 028f 93000000 		.4byte	0x93
 3350 0293 0C       		.byte	0xc
 3351 0294 09       		.uleb128 0x9
 3352 0295 51030000 		.4byte	.LASF54
 3353 0299 06       		.byte	0x6
 3354 029a 8F       		.byte	0x8f
 3355 029b 25000000 		.4byte	0x25
 3356 029f 10       		.byte	0x10
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 83


 3357 02a0 00       		.byte	0
 3358 02a1 03       		.uleb128 0x3
 3359 02a2 32050000 		.4byte	.LASF55
 3360 02a6 06       		.byte	0x6
 3361 02a7 91       		.byte	0x91
 3362 02a8 F0010000 		.4byte	0x1f0
 3363 02ac 08       		.uleb128 0x8
 3364 02ad 0C       		.byte	0xc
 3365 02ae 07       		.byte	0x7
 3366 02af 5C       		.byte	0x5c
 3367 02b0 D9020000 		.4byte	0x2d9
 3368 02b4 09       		.uleb128 0x9
 3369 02b5 3B050000 		.4byte	.LASF56
 3370 02b9 07       		.byte	0x7
 3371 02ba 5D       		.byte	0x5d
 3372 02bb 25000000 		.4byte	0x25
 3373 02bf 00       		.byte	0
 3374 02c0 09       		.uleb128 0x9
 3375 02c1 51030000 		.4byte	.LASF54
 3376 02c5 07       		.byte	0x7
 3377 02c6 5E       		.byte	0x5e
 3378 02c7 25000000 		.4byte	0x25
 3379 02cb 04       		.byte	0x4
 3380 02cc 09       		.uleb128 0x9
 3381 02cd 0E080000 		.4byte	.LASF57
 3382 02d1 07       		.byte	0x7
 3383 02d2 5F       		.byte	0x5f
 3384 02d3 93000000 		.4byte	0x93
 3385 02d7 08       		.byte	0x8
 3386 02d8 00       		.byte	0
 3387 02d9 03       		.uleb128 0x3
 3388 02da 90010000 		.4byte	.LASF58
 3389 02de 07       		.byte	0x7
 3390 02df 63       		.byte	0x63
 3391 02e0 AC020000 		.4byte	0x2ac
 3392 02e4 08       		.uleb128 0x8
 3393 02e5 0A       		.byte	0xa
 3394 02e6 08       		.byte	0x8
 3395 02e7 B1       		.byte	0xb1
 3396 02e8 65030000 		.4byte	0x365
 3397 02ec 09       		.uleb128 0x9
 3398 02ed DD050000 		.4byte	.LASF59
 3399 02f1 08       		.byte	0x8
 3400 02f2 B2       		.byte	0xb2
 3401 02f3 93000000 		.4byte	0x93
 3402 02f7 00       		.byte	0
 3403 02f8 09       		.uleb128 0x9
 3404 02f9 3B050000 		.4byte	.LASF56
 3405 02fd 08       		.byte	0x8
 3406 02fe B3       		.byte	0xb3
 3407 02ff 93000000 		.4byte	0x93
 3408 0303 01       		.byte	0x1
 3409 0304 09       		.uleb128 0x9
 3410 0305 43070000 		.4byte	.LASF60
 3411 0309 08       		.byte	0x8
 3412 030a B4       		.byte	0xb4
 3413 030b 93000000 		.4byte	0x93
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 84


 3414 030f 02       		.byte	0x2
 3415 0310 09       		.uleb128 0x9
 3416 0311 13000000 		.4byte	.LASF61
 3417 0315 08       		.byte	0x8
 3418 0316 B5       		.byte	0xb5
 3419 0317 93000000 		.4byte	0x93
 3420 031b 03       		.byte	0x3
 3421 031c 09       		.uleb128 0x9
 3422 031d 5F020000 		.4byte	.LASF62
 3423 0321 08       		.byte	0x8
 3424 0322 B7       		.byte	0xb7
 3425 0323 93000000 		.4byte	0x93
 3426 0327 04       		.byte	0x4
 3427 0328 09       		.uleb128 0x9
 3428 0329 17020000 		.4byte	.LASF63
 3429 032d 08       		.byte	0x8
 3430 032e B9       		.byte	0xb9
 3431 032f 93000000 		.4byte	0x93
 3432 0333 05       		.byte	0x5
 3433 0334 09       		.uleb128 0x9
 3434 0335 C0020000 		.4byte	.LASF64
 3435 0339 08       		.byte	0x8
 3436 033a BA       		.byte	0xba
 3437 033b 93000000 		.4byte	0x93
 3438 033f 06       		.byte	0x6
 3439 0340 09       		.uleb128 0x9
 3440 0341 27000000 		.4byte	.LASF65
 3441 0345 08       		.byte	0x8
 3442 0346 BC       		.byte	0xbc
 3443 0347 93000000 		.4byte	0x93
 3444 034b 07       		.byte	0x7
 3445 034c 09       		.uleb128 0x9
 3446 034d 0F020000 		.4byte	.LASF66
 3447 0351 08       		.byte	0x8
 3448 0352 BD       		.byte	0xbd
 3449 0353 93000000 		.4byte	0x93
 3450 0357 08       		.byte	0x8
 3451 0358 09       		.uleb128 0x9
 3452 0359 1E010000 		.4byte	.LASF67
 3453 035d 08       		.byte	0x8
 3454 035e BE       		.byte	0xbe
 3455 035f 93000000 		.4byte	0x93
 3456 0363 09       		.byte	0x9
 3457 0364 00       		.byte	0
 3458 0365 03       		.uleb128 0x3
 3459 0366 2B070000 		.4byte	.LASF68
 3460 036a 08       		.byte	0x8
 3461 036b BF       		.byte	0xbf
 3462 036c E4020000 		.4byte	0x2e4
 3463 0370 08       		.uleb128 0x8
 3464 0371 34       		.byte	0x34
 3465 0372 08       		.byte	0x8
 3466 0373 C1       		.byte	0xc1
 3467 0374 D7030000 		.4byte	0x3d7
 3468 0378 0C       		.uleb128 0xc
 3469 0379 6600     		.ascii	"f\000"
 3470 037b 08       		.byte	0x8
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 85


 3471 037c C2       		.byte	0xc2
 3472 037d 25000000 		.4byte	0x25
 3473 0381 00       		.byte	0
 3474 0382 0C       		.uleb128 0xc
 3475 0383 696A6B00 		.ascii	"ijk\000"
 3476 0387 08       		.byte	0x8
 3477 0388 C3       		.byte	0xc3
 3478 0389 D5010000 		.4byte	0x1d5
 3479 038d 04       		.byte	0x4
 3480 038e 0C       		.uleb128 0xc
 3481 038f 6C00     		.ascii	"l\000"
 3482 0391 08       		.byte	0x8
 3483 0392 C4       		.byte	0xc4
 3484 0393 93000000 		.4byte	0x93
 3485 0397 10       		.byte	0x10
 3486 0398 0C       		.uleb128 0xc
 3487 0399 6E00     		.ascii	"n\000"
 3488 039b 08       		.byte	0x8
 3489 039c C5       		.byte	0xc5
 3490 039d A9000000 		.4byte	0xa9
 3491 03a1 14       		.byte	0x14
 3492 03a2 0C       		.uleb128 0xc
 3493 03a3 7000     		.ascii	"p\000"
 3494 03a5 08       		.byte	0x8
 3495 03a6 C6       		.byte	0xc6
 3496 03a7 25000000 		.4byte	0x25
 3497 03ab 18       		.byte	0x18
 3498 03ac 0C       		.uleb128 0xc
 3499 03ad 7200     		.ascii	"r\000"
 3500 03af 08       		.byte	0x8
 3501 03b0 C8       		.byte	0xc8
 3502 03b1 25000000 		.4byte	0x25
 3503 03b5 1C       		.byte	0x1c
 3504 03b6 0C       		.uleb128 0xc
 3505 03b7 7300     		.ascii	"s\000"
 3506 03b9 08       		.byte	0x8
 3507 03ba C9       		.byte	0xc9
 3508 03bb 25000000 		.4byte	0x25
 3509 03bf 20       		.byte	0x20
 3510 03c0 0C       		.uleb128 0xc
 3511 03c1 7400     		.ascii	"t\000"
 3512 03c3 08       		.byte	0x8
 3513 03c4 CA       		.byte	0xca
 3514 03c5 93000000 		.4byte	0x93
 3515 03c9 24       		.byte	0x24
 3516 03ca 0C       		.uleb128 0xc
 3517 03cb 78797A00 		.ascii	"xyz\000"
 3518 03cf 08       		.byte	0x8
 3519 03d0 CB       		.byte	0xcb
 3520 03d1 D5010000 		.4byte	0x1d5
 3521 03d5 28       		.byte	0x28
 3522 03d6 00       		.byte	0
 3523 03d7 03       		.uleb128 0x3
 3524 03d8 9A030000 		.4byte	.LASF69
 3525 03dc 08       		.byte	0x8
 3526 03dd CC       		.byte	0xcc
 3527 03de 70030000 		.4byte	0x370
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 86


 3528 03e2 08       		.uleb128 0x8
 3529 03e3 44       		.byte	0x44
 3530 03e4 08       		.byte	0x8
 3531 03e5 CF       		.byte	0xcf
 3532 03e6 57040000 		.4byte	0x457
 3533 03ea 09       		.uleb128 0x9
 3534 03eb FE000000 		.4byte	.LASF70
 3535 03ef 08       		.byte	0x8
 3536 03f0 D0       		.byte	0xd0
 3537 03f1 65030000 		.4byte	0x365
 3538 03f5 00       		.byte	0
 3539 03f6 09       		.uleb128 0x9
 3540 03f7 51030000 		.4byte	.LASF54
 3541 03fb 08       		.byte	0x8
 3542 03fc D2       		.byte	0xd2
 3543 03fd 25000000 		.4byte	0x25
 3544 0401 0C       		.byte	0xc
 3545 0402 09       		.uleb128 0x9
 3546 0403 3B050000 		.4byte	.LASF56
 3547 0407 08       		.byte	0x8
 3548 0408 D3       		.byte	0xd3
 3549 0409 25000000 		.4byte	0x25
 3550 040d 10       		.byte	0x10
 3551 040e 09       		.uleb128 0x9
 3552 040f 32020000 		.4byte	.LASF71
 3553 0413 08       		.byte	0x8
 3554 0414 D4       		.byte	0xd4
 3555 0415 93000000 		.4byte	0x93
 3556 0419 14       		.byte	0x14
 3557 041a 09       		.uleb128 0x9
 3558 041b 6F040000 		.4byte	.LASF72
 3559 041f 08       		.byte	0x8
 3560 0420 D5       		.byte	0xd5
 3561 0421 A9000000 		.4byte	0xa9
 3562 0425 18       		.byte	0x18
 3563 0426 09       		.uleb128 0x9
 3564 0427 25080000 		.4byte	.LASF73
 3565 042b 08       		.byte	0x8
 3566 042c D7       		.byte	0xd7
 3567 042d D5010000 		.4byte	0x1d5
 3568 0431 1C       		.byte	0x1c
 3569 0432 09       		.uleb128 0x9
 3570 0433 32040000 		.4byte	.LASF74
 3571 0437 08       		.byte	0x8
 3572 0438 D9       		.byte	0xd9
 3573 0439 D5010000 		.4byte	0x1d5
 3574 043d 28       		.byte	0x28
 3575 043e 09       		.uleb128 0x9
 3576 043f 1E060000 		.4byte	.LASF75
 3577 0443 08       		.byte	0x8
 3578 0444 DB       		.byte	0xdb
 3579 0445 D5010000 		.4byte	0x1d5
 3580 0449 34       		.byte	0x34
 3581 044a 09       		.uleb128 0x9
 3582 044b 2D030000 		.4byte	.LASF76
 3583 044f 08       		.byte	0x8
 3584 0450 DD       		.byte	0xdd
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 87


 3585 0451 25000000 		.4byte	0x25
 3586 0455 40       		.byte	0x40
 3587 0456 00       		.byte	0
 3588 0457 03       		.uleb128 0x3
 3589 0458 C7030000 		.4byte	.LASF77
 3590 045c 08       		.byte	0x8
 3591 045d DE       		.byte	0xde
 3592 045e E2030000 		.4byte	0x3e2
 3593 0462 08       		.uleb128 0x8
 3594 0463 40       		.byte	0x40
 3595 0464 08       		.byte	0x8
 3596 0465 E2       		.byte	0xe2
 3597 0466 8F040000 		.4byte	0x48f
 3598 046a 09       		.uleb128 0x9
 3599 046b A8040000 		.4byte	.LASF78
 3600 046f 08       		.byte	0x8
 3601 0470 E3       		.byte	0xe3
 3602 0471 93000000 		.4byte	0x93
 3603 0475 00       		.byte	0
 3604 0476 09       		.uleb128 0x9
 3605 0477 FE000000 		.4byte	.LASF70
 3606 047b 08       		.byte	0x8
 3607 047c E4       		.byte	0xe4
 3608 047d 65030000 		.4byte	0x365
 3609 0481 01       		.byte	0x1
 3610 0482 09       		.uleb128 0x9
 3611 0483 84040000 		.4byte	.LASF79
 3612 0487 08       		.byte	0x8
 3613 0488 E5       		.byte	0xe5
 3614 0489 D7030000 		.4byte	0x3d7
 3615 048d 0C       		.byte	0xc
 3616 048e 00       		.byte	0
 3617 048f 03       		.uleb128 0x3
 3618 0490 CE050000 		.4byte	.LASF80
 3619 0494 08       		.byte	0x8
 3620 0495 E6       		.byte	0xe6
 3621 0496 62040000 		.4byte	0x462
 3622 049a 0D       		.uleb128 0xd
 3623 049b 2A040000 		.4byte	.LASF81
 3624 049f 01       		.byte	0x1
 3625 04a0 2A       		.byte	0x2a
 3626 04a1 00000000 		.4byte	.LFB63
 3627 04a5 28000000 		.4byte	.LFE63-.LFB63
 3628 04a9 01       		.uleb128 0x1
 3629 04aa 9C       		.byte	0x9c
 3630 04ab F7040000 		.4byte	0x4f7
 3631 04af 0E       		.uleb128 0xe
 3632 04b0 0E000000 		.4byte	.LVL0
 3633 04b4 F60B0000 		.4byte	0xbf6
 3634 04b8 CE040000 		.4byte	0x4ce
 3635 04bc 0F       		.uleb128 0xf
 3636 04bd 01       		.uleb128 0x1
 3637 04be 52       		.byte	0x52
 3638 04bf 02       		.uleb128 0x2
 3639 04c0 08       		.byte	0x8
 3640 04c1 44       		.byte	0x44
 3641 04c2 0F       		.uleb128 0xf
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 88


 3642 04c3 01       		.uleb128 0x1
 3643 04c4 51       		.byte	0x51
 3644 04c5 01       		.uleb128 0x1
 3645 04c6 30       		.byte	0x30
 3646 04c7 0F       		.uleb128 0xf
 3647 04c8 01       		.uleb128 0x1
 3648 04c9 50       		.byte	0x50
 3649 04ca 02       		.uleb128 0x2
 3650 04cb 74       		.byte	0x74
 3651 04cc 00       		.sleb128 0
 3652 04cd 00       		.byte	0
 3653 04ce 0E       		.uleb128 0xe
 3654 04cf 18000000 		.4byte	.LVL1
 3655 04d3 130C0000 		.4byte	0xc13
 3656 04d7 E7040000 		.4byte	0x4e7
 3657 04db 0F       		.uleb128 0xf
 3658 04dc 01       		.uleb128 0x1
 3659 04dd 51       		.byte	0x51
 3660 04de 02       		.uleb128 0x2
 3661 04df 74       		.byte	0x74
 3662 04e0 28       		.sleb128 40
 3663 04e1 0F       		.uleb128 0xf
 3664 04e2 01       		.uleb128 0x1
 3665 04e3 50       		.byte	0x50
 3666 04e4 01       		.uleb128 0x1
 3667 04e5 30       		.byte	0x30
 3668 04e6 00       		.byte	0
 3669 04e7 10       		.uleb128 0x10
 3670 04e8 20000000 		.4byte	.LVL2
 3671 04ec 330C0000 		.4byte	0xc33
 3672 04f0 0F       		.uleb128 0xf
 3673 04f1 01       		.uleb128 0x1
 3674 04f2 50       		.byte	0x50
 3675 04f3 01       		.uleb128 0x1
 3676 04f4 37       		.byte	0x37
 3677 04f5 00       		.byte	0
 3678 04f6 00       		.byte	0
 3679 04f7 0D       		.uleb128 0xd
 3680 04f8 80030000 		.4byte	.LASF82
 3681 04fc 01       		.byte	0x1
 3682 04fd 37       		.byte	0x37
 3683 04fe 00000000 		.4byte	.LFB64
 3684 0502 14000000 		.4byte	.LFE64-.LFB64
 3685 0506 01       		.uleb128 0x1
 3686 0507 9C       		.byte	0x9c
 3687 0508 29050000 		.4byte	0x529
 3688 050c 10       		.uleb128 0x10
 3689 050d 0A000000 		.4byte	.LVL3
 3690 0511 440C0000 		.4byte	0xc44
 3691 0515 0F       		.uleb128 0xf
 3692 0516 01       		.uleb128 0x1
 3693 0517 51       		.byte	0x51
 3694 0518 05       		.uleb128 0x5
 3695 0519 03       		.byte	0x3
 3696 051a 00000000 		.4byte	sys_position
 3697 051e 0F       		.uleb128 0xf
 3698 051f 01       		.uleb128 0x1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 89


 3699 0520 50       		.byte	0x50
 3700 0521 05       		.uleb128 0x5
 3701 0522 03       		.byte	0x3
 3702 0523 1C000000 		.4byte	gc_state+28
 3703 0527 00       		.byte	0
 3704 0528 00       		.byte	0
 3705 0529 11       		.uleb128 0x11
 3706 052a 98040000 		.4byte	.LASF147
 3707 052e 01       		.byte	0x1
 3708 052f 42       		.byte	0x42
 3709 0530 93000000 		.4byte	0x93
 3710 0534 00000000 		.4byte	.LFB65
 3711 0538 24110000 		.4byte	.LFE65-.LFB65
 3712 053c 01       		.uleb128 0x1
 3713 053d 9C       		.byte	0x9c
 3714 053e FE0A0000 		.4byte	0xafe
 3715 0542 12       		.uleb128 0x12
 3716 0543 EB060000 		.4byte	.LASF148
 3717 0547 01       		.byte	0x1
 3718 0548 42       		.byte	0x42
 3719 0549 D6000000 		.4byte	0xd6
 3720 054d 00000000 		.4byte	.LLST0
 3721 0551 13       		.uleb128 0x13
 3722 0552 36070000 		.4byte	.LASF83
 3723 0556 01       		.byte	0x1
 3724 0557 4E       		.byte	0x4e
 3725 0558 93000000 		.4byte	0x93
 3726 055c 77000000 		.4byte	.LLST1
 3727 0560 13       		.uleb128 0x13
 3728 0561 2B060000 		.4byte	.LASF84
 3729 0565 01       		.byte	0x1
 3730 0566 4F       		.byte	0x4f
 3731 0567 93000000 		.4byte	0x93
 3732 056b E4000000 		.4byte	.LLST2
 3733 056f 13       		.uleb128 0x13
 3734 0570 32060000 		.4byte	.LASF85
 3735 0574 01       		.byte	0x1
 3736 0575 4F       		.byte	0x4f
 3737 0576 93000000 		.4byte	0x93
 3738 057a 0E010000 		.4byte	.LLST3
 3739 057e 13       		.uleb128 0x13
 3740 057f 12010000 		.4byte	.LASF86
 3741 0583 01       		.byte	0x1
 3742 0584 4F       		.byte	0x4f
 3743 0585 93000000 		.4byte	0x93
 3744 0589 3C010000 		.4byte	.LLST4
 3745 058d 13       		.uleb128 0x13
 3746 058e C0020000 		.4byte	.LASF64
 3747 0592 01       		.byte	0x1
 3748 0593 50       		.byte	0x50
 3749 0594 93000000 		.4byte	0x93
 3750 0598 6A010000 		.4byte	.LLST5
 3751 059c 13       		.uleb128 0x13
 3752 059d AF070000 		.4byte	.LASF87
 3753 05a1 01       		.byte	0x1
 3754 05a2 53       		.byte	0x53
 3755 05a3 93000000 		.4byte	0x93
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 90


 3756 05a7 27020000 		.4byte	.LLST6
 3757 05ab 13       		.uleb128 0x13
 3758 05ac A1010000 		.4byte	.LASF88
 3759 05b0 01       		.byte	0x1
 3760 05b1 54       		.byte	0x54
 3761 05b2 93000000 		.4byte	0x93
 3762 05b6 48020000 		.4byte	.LLST7
 3763 05ba 13       		.uleb128 0x13
 3764 05bb 62050000 		.4byte	.LASF89
 3765 05bf 01       		.byte	0x1
 3766 05c0 57       		.byte	0x57
 3767 05c1 9E000000 		.4byte	0x9e
 3768 05c5 69020000 		.4byte	.LLST8
 3769 05c9 13       		.uleb128 0x13
 3770 05ca 62000000 		.4byte	.LASF90
 3771 05ce 01       		.byte	0x1
 3772 05cf 58       		.byte	0x58
 3773 05d0 9E000000 		.4byte	0x9e
 3774 05d4 9E020000 		.4byte	.LLST9
 3775 05d8 13       		.uleb128 0x13
 3776 05d9 D6030000 		.4byte	.LASF91
 3777 05dd 01       		.byte	0x1
 3778 05de 59       		.byte	0x59
 3779 05df 93000000 		.4byte	0x93
 3780 05e3 36030000 		.4byte	.LLST10
 3781 05e7 13       		.uleb128 0x13
 3782 05e8 91030000 		.4byte	.LASF92
 3783 05ec 01       		.byte	0x1
 3784 05ed 6C       		.byte	0x6c
 3785 05ee 93000000 		.4byte	0x93
 3786 05f2 6D030000 		.4byte	.LLST11
 3787 05f6 14       		.uleb128 0x14
 3788 05f7 18080000 		.4byte	.LASF93
 3789 05fb 01       		.byte	0x1
 3790 05fc 6D       		.byte	0x6d
 3791 05fd 93000000 		.4byte	0x93
 3792 0601 02       		.uleb128 0x2
 3793 0602 91       		.byte	0x91
 3794 0603 57       		.sleb128 -41
 3795 0604 13       		.uleb128 0x13
 3796 0605 6C020000 		.4byte	.LASF94
 3797 0609 01       		.byte	0x1
 3798 060a 6E       		.byte	0x6e
 3799 060b BB000000 		.4byte	0xbb
 3800 060f 73050000 		.4byte	.LLST12
 3801 0613 14       		.uleb128 0x14
 3802 0614 03020000 		.4byte	.LASF95
 3803 0618 01       		.byte	0x1
 3804 0619 6F       		.byte	0x6f
 3805 061a 25000000 		.4byte	0x25
 3806 061e 02       		.uleb128 0x2
 3807 061f 91       		.byte	0x91
 3808 0620 50       		.sleb128 -48
 3809 0621 13       		.uleb128 0x13
 3810 0622 58050000 		.4byte	.LASF96
 3811 0626 01       		.byte	0x1
 3812 0627 70       		.byte	0x70
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 91


 3813 0628 93000000 		.4byte	0x93
 3814 062c 91050000 		.4byte	.LLST13
 3815 0630 13       		.uleb128 0x13
 3816 0631 DE000000 		.4byte	.LASF97
 3817 0635 01       		.byte	0x1
 3818 0636 71       		.byte	0x71
 3819 0637 9E000000 		.4byte	0x9e
 3820 063b 30060000 		.4byte	.LLST14
 3821 063f 15       		.uleb128 0x15
 3822 0640 69647800 		.ascii	"idx\000"
 3823 0644 01       		.byte	0x1
 3824 0645 D101     		.2byte	0x1d1
 3825 0647 93000000 		.4byte	0x93
 3826 064b 64070000 		.4byte	.LLST15
 3827 064f 16       		.uleb128 0x16
 3828 0650 BB050000 		.4byte	.LASF98
 3829 0654 01       		.byte	0x1
 3830 0655 EF01     		.2byte	0x1ef
 3831 0657 D5010000 		.4byte	0x1d5
 3832 065b 02       		.uleb128 0x2
 3833 065c 91       		.byte	0x91
 3834 065d 44       		.sleb128 -60
 3835 065e 16       		.uleb128 0x16
 3836 065f 45060000 		.4byte	.LASF99
 3837 0663 01       		.byte	0x1
 3838 0664 4403     		.2byte	0x344
 3839 0666 D9020000 		.4byte	0x2d9
 3840 066a 03       		.uleb128 0x3
 3841 066b 91       		.byte	0x91
 3842 066c B87F     		.sleb128 -72
 3843 066e 17       		.uleb128 0x17
 3844 066f 3A000000 		.4byte	.LASF100
 3845 0673 01       		.byte	0x1
 3846 0674 4503     		.2byte	0x345
 3847 0676 FE0A0000 		.4byte	0xafe
 3848 067a 1C080000 		.4byte	.LLST16
 3849 067e 18       		.uleb128 0x18
 3850 067f 00000000 		.4byte	.Ldebug_ranges0+0
 3851 0683 73070000 		.4byte	0x773
 3852 0687 15       		.uleb128 0x15
 3853 0688 7800     		.ascii	"x\000"
 3854 068a 01       		.byte	0x1
 3855 068b A502     		.2byte	0x2a5
 3856 068d 25000000 		.4byte	0x25
 3857 0691 08090000 		.4byte	.LLST17
 3858 0695 15       		.uleb128 0x15
 3859 0696 7900     		.ascii	"y\000"
 3860 0698 01       		.byte	0x1
 3861 0699 A502     		.2byte	0x2a5
 3862 069b 25000000 		.4byte	0x25
 3863 069f 4B090000 		.4byte	.LLST18
 3864 06a3 18       		.uleb128 0x18
 3865 06a4 20000000 		.4byte	.Ldebug_ranges0+0x20
 3866 06a8 09070000 		.4byte	0x709
 3867 06ac 17       		.uleb128 0x17
 3868 06ad 97070000 		.4byte	.LASF101
 3869 06b1 01       		.byte	0x1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 92


 3870 06b2 E102     		.2byte	0x2e1
 3871 06b4 25000000 		.4byte	0x25
 3872 06b8 D6090000 		.4byte	.LLST19
 3873 06bc 0E       		.uleb128 0xe
 3874 06bd D8090000 		.4byte	.LVL173
 3875 06c1 600C0000 		.4byte	0xc60
 3876 06c5 E1060000 		.4byte	0x6e1
 3877 06c9 0F       		.uleb128 0xf
 3878 06ca 01       		.uleb128 0x1
 3879 06cb 52       		.byte	0x52
 3880 06cc 01       		.uleb128 0x1
 3881 06cd 3C       		.byte	0x3c
 3882 06ce 0F       		.uleb128 0xf
 3883 06cf 01       		.uleb128 0x1
 3884 06d0 51       		.byte	0x51
 3885 06d1 05       		.uleb128 0x5
 3886 06d2 03       		.byte	0x3
 3887 06d3 34000000 		.4byte	gc_block+52
 3888 06d7 0F       		.uleb128 0xf
 3889 06d8 01       		.uleb128 0x1
 3890 06d9 50       		.byte	0x50
 3891 06da 05       		.uleb128 0x5
 3892 06db 03       		.byte	0x3
 3893 06dc 1C000000 		.4byte	gc_state+28
 3894 06e0 00       		.byte	0
 3895 06e1 19       		.uleb128 0x19
 3896 06e2 720A0000 		.4byte	.LVL190
 3897 06e6 860C0000 		.4byte	0xc86
 3898 06ea 10       		.uleb128 0x10
 3899 06eb 800A0000 		.4byte	.LVL192
 3900 06ef 9B0C0000 		.4byte	0xc9b
 3901 06f3 0F       		.uleb128 0xf
 3902 06f4 01       		.uleb128 0x1
 3903 06f5 51       		.byte	0x51
 3904 06f6 06       		.uleb128 0x6
 3905 06f7 91       		.byte	0x91
 3906 06f8 B07F     		.sleb128 -80
 3907 06fa F6       		.byte	0xf6
 3908 06fb 04       		.byte	0x4
 3909 06fc 25       		.uleb128 0x25
 3910 06fd 0F       		.uleb128 0xf
 3911 06fe 01       		.uleb128 0x1
 3912 06ff 50       		.byte	0x50
 3913 0700 06       		.uleb128 0x6
 3914 0701 91       		.byte	0x91
 3915 0702 AC7F     		.sleb128 -84
 3916 0704 F6       		.byte	0xf6
 3917 0705 04       		.byte	0x4
 3918 0706 25       		.uleb128 0x25
 3919 0707 00       		.byte	0
 3920 0708 00       		.byte	0
 3921 0709 18       		.uleb128 0x18
 3922 070a 38000000 		.4byte	.Ldebug_ranges0+0x38
 3923 070e 51070000 		.4byte	0x751
 3924 0712 17       		.uleb128 0x17
 3925 0713 48030000 		.4byte	.LASF102
 3926 0717 01       		.byte	0x1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 93


 3927 0718 1303     		.2byte	0x313
 3928 071a 25000000 		.4byte	0x25
 3929 071e 150A0000 		.4byte	.LLST20
 3930 0722 17       		.uleb128 0x17
 3931 0723 E6030000 		.4byte	.LASF103
 3932 0727 01       		.byte	0x1
 3933 0728 1903     		.2byte	0x319
 3934 072a 25000000 		.4byte	0x25
 3935 072e 330A0000 		.4byte	.LLST21
 3936 0732 0E       		.uleb128 0xe
 3937 0733 A40B0000 		.4byte	.LVL225
 3938 0737 9B0C0000 		.4byte	0xc9b
 3939 073b 47070000 		.4byte	0x747
 3940 073f 0F       		.uleb128 0xf
 3941 0740 01       		.uleb128 0x1
 3942 0741 50       		.byte	0x50
 3943 0742 03       		.uleb128 0x3
 3944 0743 F5       		.byte	0xf5
 3945 0744 08       		.uleb128 0x8
 3946 0745 25       		.uleb128 0x25
 3947 0746 00       		.byte	0
 3948 0747 19       		.uleb128 0x19
 3949 0748 B00B0000 		.4byte	.LVL228
 3950 074c 9B0C0000 		.4byte	0xc9b
 3951 0750 00       		.byte	0
 3952 0751 10       		.uleb128 0x10
 3953 0752 300C0000 		.4byte	.LVL241
 3954 0756 600C0000 		.4byte	0xc60
 3955 075a 0F       		.uleb128 0xf
 3956 075b 01       		.uleb128 0x1
 3957 075c 52       		.byte	0x52
 3958 075d 01       		.uleb128 0x1
 3959 075e 3C       		.byte	0x3c
 3960 075f 0F       		.uleb128 0xf
 3961 0760 01       		.uleb128 0x1
 3962 0761 51       		.byte	0x51
 3963 0762 05       		.uleb128 0x5
 3964 0763 03       		.byte	0x3
 3965 0764 34000000 		.4byte	gc_block+52
 3966 0768 0F       		.uleb128 0xf
 3967 0769 01       		.uleb128 0x1
 3968 076a 50       		.byte	0x50
 3969 076b 05       		.uleb128 0x5
 3970 076c 03       		.byte	0x3
 3971 076d 1C000000 		.4byte	gc_state+28
 3972 0771 00       		.byte	0
 3973 0772 00       		.byte	0
 3974 0773 18       		.uleb128 0x18
 3975 0774 50000000 		.4byte	.Ldebug_ranges0+0x50
 3976 0778 A7070000 		.4byte	0x7a7
 3977 077c 17       		.uleb128 0x17
 3978 077d C0030000 		.4byte	.LASF104
 3979 0781 01       		.byte	0x1
 3980 0782 5603     		.2byte	0x356
 3981 0784 93000000 		.4byte	0x93
 3982 0788 510A0000 		.4byte	.LLST22
 3983 078c 10       		.uleb128 0x10
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 94


 3984 078d A40C0000 		.4byte	.LVL254
 3985 0791 B50C0000 		.4byte	0xcb5
 3986 0795 0F       		.uleb128 0xf
 3987 0796 01       		.uleb128 0x1
 3988 0797 51       		.byte	0x51
 3989 0798 05       		.uleb128 0x5
 3990 0799 03       		.byte	0x3
 3991 079a 00000000 		.4byte	gc_block
 3992 079e 0F       		.uleb128 0xf
 3993 079f 01       		.uleb128 0x1
 3994 07a0 50       		.byte	0x50
 3995 07a1 03       		.uleb128 0x3
 3996 07a2 91       		.byte	0x91
 3997 07a3 B87F     		.sleb128 -72
 3998 07a5 00       		.byte	0
 3999 07a6 00       		.byte	0
 4000 07a7 1A       		.uleb128 0x1a
 4001 07a8 220F0000 		.4byte	.LBB9
 4002 07ac 88000000 		.4byte	.LBE9-.LBB9
 4003 07b0 84080000 		.4byte	0x884
 4004 07b4 17       		.uleb128 0x17
 4005 07b5 5F030000 		.4byte	.LASF105
 4006 07b9 01       		.byte	0x1
 4007 07ba 0D04     		.2byte	0x40d
 4008 07bc 93000000 		.4byte	0x93
 4009 07c0 640A0000 		.4byte	.LLST23
 4010 07c4 0E       		.uleb128 0xe
 4011 07c5 2E0F0000 		.4byte	.LVL282
 4012 07c9 D50C0000 		.4byte	0xcd5
 4013 07cd E2070000 		.4byte	0x7e2
 4014 07d1 0F       		.uleb128 0xf
 4015 07d2 01       		.uleb128 0x1
 4016 07d3 51       		.byte	0x51
 4017 07d4 03       		.uleb128 0x3
 4018 07d5 91       		.byte	0x91
 4019 07d6 B87F     		.sleb128 -72
 4020 07d8 0F       		.uleb128 0xf
 4021 07d9 01       		.uleb128 0x1
 4022 07da 50       		.byte	0x50
 4023 07db 05       		.uleb128 0x5
 4024 07dc 03       		.byte	0x3
 4025 07dd 34000000 		.4byte	gc_block+52
 4026 07e1 00       		.byte	0
 4027 07e2 0E       		.uleb128 0xe
 4028 07e3 480F0000 		.4byte	.LVL284
 4029 07e7 D50C0000 		.4byte	0xcd5
 4030 07eb 00080000 		.4byte	0x800
 4031 07ef 0F       		.uleb128 0xf
 4032 07f0 01       		.uleb128 0x1
 4033 07f1 51       		.byte	0x51
 4034 07f2 03       		.uleb128 0x3
 4035 07f3 91       		.byte	0x91
 4036 07f4 B87F     		.sleb128 -72
 4037 07f6 0F       		.uleb128 0xf
 4038 07f7 01       		.uleb128 0x1
 4039 07f8 50       		.byte	0x50
 4040 07f9 05       		.uleb128 0x5
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 95


 4041 07fa 03       		.byte	0x3
 4042 07fb 34000000 		.4byte	gc_block+52
 4043 07ff 00       		.byte	0
 4044 0800 0E       		.uleb128 0xe
 4045 0801 7A0F0000 		.4byte	.LVL286
 4046 0805 EB0C0000 		.4byte	0xceb
 4047 0809 56080000 		.4byte	0x856
 4048 080d 0F       		.uleb128 0xf
 4049 080e 01       		.uleb128 0x1
 4050 080f 53       		.byte	0x53
 4051 0810 05       		.uleb128 0x5
 4052 0811 03       		.byte	0x3
 4053 0812 10000000 		.4byte	gc_block+16
 4054 0816 0F       		.uleb128 0xf
 4055 0817 01       		.uleb128 0x1
 4056 0818 52       		.byte	0x52
 4057 0819 05       		.uleb128 0x5
 4058 081a 03       		.byte	0x3
 4059 081b 1C000000 		.4byte	gc_state+28
 4060 081f 0F       		.uleb128 0xf
 4061 0820 01       		.uleb128 0x1
 4062 0821 51       		.byte	0x51
 4063 0822 03       		.uleb128 0x3
 4064 0823 91       		.byte	0x91
 4065 0824 B87F     		.sleb128 -72
 4066 0826 0F       		.uleb128 0xf
 4067 0827 01       		.uleb128 0x1
 4068 0828 50       		.byte	0x50
 4069 0829 05       		.uleb128 0x5
 4070 082a 03       		.byte	0x3
 4071 082b 34000000 		.4byte	gc_block+52
 4072 082f 0F       		.uleb128 0xf
 4073 0830 02       		.uleb128 0x2
 4074 0831 7D       		.byte	0x7d
 4075 0832 10       		.sleb128 16
 4076 0833 06       		.uleb128 0x6
 4077 0834 7A       		.byte	0x7a
 4078 0835 00       		.sleb128 0
 4079 0836 31       		.byte	0x31
 4080 0837 24       		.byte	0x24
 4081 0838 33       		.byte	0x33
 4082 0839 25       		.byte	0x25
 4083 083a 0F       		.uleb128 0xf
 4084 083b 02       		.uleb128 0x2
 4085 083c 7D       		.byte	0x7d
 4086 083d 0C       		.sleb128 12
 4087 083e 05       		.uleb128 0x5
 4088 083f 91       		.byte	0x91
 4089 0840 A87F     		.sleb128 -88
 4090 0842 94       		.byte	0x94
 4091 0843 01       		.byte	0x1
 4092 0844 0F       		.uleb128 0xf
 4093 0845 02       		.uleb128 0x2
 4094 0846 7D       		.byte	0x7d
 4095 0847 08       		.sleb128 8
 4096 0848 05       		.uleb128 0x5
 4097 0849 91       		.byte	0x91
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 96


 4098 084a A07F     		.sleb128 -96
 4099 084c 94       		.byte	0x94
 4100 084d 01       		.byte	0x1
 4101 084e 0F       		.uleb128 0xf
 4102 084f 02       		.uleb128 0x2
 4103 0850 7D       		.byte	0x7d
 4104 0851 04       		.sleb128 4
 4105 0852 02       		.uleb128 0x2
 4106 0853 7B       		.byte	0x7b
 4107 0854 00       		.sleb128 0
 4108 0855 00       		.byte	0
 4109 0856 0E       		.uleb128 0xe
 4110 0857 940F0000 		.4byte	.LVL288
 4111 085b 240D0000 		.4byte	0xd24
 4112 085f 7A080000 		.4byte	0x87a
 4113 0863 0F       		.uleb128 0xf
 4114 0864 01       		.uleb128 0x1
 4115 0865 52       		.byte	0x52
 4116 0866 02       		.uleb128 0x2
 4117 0867 7A       		.byte	0x7a
 4118 0868 00       		.sleb128 0
 4119 0869 0F       		.uleb128 0xf
 4120 086a 01       		.uleb128 0x1
 4121 086b 51       		.byte	0x51
 4122 086c 03       		.uleb128 0x3
 4123 086d 91       		.byte	0x91
 4124 086e B87F     		.sleb128 -72
 4125 0870 0F       		.uleb128 0xf
 4126 0871 01       		.uleb128 0x1
 4127 0872 50       		.byte	0x50
 4128 0873 05       		.uleb128 0x5
 4129 0874 03       		.byte	0x3
 4130 0875 34000000 		.4byte	gc_block+52
 4131 0879 00       		.byte	0
 4132 087a 19       		.uleb128 0x19
 4133 087b AA0F0000 		.4byte	.LVL291
 4134 087f F7040000 		.4byte	0x4f7
 4135 0883 00       		.byte	0
 4136 0884 0E       		.uleb128 0xe
 4137 0885 14000000 		.4byte	.LVL6
 4138 0889 F60B0000 		.4byte	0xbf6
 4139 088d A3080000 		.4byte	0x8a3
 4140 0891 0F       		.uleb128 0xf
 4141 0892 01       		.uleb128 0x1
 4142 0893 52       		.byte	0x52
 4143 0894 02       		.uleb128 0x2
 4144 0895 08       		.byte	0x8
 4145 0896 40       		.byte	0x40
 4146 0897 0F       		.uleb128 0xf
 4147 0898 01       		.uleb128 0x1
 4148 0899 51       		.byte	0x51
 4149 089a 01       		.uleb128 0x1
 4150 089b 30       		.byte	0x30
 4151 089c 0F       		.uleb128 0xf
 4152 089d 01       		.uleb128 0x1
 4153 089e 50       		.byte	0x50
 4154 089f 02       		.uleb128 0x2
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 97


 4155 08a0 74       		.byte	0x74
 4156 08a1 00       		.sleb128 0
 4157 08a2 00       		.byte	0
 4158 08a3 0E       		.uleb128 0xe
 4159 08a4 7A000000 		.4byte	.LVL12
 4160 08a8 430D0000 		.4byte	0xd43
 4161 08ac C3080000 		.4byte	0x8c3
 4162 08b0 0F       		.uleb128 0xf
 4163 08b1 01       		.uleb128 0x1
 4164 08b2 52       		.byte	0x52
 4165 08b3 02       		.uleb128 0x2
 4166 08b4 91       		.byte	0x91
 4167 08b5 50       		.sleb128 -48
 4168 08b6 0F       		.uleb128 0xf
 4169 08b7 01       		.uleb128 0x1
 4170 08b8 51       		.byte	0x51
 4171 08b9 02       		.uleb128 0x2
 4172 08ba 91       		.byte	0x91
 4173 08bb 57       		.sleb128 -41
 4174 08bc 0F       		.uleb128 0xf
 4175 08bd 01       		.uleb128 0x1
 4176 08be 50       		.byte	0x50
 4177 08bf 02       		.uleb128 0x2
 4178 08c0 79       		.byte	0x79
 4179 08c1 00       		.sleb128 0
 4180 08c2 00       		.byte	0
 4181 08c3 19       		.uleb128 0x19
 4182 08c4 8E000000 		.4byte	.LVL14
 4183 08c8 680D0000 		.4byte	0xd68
 4184 08cc 19       		.uleb128 0x19
 4185 08cd B0000000 		.4byte	.LVL21
 4186 08d1 7E0D0000 		.4byte	0xd7e
 4187 08d5 0E       		.uleb128 0xe
 4188 08d6 56060000 		.4byte	.LVL116
 4189 08da 130C0000 		.4byte	0xc13
 4190 08de E9080000 		.4byte	0x8e9
 4191 08e2 0F       		.uleb128 0xf
 4192 08e3 01       		.uleb128 0x1
 4193 08e4 51       		.byte	0x51
 4194 08e5 02       		.uleb128 0x2
 4195 08e6 91       		.byte	0x91
 4196 08e7 44       		.sleb128 -60
 4197 08e8 00       		.byte	0
 4198 08e9 19       		.uleb128 0x19
 4199 08ea 86060000 		.4byte	.LVL118
 4200 08ee 680D0000 		.4byte	0xd68
 4201 08f2 0E       		.uleb128 0xe
 4202 08f3 CA060000 		.4byte	.LVL127
 4203 08f7 130C0000 		.4byte	0xc13
 4204 08fb 12090000 		.4byte	0x912
 4205 08ff 0F       		.uleb128 0xf
 4206 0900 01       		.uleb128 0x1
 4207 0901 51       		.byte	0x51
 4208 0902 05       		.uleb128 0x5
 4209 0903 03       		.byte	0x3
 4210 0904 10000000 		.4byte	gc_block+16
 4211 0908 0F       		.uleb128 0xf
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 98


 4212 0909 01       		.uleb128 0x1
 4213 090a 50       		.byte	0x50
 4214 090b 05       		.uleb128 0x5
 4215 090c 91       		.byte	0x91
 4216 090d A47F     		.sleb128 -92
 4217 090f 94       		.byte	0x94
 4218 0910 01       		.byte	0x1
 4219 0911 00       		.byte	0
 4220 0912 0E       		.uleb128 0xe
 4221 0913 88080000 		.4byte	.LVL153
 4222 0917 130C0000 		.4byte	0xc13
 4223 091b 2E090000 		.4byte	0x92e
 4224 091f 0F       		.uleb128 0xf
 4225 0920 01       		.uleb128 0x1
 4226 0921 51       		.byte	0x51
 4227 0922 05       		.uleb128 0x5
 4228 0923 03       		.byte	0x3
 4229 0924 10000000 		.4byte	gc_block+16
 4230 0928 0F       		.uleb128 0xf
 4231 0929 01       		.uleb128 0x1
 4232 092a 50       		.byte	0x50
 4233 092b 01       		.uleb128 0x1
 4234 092c 36       		.byte	0x36
 4235 092d 00       		.byte	0
 4236 092e 0E       		.uleb128 0xe
 4237 092f B0080000 		.4byte	.LVL154
 4238 0933 130C0000 		.4byte	0xc13
 4239 0937 4A090000 		.4byte	0x94a
 4240 093b 0F       		.uleb128 0xf
 4241 093c 01       		.uleb128 0x1
 4242 093d 51       		.byte	0x51
 4243 093e 05       		.uleb128 0x5
 4244 093f 03       		.byte	0x3
 4245 0940 10000000 		.4byte	gc_block+16
 4246 0944 0F       		.uleb128 0xf
 4247 0945 01       		.uleb128 0x1
 4248 0946 50       		.byte	0x50
 4249 0947 01       		.uleb128 0x1
 4250 0948 37       		.byte	0x37
 4251 0949 00       		.byte	0
 4252 094a 0E       		.uleb128 0xe
 4253 094b 740C0000 		.4byte	.LVL252
 4254 094f F60B0000 		.4byte	0xbf6
 4255 0953 69090000 		.4byte	0x969
 4256 0957 0F       		.uleb128 0xf
 4257 0958 01       		.uleb128 0x1
 4258 0959 52       		.byte	0x52
 4259 095a 01       		.uleb128 0x1
 4260 095b 3C       		.byte	0x3c
 4261 095c 0F       		.uleb128 0xf
 4262 095d 01       		.uleb128 0x1
 4263 095e 51       		.byte	0x51
 4264 095f 01       		.uleb128 0x1
 4265 0960 30       		.byte	0x30
 4266 0961 0F       		.uleb128 0xf
 4267 0962 01       		.uleb128 0x1
 4268 0963 50       		.byte	0x50
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 99


 4269 0964 03       		.uleb128 0x3
 4270 0965 91       		.byte	0x91
 4271 0966 B87F     		.sleb128 -72
 4272 0968 00       		.byte	0
 4273 0969 19       		.uleb128 0x19
 4274 096a 540D0000 		.4byte	.LVL261
 4275 096e 940D0000 		.4byte	0xd94
 4276 0972 0E       		.uleb128 0xe
 4277 0973 5C0D0000 		.4byte	.LVL262
 4278 0977 940D0000 		.4byte	0xd94
 4279 097b 87090000 		.4byte	0x987
 4280 097f 0F       		.uleb128 0xf
 4281 0980 01       		.uleb128 0x1
 4282 0981 51       		.byte	0x51
 4283 0982 03       		.uleb128 0x3
 4284 0983 F5       		.byte	0xf5
 4285 0984 05       		.uleb128 0x5
 4286 0985 25       		.uleb128 0x25
 4287 0986 00       		.byte	0
 4288 0987 19       		.uleb128 0x19
 4289 0988 880D0000 		.4byte	.LVL263
 4290 098c 940D0000 		.4byte	0xd94
 4291 0990 19       		.uleb128 0x19
 4292 0991 AC0D0000 		.4byte	.LVL264
 4293 0995 AA0D0000 		.4byte	0xdaa
 4294 0999 19       		.uleb128 0x19
 4295 099a 0A0E0000 		.4byte	.LVL265
 4296 099e BB0D0000 		.4byte	0xdbb
 4297 09a2 19       		.uleb128 0x19
 4298 09a3 440E0000 		.4byte	.LVL267
 4299 09a7 CC0D0000 		.4byte	0xdcc
 4300 09ab 19       		.uleb128 0x19
 4301 09ac 620E0000 		.4byte	.LVL268
 4302 09b0 CC0D0000 		.4byte	0xdcc
 4303 09b4 0E       		.uleb128 0xe
 4304 09b5 980E0000 		.4byte	.LVL269
 4305 09b9 D90D0000 		.4byte	0xdd9
 4306 09bd D1090000 		.4byte	0x9d1
 4307 09c1 0F       		.uleb128 0xf
 4308 09c2 01       		.uleb128 0x1
 4309 09c3 51       		.byte	0x51
 4310 09c4 05       		.uleb128 0x5
 4311 09c5 03       		.byte	0x3
 4312 09c6 10000000 		.4byte	gc_block+16
 4313 09ca 0F       		.uleb128 0xf
 4314 09cb 01       		.uleb128 0x1
 4315 09cc 50       		.byte	0x50
 4316 09cd 02       		.uleb128 0x2
 4317 09ce 75       		.byte	0x75
 4318 09cf 00       		.sleb128 0
 4319 09d0 00       		.byte	0
 4320 09d1 19       		.uleb128 0x19
 4321 09d2 AE0E0000 		.4byte	.LVL270
 4322 09d6 CC0D0000 		.4byte	0xdcc
 4323 09da 0E       		.uleb128 0xe
 4324 09db C80E0000 		.4byte	.LVL272
 4325 09df D50C0000 		.4byte	0xcd5
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 100


 4326 09e3 F8090000 		.4byte	0x9f8
 4327 09e7 0F       		.uleb128 0xf
 4328 09e8 01       		.uleb128 0x1
 4329 09e9 51       		.byte	0x51
 4330 09ea 03       		.uleb128 0x3
 4331 09eb 91       		.byte	0x91
 4332 09ec B87F     		.sleb128 -72
 4333 09ee 0F       		.uleb128 0xf
 4334 09ef 01       		.uleb128 0x1
 4335 09f0 50       		.byte	0x50
 4336 09f1 05       		.uleb128 0x5
 4337 09f2 03       		.byte	0x3
 4338 09f3 34000000 		.4byte	gc_block+52
 4339 09f7 00       		.byte	0
 4340 09f8 0E       		.uleb128 0xe
 4341 09f9 D20E0000 		.4byte	.LVL274
 4342 09fd D50C0000 		.4byte	0xcd5
 4343 0a01 130A0000 		.4byte	0xa13
 4344 0a05 0F       		.uleb128 0xf
 4345 0a06 01       		.uleb128 0x1
 4346 0a07 51       		.byte	0x51
 4347 0a08 03       		.uleb128 0x3
 4348 0a09 91       		.byte	0x91
 4349 0a0a B87F     		.sleb128 -72
 4350 0a0c 0F       		.uleb128 0xf
 4351 0a0d 01       		.uleb128 0x1
 4352 0a0e 50       		.byte	0x50
 4353 0a0f 02       		.uleb128 0x2
 4354 0a10 75       		.byte	0x75
 4355 0a11 00       		.sleb128 0
 4356 0a12 00       		.byte	0
 4357 0a13 0E       		.uleb128 0xe
 4358 0a14 E60E0000 		.4byte	.LVL275
 4359 0a18 D90D0000 		.4byte	0xdd9
 4360 0a1c 2F0A0000 		.4byte	0xa2f
 4361 0a20 0F       		.uleb128 0xf
 4362 0a21 01       		.uleb128 0x1
 4363 0a22 51       		.byte	0x51
 4364 0a23 05       		.uleb128 0x5
 4365 0a24 03       		.byte	0x3
 4366 0a25 1C000000 		.4byte	gc_state+28
 4367 0a29 0F       		.uleb128 0xf
 4368 0a2a 01       		.uleb128 0x1
 4369 0a2b 50       		.byte	0x50
 4370 0a2c 01       		.uleb128 0x1
 4371 0a2d 36       		.byte	0x36
 4372 0a2e 00       		.byte	0
 4373 0a2f 0E       		.uleb128 0xe
 4374 0a30 F00E0000 		.4byte	.LVL276
 4375 0a34 D90D0000 		.4byte	0xdd9
 4376 0a38 4B0A0000 		.4byte	0xa4b
 4377 0a3c 0F       		.uleb128 0xf
 4378 0a3d 01       		.uleb128 0x1
 4379 0a3e 51       		.byte	0x51
 4380 0a3f 05       		.uleb128 0x5
 4381 0a40 03       		.byte	0x3
 4382 0a41 1C000000 		.4byte	gc_state+28
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 101


 4383 0a45 0F       		.uleb128 0xf
 4384 0a46 01       		.uleb128 0x1
 4385 0a47 50       		.byte	0x50
 4386 0a48 01       		.uleb128 0x1
 4387 0a49 37       		.byte	0x37
 4388 0a4a 00       		.byte	0
 4389 0a4b 19       		.uleb128 0x19
 4390 0a4c 000F0000 		.4byte	.LVL277
 4391 0a50 CC0D0000 		.4byte	0xdcc
 4392 0a54 0E       		.uleb128 0xe
 4393 0a55 0C0F0000 		.4byte	.LVL278
 4394 0a59 F60B0000 		.4byte	0xbf6
 4395 0a5d 750A0000 		.4byte	0xa75
 4396 0a61 0F       		.uleb128 0xf
 4397 0a62 01       		.uleb128 0x1
 4398 0a63 52       		.byte	0x52
 4399 0a64 01       		.uleb128 0x1
 4400 0a65 3C       		.byte	0x3c
 4401 0a66 0F       		.uleb128 0xf
 4402 0a67 01       		.uleb128 0x1
 4403 0a68 51       		.byte	0x51
 4404 0a69 01       		.uleb128 0x1
 4405 0a6a 30       		.byte	0x30
 4406 0a6b 0F       		.uleb128 0xf
 4407 0a6c 01       		.uleb128 0x1
 4408 0a6d 50       		.byte	0x50
 4409 0a6e 05       		.uleb128 0x5
 4410 0a6f 03       		.byte	0x3
 4411 0a70 34000000 		.4byte	gc_state+52
 4412 0a74 00       		.byte	0
 4413 0a75 19       		.uleb128 0x19
 4414 0a76 100F0000 		.4byte	.LVL279
 4415 0a7a CC0D0000 		.4byte	0xdcc
 4416 0a7e 19       		.uleb128 0x19
 4417 0a7f BC0F0000 		.4byte	.LVL292
 4418 0a83 EF0D0000 		.4byte	0xdef
 4419 0a87 0E       		.uleb128 0xe
 4420 0a88 D20F0000 		.4byte	.LVL293
 4421 0a8c FC0D0000 		.4byte	0xdfc
 4422 0a90 9A0A0000 		.4byte	0xa9a
 4423 0a94 0F       		.uleb128 0xf
 4424 0a95 01       		.uleb128 0x1
 4425 0a96 50       		.byte	0x50
 4426 0a97 01       		.uleb128 0x1
 4427 0a98 38       		.byte	0x38
 4428 0a99 00       		.byte	0
 4429 0a9a 19       		.uleb128 0x19
 4430 0a9b D60F0000 		.4byte	.LVL294
 4431 0a9f 0D0E0000 		.4byte	0xe0d
 4432 0aa3 0E       		.uleb128 0xe
 4433 0aa4 04100000 		.4byte	.LVL295
 4434 0aa8 130C0000 		.4byte	0xc13
 4435 0aac BF0A0000 		.4byte	0xabf
 4436 0ab0 0F       		.uleb128 0xf
 4437 0ab1 01       		.uleb128 0x1
 4438 0ab2 51       		.byte	0x51
 4439 0ab3 05       		.uleb128 0x5
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 102


 4440 0ab4 03       		.byte	0x3
 4441 0ab5 28000000 		.4byte	gc_state+40
 4442 0ab9 0F       		.uleb128 0xf
 4443 0aba 01       		.uleb128 0x1
 4444 0abb 50       		.byte	0x50
 4445 0abc 01       		.uleb128 0x1
 4446 0abd 30       		.byte	0x30
 4447 0abe 00       		.byte	0
 4448 0abf 19       		.uleb128 0x19
 4449 0ac0 0E100000 		.4byte	.LVL296
 4450 0ac4 CC0D0000 		.4byte	0xdcc
 4451 0ac8 0E       		.uleb128 0xe
 4452 0ac9 16100000 		.4byte	.LVL297
 4453 0acd 1A0E0000 		.4byte	0xe1a
 4454 0ad1 DB0A0000 		.4byte	0xadb
 4455 0ad5 0F       		.uleb128 0xf
 4456 0ad6 01       		.uleb128 0x1
 4457 0ad7 50       		.byte	0x50
 4458 0ad8 01       		.uleb128 0x1
 4459 0ad9 30       		.byte	0x30
 4460 0ada 00       		.byte	0
 4461 0adb 0E       		.uleb128 0xe
 4462 0adc 1C100000 		.4byte	.LVL298
 4463 0ae0 300E0000 		.4byte	0xe30
 4464 0ae4 EE0A0000 		.4byte	0xaee
 4465 0ae8 0F       		.uleb128 0xf
 4466 0ae9 01       		.uleb128 0x1
 4467 0aea 50       		.byte	0x50
 4468 0aeb 01       		.uleb128 0x1
 4469 0aec 30       		.byte	0x30
 4470 0aed 00       		.byte	0
 4471 0aee 10       		.uleb128 0x10
 4472 0aef 22100000 		.4byte	.LVL299
 4473 0af3 410E0000 		.4byte	0xe41
 4474 0af7 0F       		.uleb128 0xf
 4475 0af8 01       		.uleb128 0x1
 4476 0af9 50       		.byte	0x50
 4477 0afa 01       		.uleb128 0x1
 4478 0afb 38       		.byte	0x38
 4479 0afc 00       		.byte	0
 4480 0afd 00       		.byte	0
 4481 0afe 06       		.uleb128 0x6
 4482 0aff 04       		.byte	0x4
 4483 0b00 D9020000 		.4byte	0x2d9
 4484 0b04 1B       		.uleb128 0x1b
 4485 0b05 25050000 		.4byte	.LASF106
 4486 0b09 09       		.byte	0x9
 4487 0b0a 9606     		.2byte	0x696
 4488 0b0c 100B0000 		.4byte	0xb10
 4489 0b10 07       		.uleb128 0x7
 4490 0b11 A9000000 		.4byte	0xa9
 4491 0b15 1C       		.uleb128 0x1c
 4492 0b16 14030000 		.4byte	.LASF107
 4493 0b1a 05       		.byte	0x5
 4494 0b1b 6A       		.byte	0x6a
 4495 0b1c E5010000 		.4byte	0x1e5
 4496 0b20 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 103


 4497 0b21 73797300 		.ascii	"sys\000"
 4498 0b25 06       		.byte	0x6
 4499 0b26 92       		.byte	0x92
 4500 0b27 A1020000 		.4byte	0x2a1
 4501 0b2b 0A       		.uleb128 0xa
 4502 0b2c A9000000 		.4byte	0xa9
 4503 0b30 3B0B0000 		.4byte	0xb3b
 4504 0b34 0B       		.uleb128 0xb
 4505 0b35 CD000000 		.4byte	0xcd
 4506 0b39 02       		.byte	0x2
 4507 0b3a 00       		.byte	0
 4508 0b3b 1E       		.uleb128 0x1e
 4509 0b3c 8B040000 		.4byte	.LASF108
 4510 0b40 06       		.byte	0x6
 4511 0b41 95       		.byte	0x95
 4512 0b42 2B0B0000 		.4byte	0xb2b
 4513 0b46 05       		.uleb128 0x5
 4514 0b47 03       		.byte	0x3
 4515 0b48 00000000 		.4byte	sys_position
 4516 0b4c 1E       		.uleb128 0x1e
 4517 0b4d 17040000 		.4byte	.LASF109
 4518 0b51 06       		.byte	0x6
 4519 0b52 96       		.byte	0x96
 4520 0b53 2B0B0000 		.4byte	0xb2b
 4521 0b57 05       		.uleb128 0x5
 4522 0b58 03       		.byte	0x3
 4523 0b59 00000000 		.4byte	sys_probe_position
 4524 0b5d 1E       		.uleb128 0x1e
 4525 0b5e AE000000 		.4byte	.LASF110
 4526 0b62 06       		.byte	0x6
 4527 0b63 98       		.byte	0x98
 4528 0b64 DC000000 		.4byte	0xdc
 4529 0b68 05       		.uleb128 0x5
 4530 0b69 03       		.byte	0x3
 4531 0b6a 00000000 		.4byte	sys_probe_state
 4532 0b6e 1E       		.uleb128 0x1e
 4533 0b6f 7B020000 		.4byte	.LASF111
 4534 0b73 06       		.byte	0x6
 4535 0b74 99       		.byte	0x99
 4536 0b75 DC000000 		.4byte	0xdc
 4537 0b79 05       		.uleb128 0x5
 4538 0b7a 03       		.byte	0x3
 4539 0b7b 00000000 		.4byte	sys_rt_exec_state
 4540 0b7f 1E       		.uleb128 0x1e
 4541 0b80 19070000 		.4byte	.LASF112
 4542 0b84 06       		.byte	0x6
 4543 0b85 9A       		.byte	0x9a
 4544 0b86 DC000000 		.4byte	0xdc
 4545 0b8a 05       		.uleb128 0x5
 4546 0b8b 03       		.byte	0x3
 4547 0b8c 00000000 		.4byte	sys_rt_exec_alarm
 4548 0b90 1E       		.uleb128 0x1e
 4549 0b91 E9040000 		.4byte	.LASF113
 4550 0b95 06       		.byte	0x6
 4551 0b96 9B       		.byte	0x9b
 4552 0b97 DC000000 		.4byte	0xdc
 4553 0b9b 05       		.uleb128 0x5
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 104


 4554 0b9c 03       		.byte	0x3
 4555 0b9d 00000000 		.4byte	sys_rt_exec_motion_override
 4556 0ba1 1E       		.uleb128 0x1e
 4557 0ba2 9C050000 		.4byte	.LASF114
 4558 0ba6 06       		.byte	0x6
 4559 0ba7 9C       		.byte	0x9c
 4560 0ba8 DC000000 		.4byte	0xdc
 4561 0bac 05       		.uleb128 0x5
 4562 0bad 03       		.byte	0x3
 4563 0bae 00000000 		.4byte	sys_rt_exec_accessory_override
 4564 0bb2 1E       		.uleb128 0x1e
 4565 0bb3 CD020000 		.4byte	.LASF115
 4566 0bb7 06       		.byte	0x6
 4567 0bb8 A0       		.byte	0xa0
 4568 0bb9 DC000000 		.4byte	0xdc
 4569 0bbd 05       		.uleb128 0x5
 4570 0bbe 03       		.byte	0x3
 4571 0bbf 00000000 		.4byte	sys_rt_exec_debug
 4572 0bc3 1E       		.uleb128 0x1e
 4573 0bc4 7B040000 		.4byte	.LASF116
 4574 0bc8 01       		.byte	0x1
 4575 0bc9 24       		.byte	0x24
 4576 0bca 57040000 		.4byte	0x457
 4577 0bce 05       		.uleb128 0x5
 4578 0bcf 03       		.byte	0x3
 4579 0bd0 00000000 		.4byte	gc_state
 4580 0bd4 1E       		.uleb128 0x1e
 4581 0bd5 3E020000 		.4byte	.LASF117
 4582 0bd9 0A       		.byte	0xa
 4583 0bda 11       		.byte	0x11
 4584 0bdb 93000000 		.4byte	0x93
 4585 0bdf 05       		.uleb128 0x5
 4586 0be0 03       		.byte	0x3
 4587 0be1 00000000 		.4byte	exec_lcd_status
 4588 0be5 1E       		.uleb128 0x1e
 4589 0be6 4E020000 		.4byte	.LASF118
 4590 0bea 01       		.byte	0x1
 4591 0beb 25       		.byte	0x25
 4592 0bec 8F040000 		.4byte	0x48f
 4593 0bf0 05       		.uleb128 0x5
 4594 0bf1 03       		.byte	0x3
 4595 0bf2 00000000 		.4byte	gc_block
 4596 0bf6 1F       		.uleb128 0x1f
 4597 0bf7 68040000 		.4byte	.LASF119
 4598 0bfb D4000000 		.4byte	0xd4
 4599 0bff 130C0000 		.4byte	0xc13
 4600 0c03 20       		.uleb128 0x20
 4601 0c04 D4000000 		.4byte	0xd4
 4602 0c08 20       		.uleb128 0x20
 4603 0c09 85000000 		.4byte	0x85
 4604 0c0d 20       		.uleb128 0x20
 4605 0c0e CD000000 		.4byte	0xcd
 4606 0c12 00       		.byte	0
 4607 0c13 21       		.uleb128 0x21
 4608 0c14 E4070000 		.4byte	.LASF122
 4609 0c18 05       		.byte	0x5
 4610 0c19 85       		.byte	0x85
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 105


 4611 0c1a 93000000 		.4byte	0x93
 4612 0c1e 2D0C0000 		.4byte	0xc2d
 4613 0c22 20       		.uleb128 0x20
 4614 0c23 93000000 		.4byte	0x93
 4615 0c27 20       		.uleb128 0x20
 4616 0c28 2D0C0000 		.4byte	0xc2d
 4617 0c2c 00       		.byte	0
 4618 0c2d 06       		.uleb128 0x6
 4619 0c2e 04       		.byte	0x4
 4620 0c2f 25000000 		.4byte	0x25
 4621 0c33 22       		.uleb128 0x22
 4622 0c34 7A010000 		.4byte	.LASF120
 4623 0c38 0B       		.byte	0xb
 4624 0c39 5F       		.byte	0x5f
 4625 0c3a 440C0000 		.4byte	0xc44
 4626 0c3e 20       		.uleb128 0x20
 4627 0c3f 93000000 		.4byte	0x93
 4628 0c43 00       		.byte	0
 4629 0c44 22       		.uleb128 0x22
 4630 0c45 8B000000 		.4byte	.LASF121
 4631 0c49 06       		.byte	0x6
 4632 0c4a B9       		.byte	0xb9
 4633 0c4b 5A0C0000 		.4byte	0xc5a
 4634 0c4f 20       		.uleb128 0x20
 4635 0c50 2D0C0000 		.4byte	0xc2d
 4636 0c54 20       		.uleb128 0x20
 4637 0c55 5A0C0000 		.4byte	0xc5a
 4638 0c59 00       		.byte	0
 4639 0c5a 06       		.uleb128 0x6
 4640 0c5b 04       		.byte	0x4
 4641 0c5c A9000000 		.4byte	0xa9
 4642 0c60 21       		.uleb128 0x21
 4643 0c61 7B050000 		.4byte	.LASF123
 4644 0c65 0C       		.byte	0xc
 4645 0c66 16       		.byte	0x16
 4646 0c67 85000000 		.4byte	0x85
 4647 0c6b 7F0C0000 		.4byte	0xc7f
 4648 0c6f 20       		.uleb128 0x20
 4649 0c70 7F0C0000 		.4byte	0xc7f
 4650 0c74 20       		.uleb128 0x20
 4651 0c75 7F0C0000 		.4byte	0xc7f
 4652 0c79 20       		.uleb128 0x20
 4653 0c7a C2000000 		.4byte	0xc2
 4654 0c7e 00       		.byte	0
 4655 0c7f 06       		.uleb128 0x6
 4656 0c80 04       		.byte	0x4
 4657 0c81 850C0000 		.4byte	0xc85
 4658 0c85 23       		.uleb128 0x23
 4659 0c86 21       		.uleb128 0x21
 4660 0c87 75010000 		.4byte	.LASF124
 4661 0c8b 0D       		.byte	0xd
 4662 0c8c 86       		.byte	0x86
 4663 0c8d B4000000 		.4byte	0xb4
 4664 0c91 9B0C0000 		.4byte	0xc9b
 4665 0c95 20       		.uleb128 0x20
 4666 0c96 B4000000 		.4byte	0xb4
 4667 0c9a 00       		.byte	0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 106


 4668 0c9b 21       		.uleb128 0x21
 4669 0c9c BE000000 		.4byte	.LASF125
 4670 0ca0 0E       		.byte	0xe
 4671 0ca1 54       		.byte	0x54
 4672 0ca2 25000000 		.4byte	0x25
 4673 0ca6 B50C0000 		.4byte	0xcb5
 4674 0caa 20       		.uleb128 0x20
 4675 0cab 25000000 		.4byte	0x25
 4676 0caf 20       		.uleb128 0x20
 4677 0cb0 25000000 		.4byte	0x25
 4678 0cb4 00       		.byte	0
 4679 0cb5 21       		.uleb128 0x21
 4680 0cb6 39060000 		.4byte	.LASF126
 4681 0cba 0F       		.byte	0xf
 4682 0cbb 1F       		.byte	0x1f
 4683 0cbc 93000000 		.4byte	0x93
 4684 0cc0 CF0C0000 		.4byte	0xccf
 4685 0cc4 20       		.uleb128 0x20
 4686 0cc5 FE0A0000 		.4byte	0xafe
 4687 0cc9 20       		.uleb128 0x20
 4688 0cca CF0C0000 		.4byte	0xccf
 4689 0cce 00       		.byte	0
 4690 0ccf 06       		.uleb128 0x6
 4691 0cd0 04       		.byte	0x4
 4692 0cd1 8F040000 		.4byte	0x48f
 4693 0cd5 22       		.uleb128 0x22
 4694 0cd6 73020000 		.4byte	.LASF127
 4695 0cda 10       		.byte	0x10
 4696 0cdb 2C       		.byte	0x2c
 4697 0cdc EB0C0000 		.4byte	0xceb
 4698 0ce0 20       		.uleb128 0x20
 4699 0ce1 2D0C0000 		.4byte	0xc2d
 4700 0ce5 20       		.uleb128 0x20
 4701 0ce6 FE0A0000 		.4byte	0xafe
 4702 0cea 00       		.byte	0
 4703 0ceb 22       		.uleb128 0x22
 4704 0cec 06070000 		.4byte	.LASF128
 4705 0cf0 10       		.byte	0x10
 4706 0cf1 32       		.byte	0x32
 4707 0cf2 240D0000 		.4byte	0xd24
 4708 0cf6 20       		.uleb128 0x20
 4709 0cf7 2D0C0000 		.4byte	0xc2d
 4710 0cfb 20       		.uleb128 0x20
 4711 0cfc FE0A0000 		.4byte	0xafe
 4712 0d00 20       		.uleb128 0x20
 4713 0d01 2D0C0000 		.4byte	0xc2d
 4714 0d05 20       		.uleb128 0x20
 4715 0d06 2D0C0000 		.4byte	0xc2d
 4716 0d0a 20       		.uleb128 0x20
 4717 0d0b 25000000 		.4byte	0x25
 4718 0d0f 20       		.uleb128 0x20
 4719 0d10 93000000 		.4byte	0x93
 4720 0d14 20       		.uleb128 0x20
 4721 0d15 93000000 		.4byte	0x93
 4722 0d19 20       		.uleb128 0x20
 4723 0d1a 93000000 		.4byte	0x93
 4724 0d1e 20       		.uleb128 0x20
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 107


 4725 0d1f 93000000 		.4byte	0x93
 4726 0d23 00       		.byte	0
 4727 0d24 21       		.uleb128 0x21
 4728 0d25 9F020000 		.4byte	.LASF129
 4729 0d29 10       		.byte	0x10
 4730 0d2a 3C       		.byte	0x3c
 4731 0d2b 93000000 		.4byte	0x93
 4732 0d2f 430D0000 		.4byte	0xd43
 4733 0d33 20       		.uleb128 0x20
 4734 0d34 2D0C0000 		.4byte	0xc2d
 4735 0d38 20       		.uleb128 0x20
 4736 0d39 FE0A0000 		.4byte	0xafe
 4737 0d3d 20       		.uleb128 0x20
 4738 0d3e 93000000 		.4byte	0x93
 4739 0d42 00       		.byte	0
 4740 0d43 21       		.uleb128 0x21
 4741 0d44 1C000000 		.4byte	.LASF130
 4742 0d48 0E       		.byte	0xe
 4743 0d49 48       		.byte	0x48
 4744 0d4a 93000000 		.4byte	0x93
 4745 0d4e 620D0000 		.4byte	0xd62
 4746 0d52 20       		.uleb128 0x20
 4747 0d53 D6000000 		.4byte	0xd6
 4748 0d57 20       		.uleb128 0x20
 4749 0d58 620D0000 		.4byte	0xd62
 4750 0d5c 20       		.uleb128 0x20
 4751 0d5d 2D0C0000 		.4byte	0xc2d
 4752 0d61 00       		.byte	0
 4753 0d62 06       		.uleb128 0x6
 4754 0d63 04       		.byte	0x4
 4755 0d64 93000000 		.4byte	0x93
 4756 0d68 24       		.uleb128 0x24
 4757 0d69 49070000 		.4byte	.LASF131
 4758 0d6d 0D       		.byte	0xd
 4759 0d6e 1D01     		.2byte	0x11d
 4760 0d70 B4000000 		.4byte	0xb4
 4761 0d74 7E0D0000 		.4byte	0xd7e
 4762 0d78 20       		.uleb128 0x20
 4763 0d79 B4000000 		.4byte	0xb4
 4764 0d7d 00       		.byte	0
 4765 0d7e 24       		.uleb128 0x24
 4766 0d7f 13070000 		.4byte	.LASF132
 4767 0d83 0D       		.byte	0xd
 4768 0d84 1A01     		.2byte	0x11a
 4769 0d86 B4000000 		.4byte	0xb4
 4770 0d8a 940D0000 		.4byte	0xd94
 4771 0d8e 20       		.uleb128 0x20
 4772 0d8f B4000000 		.4byte	0xb4
 4773 0d93 00       		.byte	0
 4774 0d94 22       		.uleb128 0x22
 4775 0d95 F9060000 		.4byte	.LASF133
 4776 0d99 11       		.byte	0x11
 4777 0d9a 30       		.byte	0x30
 4778 0d9b AA0D0000 		.4byte	0xdaa
 4779 0d9f 20       		.uleb128 0x20
 4780 0da0 93000000 		.4byte	0x93
 4781 0da4 20       		.uleb128 0x20
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 108


 4782 0da5 25000000 		.4byte	0x25
 4783 0da9 00       		.byte	0
 4784 0daa 22       		.uleb128 0x22
 4785 0dab A2070000 		.4byte	.LASF134
 4786 0daf 12       		.byte	0x12
 4787 0db0 31       		.byte	0x31
 4788 0db1 BB0D0000 		.4byte	0xdbb
 4789 0db5 20       		.uleb128 0x20
 4790 0db6 93000000 		.4byte	0x93
 4791 0dba 00       		.byte	0
 4792 0dbb 22       		.uleb128 0x22
 4793 0dbc F0060000 		.4byte	.LASF135
 4794 0dc0 10       		.byte	0x10
 4795 0dc1 36       		.byte	0x36
 4796 0dc2 CC0D0000 		.4byte	0xdcc
 4797 0dc6 20       		.uleb128 0x20
 4798 0dc7 25000000 		.4byte	0x25
 4799 0dcb 00       		.byte	0
 4800 0dcc 25       		.uleb128 0x25
 4801 0dcd FF050000 		.4byte	.LASF137
 4802 0dd1 06       		.byte	0x6
 4803 0dd2 B3       		.byte	0xb3
 4804 0dd3 D90D0000 		.4byte	0xdd9
 4805 0dd7 26       		.uleb128 0x26
 4806 0dd8 00       		.byte	0
 4807 0dd9 22       		.uleb128 0x22
 4808 0dda 26010000 		.4byte	.LASF136
 4809 0dde 05       		.byte	0x5
 4810 0ddf 82       		.byte	0x82
 4811 0de0 EF0D0000 		.4byte	0xdef
 4812 0de4 20       		.uleb128 0x20
 4813 0de5 93000000 		.4byte	0x93
 4814 0de9 20       		.uleb128 0x20
 4815 0dea 2D0C0000 		.4byte	0xc2d
 4816 0dee 00       		.byte	0
 4817 0def 25       		.uleb128 0x25
 4818 0df0 3F040000 		.4byte	.LASF138
 4819 0df4 13       		.byte	0x13
 4820 0df5 30       		.byte	0x30
 4821 0df6 FC0D0000 		.4byte	0xdfc
 4822 0dfa 26       		.uleb128 0x26
 4823 0dfb 00       		.byte	0
 4824 0dfc 22       		.uleb128 0x22
 4825 0dfd EE030000 		.4byte	.LASF139
 4826 0e01 06       		.byte	0x6
 4827 0e02 C5       		.byte	0xc5
 4828 0e03 0D0E0000 		.4byte	0xe0d
 4829 0e07 20       		.uleb128 0x20
 4830 0e08 93000000 		.4byte	0x93
 4831 0e0c 00       		.byte	0
 4832 0e0d 25       		.uleb128 0x25
 4833 0e0e CD010000 		.4byte	.LASF140
 4834 0e12 13       		.byte	0x13
 4835 0e13 29       		.byte	0x29
 4836 0e14 1A0E0000 		.4byte	0xe1a
 4837 0e18 26       		.uleb128 0x26
 4838 0e19 00       		.byte	0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 109


 4839 0e1a 22       		.uleb128 0x22
 4840 0e1b 8D020000 		.4byte	.LASF141
 4841 0e1f 11       		.byte	0x11
 4842 0e20 33       		.byte	0x33
 4843 0e21 300E0000 		.4byte	0xe30
 4844 0e25 20       		.uleb128 0x20
 4845 0e26 93000000 		.4byte	0x93
 4846 0e2a 20       		.uleb128 0x20
 4847 0e2b 25000000 		.4byte	0x25
 4848 0e2f 00       		.byte	0
 4849 0e30 22       		.uleb128 0x22
 4850 0e31 AE020000 		.4byte	.LASF142
 4851 0e35 12       		.byte	0x12
 4852 0e36 2E       		.byte	0x2e
 4853 0e37 410E0000 		.4byte	0xe41
 4854 0e3b 20       		.uleb128 0x20
 4855 0e3c 93000000 		.4byte	0x93
 4856 0e40 00       		.byte	0
 4857 0e41 27       		.uleb128 0x27
 4858 0e42 C6000000 		.4byte	.LASF143
 4859 0e46 0B       		.byte	0xb
 4860 0e47 65       		.byte	0x65
 4861 0e48 20       		.uleb128 0x20
 4862 0e49 93000000 		.4byte	0x93
 4863 0e4d 00       		.byte	0
 4864 0e4e 00       		.byte	0
 4865              		.section	.debug_abbrev,"",%progbits
 4866              	.Ldebug_abbrev0:
 4867 0000 01       		.uleb128 0x1
 4868 0001 11       		.uleb128 0x11
 4869 0002 01       		.byte	0x1
 4870 0003 25       		.uleb128 0x25
 4871 0004 0E       		.uleb128 0xe
 4872 0005 13       		.uleb128 0x13
 4873 0006 0B       		.uleb128 0xb
 4874 0007 03       		.uleb128 0x3
 4875 0008 0E       		.uleb128 0xe
 4876 0009 1B       		.uleb128 0x1b
 4877 000a 0E       		.uleb128 0xe
 4878 000b 55       		.uleb128 0x55
 4879 000c 17       		.uleb128 0x17
 4880 000d 11       		.uleb128 0x11
 4881 000e 01       		.uleb128 0x1
 4882 000f 10       		.uleb128 0x10
 4883 0010 17       		.uleb128 0x17
 4884 0011 00       		.byte	0
 4885 0012 00       		.byte	0
 4886 0013 02       		.uleb128 0x2
 4887 0014 24       		.uleb128 0x24
 4888 0015 00       		.byte	0
 4889 0016 0B       		.uleb128 0xb
 4890 0017 0B       		.uleb128 0xb
 4891 0018 3E       		.uleb128 0x3e
 4892 0019 0B       		.uleb128 0xb
 4893 001a 03       		.uleb128 0x3
 4894 001b 0E       		.uleb128 0xe
 4895 001c 00       		.byte	0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 110


 4896 001d 00       		.byte	0
 4897 001e 03       		.uleb128 0x3
 4898 001f 16       		.uleb128 0x16
 4899 0020 00       		.byte	0
 4900 0021 03       		.uleb128 0x3
 4901 0022 0E       		.uleb128 0xe
 4902 0023 3A       		.uleb128 0x3a
 4903 0024 0B       		.uleb128 0xb
 4904 0025 3B       		.uleb128 0x3b
 4905 0026 0B       		.uleb128 0xb
 4906 0027 49       		.uleb128 0x49
 4907 0028 13       		.uleb128 0x13
 4908 0029 00       		.byte	0
 4909 002a 00       		.byte	0
 4910 002b 04       		.uleb128 0x4
 4911 002c 24       		.uleb128 0x24
 4912 002d 00       		.byte	0
 4913 002e 0B       		.uleb128 0xb
 4914 002f 0B       		.uleb128 0xb
 4915 0030 3E       		.uleb128 0x3e
 4916 0031 0B       		.uleb128 0xb
 4917 0032 03       		.uleb128 0x3
 4918 0033 08       		.uleb128 0x8
 4919 0034 00       		.byte	0
 4920 0035 00       		.byte	0
 4921 0036 05       		.uleb128 0x5
 4922 0037 0F       		.uleb128 0xf
 4923 0038 00       		.byte	0
 4924 0039 0B       		.uleb128 0xb
 4925 003a 0B       		.uleb128 0xb
 4926 003b 00       		.byte	0
 4927 003c 00       		.byte	0
 4928 003d 06       		.uleb128 0x6
 4929 003e 0F       		.uleb128 0xf
 4930 003f 00       		.byte	0
 4931 0040 0B       		.uleb128 0xb
 4932 0041 0B       		.uleb128 0xb
 4933 0042 49       		.uleb128 0x49
 4934 0043 13       		.uleb128 0x13
 4935 0044 00       		.byte	0
 4936 0045 00       		.byte	0
 4937 0046 07       		.uleb128 0x7
 4938 0047 35       		.uleb128 0x35
 4939 0048 00       		.byte	0
 4940 0049 49       		.uleb128 0x49
 4941 004a 13       		.uleb128 0x13
 4942 004b 00       		.byte	0
 4943 004c 00       		.byte	0
 4944 004d 08       		.uleb128 0x8
 4945 004e 13       		.uleb128 0x13
 4946 004f 01       		.byte	0x1
 4947 0050 0B       		.uleb128 0xb
 4948 0051 0B       		.uleb128 0xb
 4949 0052 3A       		.uleb128 0x3a
 4950 0053 0B       		.uleb128 0xb
 4951 0054 3B       		.uleb128 0x3b
 4952 0055 0B       		.uleb128 0xb
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 111


 4953 0056 01       		.uleb128 0x1
 4954 0057 13       		.uleb128 0x13
 4955 0058 00       		.byte	0
 4956 0059 00       		.byte	0
 4957 005a 09       		.uleb128 0x9
 4958 005b 0D       		.uleb128 0xd
 4959 005c 00       		.byte	0
 4960 005d 03       		.uleb128 0x3
 4961 005e 0E       		.uleb128 0xe
 4962 005f 3A       		.uleb128 0x3a
 4963 0060 0B       		.uleb128 0xb
 4964 0061 3B       		.uleb128 0x3b
 4965 0062 0B       		.uleb128 0xb
 4966 0063 49       		.uleb128 0x49
 4967 0064 13       		.uleb128 0x13
 4968 0065 38       		.uleb128 0x38
 4969 0066 0B       		.uleb128 0xb
 4970 0067 00       		.byte	0
 4971 0068 00       		.byte	0
 4972 0069 0A       		.uleb128 0xa
 4973 006a 01       		.uleb128 0x1
 4974 006b 01       		.byte	0x1
 4975 006c 49       		.uleb128 0x49
 4976 006d 13       		.uleb128 0x13
 4977 006e 01       		.uleb128 0x1
 4978 006f 13       		.uleb128 0x13
 4979 0070 00       		.byte	0
 4980 0071 00       		.byte	0
 4981 0072 0B       		.uleb128 0xb
 4982 0073 21       		.uleb128 0x21
 4983 0074 00       		.byte	0
 4984 0075 49       		.uleb128 0x49
 4985 0076 13       		.uleb128 0x13
 4986 0077 2F       		.uleb128 0x2f
 4987 0078 0B       		.uleb128 0xb
 4988 0079 00       		.byte	0
 4989 007a 00       		.byte	0
 4990 007b 0C       		.uleb128 0xc
 4991 007c 0D       		.uleb128 0xd
 4992 007d 00       		.byte	0
 4993 007e 03       		.uleb128 0x3
 4994 007f 08       		.uleb128 0x8
 4995 0080 3A       		.uleb128 0x3a
 4996 0081 0B       		.uleb128 0xb
 4997 0082 3B       		.uleb128 0x3b
 4998 0083 0B       		.uleb128 0xb
 4999 0084 49       		.uleb128 0x49
 5000 0085 13       		.uleb128 0x13
 5001 0086 38       		.uleb128 0x38
 5002 0087 0B       		.uleb128 0xb
 5003 0088 00       		.byte	0
 5004 0089 00       		.byte	0
 5005 008a 0D       		.uleb128 0xd
 5006 008b 2E       		.uleb128 0x2e
 5007 008c 01       		.byte	0x1
 5008 008d 3F       		.uleb128 0x3f
 5009 008e 19       		.uleb128 0x19
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 112


 5010 008f 03       		.uleb128 0x3
 5011 0090 0E       		.uleb128 0xe
 5012 0091 3A       		.uleb128 0x3a
 5013 0092 0B       		.uleb128 0xb
 5014 0093 3B       		.uleb128 0x3b
 5015 0094 0B       		.uleb128 0xb
 5016 0095 11       		.uleb128 0x11
 5017 0096 01       		.uleb128 0x1
 5018 0097 12       		.uleb128 0x12
 5019 0098 06       		.uleb128 0x6
 5020 0099 40       		.uleb128 0x40
 5021 009a 18       		.uleb128 0x18
 5022 009b 9742     		.uleb128 0x2117
 5023 009d 19       		.uleb128 0x19
 5024 009e 01       		.uleb128 0x1
 5025 009f 13       		.uleb128 0x13
 5026 00a0 00       		.byte	0
 5027 00a1 00       		.byte	0
 5028 00a2 0E       		.uleb128 0xe
 5029 00a3 898201   		.uleb128 0x4109
 5030 00a6 01       		.byte	0x1
 5031 00a7 11       		.uleb128 0x11
 5032 00a8 01       		.uleb128 0x1
 5033 00a9 31       		.uleb128 0x31
 5034 00aa 13       		.uleb128 0x13
 5035 00ab 01       		.uleb128 0x1
 5036 00ac 13       		.uleb128 0x13
 5037 00ad 00       		.byte	0
 5038 00ae 00       		.byte	0
 5039 00af 0F       		.uleb128 0xf
 5040 00b0 8A8201   		.uleb128 0x410a
 5041 00b3 00       		.byte	0
 5042 00b4 02       		.uleb128 0x2
 5043 00b5 18       		.uleb128 0x18
 5044 00b6 9142     		.uleb128 0x2111
 5045 00b8 18       		.uleb128 0x18
 5046 00b9 00       		.byte	0
 5047 00ba 00       		.byte	0
 5048 00bb 10       		.uleb128 0x10
 5049 00bc 898201   		.uleb128 0x4109
 5050 00bf 01       		.byte	0x1
 5051 00c0 11       		.uleb128 0x11
 5052 00c1 01       		.uleb128 0x1
 5053 00c2 31       		.uleb128 0x31
 5054 00c3 13       		.uleb128 0x13
 5055 00c4 00       		.byte	0
 5056 00c5 00       		.byte	0
 5057 00c6 11       		.uleb128 0x11
 5058 00c7 2E       		.uleb128 0x2e
 5059 00c8 01       		.byte	0x1
 5060 00c9 3F       		.uleb128 0x3f
 5061 00ca 19       		.uleb128 0x19
 5062 00cb 03       		.uleb128 0x3
 5063 00cc 0E       		.uleb128 0xe
 5064 00cd 3A       		.uleb128 0x3a
 5065 00ce 0B       		.uleb128 0xb
 5066 00cf 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 113


 5067 00d0 0B       		.uleb128 0xb
 5068 00d1 27       		.uleb128 0x27
 5069 00d2 19       		.uleb128 0x19
 5070 00d3 49       		.uleb128 0x49
 5071 00d4 13       		.uleb128 0x13
 5072 00d5 11       		.uleb128 0x11
 5073 00d6 01       		.uleb128 0x1
 5074 00d7 12       		.uleb128 0x12
 5075 00d8 06       		.uleb128 0x6
 5076 00d9 40       		.uleb128 0x40
 5077 00da 18       		.uleb128 0x18
 5078 00db 9642     		.uleb128 0x2116
 5079 00dd 19       		.uleb128 0x19
 5080 00de 01       		.uleb128 0x1
 5081 00df 13       		.uleb128 0x13
 5082 00e0 00       		.byte	0
 5083 00e1 00       		.byte	0
 5084 00e2 12       		.uleb128 0x12
 5085 00e3 05       		.uleb128 0x5
 5086 00e4 00       		.byte	0
 5087 00e5 03       		.uleb128 0x3
 5088 00e6 0E       		.uleb128 0xe
 5089 00e7 3A       		.uleb128 0x3a
 5090 00e8 0B       		.uleb128 0xb
 5091 00e9 3B       		.uleb128 0x3b
 5092 00ea 0B       		.uleb128 0xb
 5093 00eb 49       		.uleb128 0x49
 5094 00ec 13       		.uleb128 0x13
 5095 00ed 02       		.uleb128 0x2
 5096 00ee 17       		.uleb128 0x17
 5097 00ef 00       		.byte	0
 5098 00f0 00       		.byte	0
 5099 00f1 13       		.uleb128 0x13
 5100 00f2 34       		.uleb128 0x34
 5101 00f3 00       		.byte	0
 5102 00f4 03       		.uleb128 0x3
 5103 00f5 0E       		.uleb128 0xe
 5104 00f6 3A       		.uleb128 0x3a
 5105 00f7 0B       		.uleb128 0xb
 5106 00f8 3B       		.uleb128 0x3b
 5107 00f9 0B       		.uleb128 0xb
 5108 00fa 49       		.uleb128 0x49
 5109 00fb 13       		.uleb128 0x13
 5110 00fc 02       		.uleb128 0x2
 5111 00fd 17       		.uleb128 0x17
 5112 00fe 00       		.byte	0
 5113 00ff 00       		.byte	0
 5114 0100 14       		.uleb128 0x14
 5115 0101 34       		.uleb128 0x34
 5116 0102 00       		.byte	0
 5117 0103 03       		.uleb128 0x3
 5118 0104 0E       		.uleb128 0xe
 5119 0105 3A       		.uleb128 0x3a
 5120 0106 0B       		.uleb128 0xb
 5121 0107 3B       		.uleb128 0x3b
 5122 0108 0B       		.uleb128 0xb
 5123 0109 49       		.uleb128 0x49
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 114


 5124 010a 13       		.uleb128 0x13
 5125 010b 02       		.uleb128 0x2
 5126 010c 18       		.uleb128 0x18
 5127 010d 00       		.byte	0
 5128 010e 00       		.byte	0
 5129 010f 15       		.uleb128 0x15
 5130 0110 34       		.uleb128 0x34
 5131 0111 00       		.byte	0
 5132 0112 03       		.uleb128 0x3
 5133 0113 08       		.uleb128 0x8
 5134 0114 3A       		.uleb128 0x3a
 5135 0115 0B       		.uleb128 0xb
 5136 0116 3B       		.uleb128 0x3b
 5137 0117 05       		.uleb128 0x5
 5138 0118 49       		.uleb128 0x49
 5139 0119 13       		.uleb128 0x13
 5140 011a 02       		.uleb128 0x2
 5141 011b 17       		.uleb128 0x17
 5142 011c 00       		.byte	0
 5143 011d 00       		.byte	0
 5144 011e 16       		.uleb128 0x16
 5145 011f 34       		.uleb128 0x34
 5146 0120 00       		.byte	0
 5147 0121 03       		.uleb128 0x3
 5148 0122 0E       		.uleb128 0xe
 5149 0123 3A       		.uleb128 0x3a
 5150 0124 0B       		.uleb128 0xb
 5151 0125 3B       		.uleb128 0x3b
 5152 0126 05       		.uleb128 0x5
 5153 0127 49       		.uleb128 0x49
 5154 0128 13       		.uleb128 0x13
 5155 0129 02       		.uleb128 0x2
 5156 012a 18       		.uleb128 0x18
 5157 012b 00       		.byte	0
 5158 012c 00       		.byte	0
 5159 012d 17       		.uleb128 0x17
 5160 012e 34       		.uleb128 0x34
 5161 012f 00       		.byte	0
 5162 0130 03       		.uleb128 0x3
 5163 0131 0E       		.uleb128 0xe
 5164 0132 3A       		.uleb128 0x3a
 5165 0133 0B       		.uleb128 0xb
 5166 0134 3B       		.uleb128 0x3b
 5167 0135 05       		.uleb128 0x5
 5168 0136 49       		.uleb128 0x49
 5169 0137 13       		.uleb128 0x13
 5170 0138 02       		.uleb128 0x2
 5171 0139 17       		.uleb128 0x17
 5172 013a 00       		.byte	0
 5173 013b 00       		.byte	0
 5174 013c 18       		.uleb128 0x18
 5175 013d 0B       		.uleb128 0xb
 5176 013e 01       		.byte	0x1
 5177 013f 55       		.uleb128 0x55
 5178 0140 17       		.uleb128 0x17
 5179 0141 01       		.uleb128 0x1
 5180 0142 13       		.uleb128 0x13
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 115


 5181 0143 00       		.byte	0
 5182 0144 00       		.byte	0
 5183 0145 19       		.uleb128 0x19
 5184 0146 898201   		.uleb128 0x4109
 5185 0149 00       		.byte	0
 5186 014a 11       		.uleb128 0x11
 5187 014b 01       		.uleb128 0x1
 5188 014c 31       		.uleb128 0x31
 5189 014d 13       		.uleb128 0x13
 5190 014e 00       		.byte	0
 5191 014f 00       		.byte	0
 5192 0150 1A       		.uleb128 0x1a
 5193 0151 0B       		.uleb128 0xb
 5194 0152 01       		.byte	0x1
 5195 0153 11       		.uleb128 0x11
 5196 0154 01       		.uleb128 0x1
 5197 0155 12       		.uleb128 0x12
 5198 0156 06       		.uleb128 0x6
 5199 0157 01       		.uleb128 0x1
 5200 0158 13       		.uleb128 0x13
 5201 0159 00       		.byte	0
 5202 015a 00       		.byte	0
 5203 015b 1B       		.uleb128 0x1b
 5204 015c 34       		.uleb128 0x34
 5205 015d 00       		.byte	0
 5206 015e 03       		.uleb128 0x3
 5207 015f 0E       		.uleb128 0xe
 5208 0160 3A       		.uleb128 0x3a
 5209 0161 0B       		.uleb128 0xb
 5210 0162 3B       		.uleb128 0x3b
 5211 0163 05       		.uleb128 0x5
 5212 0164 49       		.uleb128 0x49
 5213 0165 13       		.uleb128 0x13
 5214 0166 3F       		.uleb128 0x3f
 5215 0167 19       		.uleb128 0x19
 5216 0168 3C       		.uleb128 0x3c
 5217 0169 19       		.uleb128 0x19
 5218 016a 00       		.byte	0
 5219 016b 00       		.byte	0
 5220 016c 1C       		.uleb128 0x1c
 5221 016d 34       		.uleb128 0x34
 5222 016e 00       		.byte	0
 5223 016f 03       		.uleb128 0x3
 5224 0170 0E       		.uleb128 0xe
 5225 0171 3A       		.uleb128 0x3a
 5226 0172 0B       		.uleb128 0xb
 5227 0173 3B       		.uleb128 0x3b
 5228 0174 0B       		.uleb128 0xb
 5229 0175 49       		.uleb128 0x49
 5230 0176 13       		.uleb128 0x13
 5231 0177 3F       		.uleb128 0x3f
 5232 0178 19       		.uleb128 0x19
 5233 0179 3C       		.uleb128 0x3c
 5234 017a 19       		.uleb128 0x19
 5235 017b 00       		.byte	0
 5236 017c 00       		.byte	0
 5237 017d 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 116


 5238 017e 34       		.uleb128 0x34
 5239 017f 00       		.byte	0
 5240 0180 03       		.uleb128 0x3
 5241 0181 08       		.uleb128 0x8
 5242 0182 3A       		.uleb128 0x3a
 5243 0183 0B       		.uleb128 0xb
 5244 0184 3B       		.uleb128 0x3b
 5245 0185 0B       		.uleb128 0xb
 5246 0186 49       		.uleb128 0x49
 5247 0187 13       		.uleb128 0x13
 5248 0188 3F       		.uleb128 0x3f
 5249 0189 19       		.uleb128 0x19
 5250 018a 3C       		.uleb128 0x3c
 5251 018b 19       		.uleb128 0x19
 5252 018c 00       		.byte	0
 5253 018d 00       		.byte	0
 5254 018e 1E       		.uleb128 0x1e
 5255 018f 34       		.uleb128 0x34
 5256 0190 00       		.byte	0
 5257 0191 03       		.uleb128 0x3
 5258 0192 0E       		.uleb128 0xe
 5259 0193 3A       		.uleb128 0x3a
 5260 0194 0B       		.uleb128 0xb
 5261 0195 3B       		.uleb128 0x3b
 5262 0196 0B       		.uleb128 0xb
 5263 0197 49       		.uleb128 0x49
 5264 0198 13       		.uleb128 0x13
 5265 0199 3F       		.uleb128 0x3f
 5266 019a 19       		.uleb128 0x19
 5267 019b 02       		.uleb128 0x2
 5268 019c 18       		.uleb128 0x18
 5269 019d 00       		.byte	0
 5270 019e 00       		.byte	0
 5271 019f 1F       		.uleb128 0x1f
 5272 01a0 2E       		.uleb128 0x2e
 5273 01a1 01       		.byte	0x1
 5274 01a2 3F       		.uleb128 0x3f
 5275 01a3 19       		.uleb128 0x19
 5276 01a4 03       		.uleb128 0x3
 5277 01a5 0E       		.uleb128 0xe
 5278 01a6 27       		.uleb128 0x27
 5279 01a7 19       		.uleb128 0x19
 5280 01a8 49       		.uleb128 0x49
 5281 01a9 13       		.uleb128 0x13
 5282 01aa 34       		.uleb128 0x34
 5283 01ab 19       		.uleb128 0x19
 5284 01ac 3C       		.uleb128 0x3c
 5285 01ad 19       		.uleb128 0x19
 5286 01ae 01       		.uleb128 0x1
 5287 01af 13       		.uleb128 0x13
 5288 01b0 00       		.byte	0
 5289 01b1 00       		.byte	0
 5290 01b2 20       		.uleb128 0x20
 5291 01b3 05       		.uleb128 0x5
 5292 01b4 00       		.byte	0
 5293 01b5 49       		.uleb128 0x49
 5294 01b6 13       		.uleb128 0x13
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 117


 5295 01b7 00       		.byte	0
 5296 01b8 00       		.byte	0
 5297 01b9 21       		.uleb128 0x21
 5298 01ba 2E       		.uleb128 0x2e
 5299 01bb 01       		.byte	0x1
 5300 01bc 3F       		.uleb128 0x3f
 5301 01bd 19       		.uleb128 0x19
 5302 01be 03       		.uleb128 0x3
 5303 01bf 0E       		.uleb128 0xe
 5304 01c0 3A       		.uleb128 0x3a
 5305 01c1 0B       		.uleb128 0xb
 5306 01c2 3B       		.uleb128 0x3b
 5307 01c3 0B       		.uleb128 0xb
 5308 01c4 27       		.uleb128 0x27
 5309 01c5 19       		.uleb128 0x19
 5310 01c6 49       		.uleb128 0x49
 5311 01c7 13       		.uleb128 0x13
 5312 01c8 3C       		.uleb128 0x3c
 5313 01c9 19       		.uleb128 0x19
 5314 01ca 01       		.uleb128 0x1
 5315 01cb 13       		.uleb128 0x13
 5316 01cc 00       		.byte	0
 5317 01cd 00       		.byte	0
 5318 01ce 22       		.uleb128 0x22
 5319 01cf 2E       		.uleb128 0x2e
 5320 01d0 01       		.byte	0x1
 5321 01d1 3F       		.uleb128 0x3f
 5322 01d2 19       		.uleb128 0x19
 5323 01d3 03       		.uleb128 0x3
 5324 01d4 0E       		.uleb128 0xe
 5325 01d5 3A       		.uleb128 0x3a
 5326 01d6 0B       		.uleb128 0xb
 5327 01d7 3B       		.uleb128 0x3b
 5328 01d8 0B       		.uleb128 0xb
 5329 01d9 27       		.uleb128 0x27
 5330 01da 19       		.uleb128 0x19
 5331 01db 3C       		.uleb128 0x3c
 5332 01dc 19       		.uleb128 0x19
 5333 01dd 01       		.uleb128 0x1
 5334 01de 13       		.uleb128 0x13
 5335 01df 00       		.byte	0
 5336 01e0 00       		.byte	0
 5337 01e1 23       		.uleb128 0x23
 5338 01e2 26       		.uleb128 0x26
 5339 01e3 00       		.byte	0
 5340 01e4 00       		.byte	0
 5341 01e5 00       		.byte	0
 5342 01e6 24       		.uleb128 0x24
 5343 01e7 2E       		.uleb128 0x2e
 5344 01e8 01       		.byte	0x1
 5345 01e9 3F       		.uleb128 0x3f
 5346 01ea 19       		.uleb128 0x19
 5347 01eb 03       		.uleb128 0x3
 5348 01ec 0E       		.uleb128 0xe
 5349 01ed 3A       		.uleb128 0x3a
 5350 01ee 0B       		.uleb128 0xb
 5351 01ef 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 118


 5352 01f0 05       		.uleb128 0x5
 5353 01f1 27       		.uleb128 0x27
 5354 01f2 19       		.uleb128 0x19
 5355 01f3 49       		.uleb128 0x49
 5356 01f4 13       		.uleb128 0x13
 5357 01f5 3C       		.uleb128 0x3c
 5358 01f6 19       		.uleb128 0x19
 5359 01f7 01       		.uleb128 0x1
 5360 01f8 13       		.uleb128 0x13
 5361 01f9 00       		.byte	0
 5362 01fa 00       		.byte	0
 5363 01fb 25       		.uleb128 0x25
 5364 01fc 2E       		.uleb128 0x2e
 5365 01fd 01       		.byte	0x1
 5366 01fe 3F       		.uleb128 0x3f
 5367 01ff 19       		.uleb128 0x19
 5368 0200 03       		.uleb128 0x3
 5369 0201 0E       		.uleb128 0xe
 5370 0202 3A       		.uleb128 0x3a
 5371 0203 0B       		.uleb128 0xb
 5372 0204 3B       		.uleb128 0x3b
 5373 0205 0B       		.uleb128 0xb
 5374 0206 3C       		.uleb128 0x3c
 5375 0207 19       		.uleb128 0x19
 5376 0208 01       		.uleb128 0x1
 5377 0209 13       		.uleb128 0x13
 5378 020a 00       		.byte	0
 5379 020b 00       		.byte	0
 5380 020c 26       		.uleb128 0x26
 5381 020d 18       		.uleb128 0x18
 5382 020e 00       		.byte	0
 5383 020f 00       		.byte	0
 5384 0210 00       		.byte	0
 5385 0211 27       		.uleb128 0x27
 5386 0212 2E       		.uleb128 0x2e
 5387 0213 01       		.byte	0x1
 5388 0214 3F       		.uleb128 0x3f
 5389 0215 19       		.uleb128 0x19
 5390 0216 03       		.uleb128 0x3
 5391 0217 0E       		.uleb128 0xe
 5392 0218 3A       		.uleb128 0x3a
 5393 0219 0B       		.uleb128 0xb
 5394 021a 3B       		.uleb128 0x3b
 5395 021b 0B       		.uleb128 0xb
 5396 021c 27       		.uleb128 0x27
 5397 021d 19       		.uleb128 0x19
 5398 021e 3C       		.uleb128 0x3c
 5399 021f 19       		.uleb128 0x19
 5400 0220 00       		.byte	0
 5401 0221 00       		.byte	0
 5402 0222 00       		.byte	0
 5403              		.section	.debug_loc,"",%progbits
 5404              	.Ldebug_loc0:
 5405              	.LLST0:
 5406 0000 00000000 		.4byte	.LVL4
 5407 0004 0C000000 		.4byte	.LVL5
 5408 0008 0100     		.2byte	0x1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 119


 5409 000a 50       		.byte	0x50
 5410 000b 0C000000 		.4byte	.LVL5
 5411 000f D4060000 		.4byte	.LVL128
 5412 0013 0100     		.2byte	0x1
 5413 0015 59       		.byte	0x59
 5414 0016 D4060000 		.4byte	.LVL128
 5415 001a 4E070000 		.4byte	.LVL135
 5416 001e 0400     		.2byte	0x4
 5417 0020 F3       		.byte	0xf3
 5418 0021 01       		.uleb128 0x1
 5419 0022 50       		.byte	0x50
 5420 0023 9F       		.byte	0x9f
 5421 0024 4E070000 		.4byte	.LVL135
 5422 0028 D4070000 		.4byte	.LVL143
 5423 002c 0100     		.2byte	0x1
 5424 002e 59       		.byte	0x59
 5425 002f D4070000 		.4byte	.LVL143
 5426 0033 66080000 		.4byte	.LVL150
 5427 0037 0400     		.2byte	0x4
 5428 0039 F3       		.byte	0xf3
 5429 003a 01       		.uleb128 0x1
 5430 003b 50       		.byte	0x50
 5431 003c 9F       		.byte	0x9f
 5432 003d 66080000 		.4byte	.LVL150
 5433 0041 6A080000 		.4byte	.LVL151
 5434 0045 0100     		.2byte	0x1
 5435 0047 59       		.byte	0x59
 5436 0048 6A080000 		.4byte	.LVL151
 5437 004c 2C100000 		.4byte	.LVL300
 5438 0050 0400     		.2byte	0x4
 5439 0052 F3       		.byte	0xf3
 5440 0053 01       		.uleb128 0x1
 5441 0054 50       		.byte	0x50
 5442 0055 9F       		.byte	0x9f
 5443 0056 2C100000 		.4byte	.LVL300
 5444 005a D8100000 		.4byte	.LVL346
 5445 005e 0100     		.2byte	0x1
 5446 0060 59       		.byte	0x59
 5447 0061 D8100000 		.4byte	.LVL346
 5448 0065 24110000 		.4byte	.LFE65
 5449 0069 0400     		.2byte	0x4
 5450 006b F3       		.byte	0xf3
 5451 006c 01       		.uleb128 0x1
 5452 006d 50       		.byte	0x50
 5453 006e 9F       		.byte	0x9f
 5454 006f 00000000 		.4byte	0
 5455 0073 00000000 		.4byte	0
 5456              	.LLST1:
 5457 0077 26000000 		.4byte	.LVL7
 5458 007b 5E000000 		.4byte	.LVL11
 5459 007f 0200     		.2byte	0x2
 5460 0081 30       		.byte	0x30
 5461 0082 9F       		.byte	0x9f
 5462 0083 5E000000 		.4byte	.LVL11
 5463 0087 40020000 		.4byte	.LVL42
 5464 008b 0300     		.2byte	0x3
 5465 008d 91       		.byte	0x91
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 120


 5466 008e 987F     		.sleb128 -104
 5467 0090 40020000 		.4byte	.LVL42
 5468 0094 68020000 		.4byte	.LVL46
 5469 0098 0200     		.2byte	0x2
 5470 009a 33       		.byte	0x33
 5471 009b 9F       		.byte	0x9f
 5472 009c 68020000 		.4byte	.LVL46
 5473 00a0 BE080000 		.4byte	.LVL155
 5474 00a4 0300     		.2byte	0x3
 5475 00a6 91       		.byte	0x91
 5476 00a7 987F     		.sleb128 -104
 5477 00a9 C0080000 		.4byte	.LVL156
 5478 00ad 3C0C0000 		.4byte	.LVL242
 5479 00b1 0300     		.2byte	0x3
 5480 00b3 91       		.byte	0x91
 5481 00b4 987F     		.sleb128 -104
 5482 00b6 3E0C0000 		.4byte	.LVL243
 5483 00ba 54100000 		.4byte	.LVL317
 5484 00be 0300     		.2byte	0x3
 5485 00c0 91       		.byte	0x91
 5486 00c1 987F     		.sleb128 -104
 5487 00c3 54100000 		.4byte	.LVL317
 5488 00c7 58100000 		.4byte	.LVL319
 5489 00cb 0200     		.2byte	0x2
 5490 00cd 33       		.byte	0x33
 5491 00ce 9F       		.byte	0x9f
 5492 00cf 58100000 		.4byte	.LVL319
 5493 00d3 1E110000 		.4byte	.LVL356
 5494 00d7 0300     		.2byte	0x3
 5495 00d9 91       		.byte	0x91
 5496 00da 987F     		.sleb128 -104
 5497 00dc 00000000 		.4byte	0
 5498 00e0 00000000 		.4byte	0
 5499              	.LLST2:
 5500 00e4 B8050000 		.4byte	.LVL104
 5501 00e8 C6050000 		.4byte	.LVL105
 5502 00ec 0200     		.2byte	0x2
 5503 00ee 31       		.byte	0x31
 5504 00ef 9F       		.byte	0x9f
 5505 00f0 D2050000 		.4byte	.LVL106
 5506 00f4 2C100000 		.4byte	.LVL300
 5507 00f8 0100     		.2byte	0x1
 5508 00fa 5B       		.byte	0x5b
 5509 00fb B0100000 		.4byte	.LVL337
 5510 00ff 1E110000 		.4byte	.LVL356
 5511 0103 0100     		.2byte	0x1
 5512 0105 5B       		.byte	0x5b
 5513 0106 00000000 		.4byte	0
 5514 010a 00000000 		.4byte	0
 5515              	.LLST3:
 5516 010e B8050000 		.4byte	.LVL104
 5517 0112 C6050000 		.4byte	.LVL105
 5518 0116 0200     		.2byte	0x2
 5519 0118 32       		.byte	0x32
 5520 0119 9F       		.byte	0x9f
 5521 011a D2050000 		.4byte	.LVL106
 5522 011e 2C100000 		.4byte	.LVL300
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 121


 5523 0122 0300     		.2byte	0x3
 5524 0124 91       		.byte	0x91
 5525 0125 A07F     		.sleb128 -96
 5526 0127 B0100000 		.4byte	.LVL337
 5527 012b 1E110000 		.4byte	.LVL356
 5528 012f 0300     		.2byte	0x3
 5529 0131 91       		.byte	0x91
 5530 0132 A07F     		.sleb128 -96
 5531 0134 00000000 		.4byte	0
 5532 0138 00000000 		.4byte	0
 5533              	.LLST4:
 5534 013c B8050000 		.4byte	.LVL104
 5535 0140 C6050000 		.4byte	.LVL105
 5536 0144 0200     		.2byte	0x2
 5537 0146 30       		.byte	0x30
 5538 0147 9F       		.byte	0x9f
 5539 0148 D2050000 		.4byte	.LVL106
 5540 014c 2C100000 		.4byte	.LVL300
 5541 0150 0300     		.2byte	0x3
 5542 0152 91       		.byte	0x91
 5543 0153 A87F     		.sleb128 -88
 5544 0155 B0100000 		.4byte	.LVL337
 5545 0159 1E110000 		.4byte	.LVL356
 5546 015d 0300     		.2byte	0x3
 5547 015f 91       		.byte	0x91
 5548 0160 A87F     		.sleb128 -88
 5549 0162 00000000 		.4byte	0
 5550 0166 00000000 		.4byte	0
 5551              	.LLST5:
 5552 016a 26000000 		.4byte	.LVL7
 5553 016e 8C060000 		.4byte	.LVL120
 5554 0172 0200     		.2byte	0x2
 5555 0174 30       		.byte	0x30
 5556 0175 9F       		.byte	0x9f
 5557 0176 8C060000 		.4byte	.LVL120
 5558 017a B6060000 		.4byte	.LVL123
 5559 017e 0100     		.2byte	0x1
 5560 0180 50       		.byte	0x50
 5561 0181 B6060000 		.4byte	.LVL123
 5562 0185 BA060000 		.4byte	.LVL124
 5563 0189 0300     		.2byte	0x3
 5564 018b 70       		.byte	0x70
 5565 018c 01       		.sleb128 1
 5566 018d 9F       		.byte	0x9f
 5567 018e BA060000 		.4byte	.LVL124
 5568 0192 BC060000 		.4byte	.LVL125
 5569 0196 0300     		.2byte	0x3
 5570 0198 91       		.byte	0x91
 5571 0199 A47F     		.sleb128 -92
 5572 019b BC060000 		.4byte	.LVL125
 5573 019f C2060000 		.4byte	.LVL126
 5574 01a3 0100     		.2byte	0x1
 5575 01a5 50       		.byte	0x50
 5576 01a6 C2060000 		.4byte	.LVL126
 5577 01aa 4E070000 		.4byte	.LVL135
 5578 01ae 0300     		.2byte	0x3
 5579 01b0 91       		.byte	0x91
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 122


 5580 01b1 A47F     		.sleb128 -92
 5581 01b3 4E070000 		.4byte	.LVL135
 5582 01b7 00090000 		.4byte	.LVL162
 5583 01bb 0200     		.2byte	0x2
 5584 01bd 30       		.byte	0x30
 5585 01be 9F       		.byte	0x9f
 5586 01bf 00090000 		.4byte	.LVL162
 5587 01c3 2C100000 		.4byte	.LVL300
 5588 01c7 0300     		.2byte	0x3
 5589 01c9 91       		.byte	0x91
 5590 01ca A47F     		.sleb128 -92
 5591 01cc 2C100000 		.4byte	.LVL300
 5592 01d0 C4100000 		.4byte	.LVL338
 5593 01d4 0200     		.2byte	0x2
 5594 01d6 30       		.byte	0x30
 5595 01d7 9F       		.byte	0x9f
 5596 01d8 C4100000 		.4byte	.LVL338
 5597 01dc C6100000 		.4byte	.LVL339
 5598 01e0 0100     		.2byte	0x1
 5599 01e2 50       		.byte	0x50
 5600 01e3 C8100000 		.4byte	.LVL340
 5601 01e7 CA100000 		.4byte	.LVL341
 5602 01eb 0100     		.2byte	0x1
 5603 01ed 50       		.byte	0x50
 5604 01ee CC100000 		.4byte	.LVL342
 5605 01f2 CE100000 		.4byte	.LVL343
 5606 01f6 0100     		.2byte	0x1
 5607 01f8 50       		.byte	0x50
 5608 01f9 D0100000 		.4byte	.LVL344
 5609 01fd D4100000 		.4byte	.LVL345
 5610 0201 0300     		.2byte	0x3
 5611 0203 91       		.byte	0x91
 5612 0204 A47F     		.sleb128 -92
 5613 0206 D4100000 		.4byte	.LVL345
 5614 020a E4100000 		.4byte	.LVL347
 5615 020e 0200     		.2byte	0x2
 5616 0210 30       		.byte	0x30
 5617 0211 9F       		.byte	0x9f
 5618 0212 E4100000 		.4byte	.LVL347
 5619 0216 1E110000 		.4byte	.LVL356
 5620 021a 0300     		.2byte	0x3
 5621 021c 91       		.byte	0x91
 5622 021d A47F     		.sleb128 -92
 5623 021f 00000000 		.4byte	0
 5624 0223 00000000 		.4byte	0
 5625              	.LLST6:
 5626 0227 26000000 		.4byte	.LVL7
 5627 022b 5E000000 		.4byte	.LVL11
 5628 022f 0200     		.2byte	0x2
 5629 0231 30       		.byte	0x30
 5630 0232 9F       		.byte	0x9f
 5631 0233 5E000000 		.4byte	.LVL11
 5632 0237 24110000 		.4byte	.LFE65
 5633 023b 0300     		.2byte	0x3
 5634 023d 91       		.byte	0x91
 5635 023e 947F     		.sleb128 -108
 5636 0240 00000000 		.4byte	0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 123


 5637 0244 00000000 		.4byte	0
 5638              	.LLST7:
 5639 0248 26000000 		.4byte	.LVL7
 5640 024c 5E000000 		.4byte	.LVL11
 5641 0250 0200     		.2byte	0x2
 5642 0252 30       		.byte	0x30
 5643 0253 9F       		.byte	0x9f
 5644 0254 5E000000 		.4byte	.LVL11
 5645 0258 24110000 		.4byte	.LFE65
 5646 025c 0300     		.2byte	0x3
 5647 025e 91       		.byte	0x91
 5648 025f 9C7F     		.sleb128 -100
 5649 0261 00000000 		.4byte	0
 5650 0265 00000000 		.4byte	0
 5651              	.LLST8:
 5652 0269 26000000 		.4byte	.LVL7
 5653 026d 5E000000 		.4byte	.LVL11
 5654 0271 0200     		.2byte	0x2
 5655 0273 30       		.byte	0x30
 5656 0274 9F       		.byte	0x9f
 5657 0275 5E000000 		.4byte	.LVL11
 5658 0279 AE020000 		.4byte	.LVL53
 5659 027d 0100     		.2byte	0x1
 5660 027f 56       		.byte	0x56
 5661 0280 B0020000 		.4byte	.LVL54
 5662 0284 7E030000 		.4byte	.LVL63
 5663 0288 0100     		.2byte	0x1
 5664 028a 56       		.byte	0x56
 5665 028b 80030000 		.4byte	.LVL64
 5666 028f 24110000 		.4byte	.LFE65
 5667 0293 0100     		.2byte	0x1
 5668 0295 56       		.byte	0x56
 5669 0296 00000000 		.4byte	0
 5670 029a 00000000 		.4byte	0
 5671              	.LLST9:
 5672 029e 26000000 		.4byte	.LVL7
 5673 02a2 5E000000 		.4byte	.LVL11
 5674 02a6 0200     		.2byte	0x2
 5675 02a8 30       		.byte	0x30
 5676 02a9 9F       		.byte	0x9f
 5677 02aa 5E000000 		.4byte	.LVL11
 5678 02ae A8040000 		.4byte	.LVL93
 5679 02b2 0100     		.2byte	0x1
 5680 02b4 57       		.byte	0x57
 5681 02b5 AA040000 		.4byte	.LVL94
 5682 02b9 7E050000 		.4byte	.LVL102
 5683 02bd 0100     		.2byte	0x1
 5684 02bf 57       		.byte	0x57
 5685 02c0 80050000 		.4byte	.LVL103
 5686 02c4 B0060000 		.4byte	.LVL121
 5687 02c8 0100     		.2byte	0x1
 5688 02ca 57       		.byte	0x57
 5689 02cb B2060000 		.4byte	.LVL122
 5690 02cf CC090000 		.4byte	.LVL170
 5691 02d3 0100     		.2byte	0x1
 5692 02d5 57       		.byte	0x57
 5693 02d6 CE090000 		.4byte	.LVL171
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 124


 5694 02da 100B0000 		.4byte	.LVL208
 5695 02de 0100     		.2byte	0x1
 5696 02e0 57       		.byte	0x57
 5697 02e1 120B0000 		.4byte	.LVL209
 5698 02e5 4E0C0000 		.4byte	.LVL245
 5699 02e9 0100     		.2byte	0x1
 5700 02eb 57       		.byte	0x57
 5701 02ec 4E0C0000 		.4byte	.LVL245
 5702 02f0 500C0000 		.4byte	.LVL246
 5703 02f4 0100     		.2byte	0x1
 5704 02f6 53       		.byte	0x53
 5705 02f7 500C0000 		.4byte	.LVL246
 5706 02fb 5A0C0000 		.4byte	.LVL247
 5707 02ff 0100     		.2byte	0x1
 5708 0301 57       		.byte	0x57
 5709 0302 5A0C0000 		.4byte	.LVL247
 5710 0306 620C0000 		.4byte	.LVL248
 5711 030a 0100     		.2byte	0x1
 5712 030c 53       		.byte	0x53
 5713 030d 640C0000 		.4byte	.LVL249
 5714 0311 730C0000 		.4byte	.LVL252-1
 5715 0315 0100     		.2byte	0x1
 5716 0317 53       		.byte	0x53
 5717 0318 2C100000 		.4byte	.LVL300
 5718 031c 10110000 		.4byte	.LVL354
 5719 0320 0100     		.2byte	0x1
 5720 0322 57       		.byte	0x57
 5721 0323 10110000 		.4byte	.LVL354
 5722 0327 14110000 		.4byte	.LVL355
 5723 032b 0100     		.2byte	0x1
 5724 032d 53       		.byte	0x53
 5725 032e 00000000 		.4byte	0
 5726 0332 00000000 		.4byte	0
 5727              	.LLST10:
 5728 0336 26000000 		.4byte	.LVL7
 5729 033a 2E000000 		.4byte	.LVL8
 5730 033e 0200     		.2byte	0x2
 5731 0340 30       		.byte	0x30
 5732 0341 9F       		.byte	0x9f
 5733 0342 2E000000 		.4byte	.LVL8
 5734 0346 3A000000 		.4byte	.LVL9
 5735 034a 0200     		.2byte	0x2
 5736 034c 31       		.byte	0x31
 5737 034d 9F       		.byte	0x9f
 5738 034e 3A000000 		.4byte	.LVL9
 5739 0352 3E000000 		.4byte	.LVL10
 5740 0356 0200     		.2byte	0x2
 5741 0358 30       		.byte	0x30
 5742 0359 9F       		.byte	0x9f
 5743 035a 3E000000 		.4byte	.LVL10
 5744 035e 24110000 		.4byte	.LFE65
 5745 0362 0100     		.2byte	0x1
 5746 0364 5A       		.byte	0x5a
 5747 0365 00000000 		.4byte	0
 5748 0369 00000000 		.4byte	0
 5749              	.LLST11:
 5750 036d 98010000 		.4byte	.LVL24
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 125


 5751 0371 BC010000 		.4byte	.LVL27
 5752 0375 0200     		.2byte	0x2
 5753 0377 30       		.byte	0x30
 5754 0378 9F       		.byte	0x9f
 5755 0379 C8010000 		.4byte	.LVL28
 5756 037d F8010000 		.4byte	.LVL30
 5757 0381 0200     		.2byte	0x2
 5758 0383 31       		.byte	0x31
 5759 0384 9F       		.byte	0x9f
 5760 0385 F8010000 		.4byte	.LVL30
 5761 0389 02020000 		.4byte	.LVL32
 5762 038d 0200     		.2byte	0x2
 5763 038f 32       		.byte	0x32
 5764 0390 9F       		.byte	0x9f
 5765 0391 04020000 		.4byte	.LVL33
 5766 0395 0E020000 		.4byte	.LVL35
 5767 0399 0200     		.2byte	0x2
 5768 039b 33       		.byte	0x33
 5769 039c 9F       		.byte	0x9f
 5770 039d 0E020000 		.4byte	.LVL35
 5771 03a1 20020000 		.4byte	.LVL37
 5772 03a5 0200     		.2byte	0x2
 5773 03a7 34       		.byte	0x34
 5774 03a8 9F       		.byte	0x9f
 5775 03a9 20020000 		.4byte	.LVL37
 5776 03ad 2C020000 		.4byte	.LVL39
 5777 03b1 0200     		.2byte	0x2
 5778 03b3 35       		.byte	0x35
 5779 03b4 9F       		.byte	0x9f
 5780 03b5 2C020000 		.4byte	.LVL39
 5781 03b9 38020000 		.4byte	.LVL41
 5782 03bd 0200     		.2byte	0x2
 5783 03bf 36       		.byte	0x36
 5784 03c0 9F       		.byte	0x9f
 5785 03c1 38020000 		.4byte	.LVL41
 5786 03c5 68020000 		.4byte	.LVL46
 5787 03c9 0200     		.2byte	0x2
 5788 03cb 38       		.byte	0x38
 5789 03cc 9F       		.byte	0x9f
 5790 03cd 68020000 		.4byte	.LVL46
 5791 03d1 72020000 		.4byte	.LVL48
 5792 03d5 0200     		.2byte	0x2
 5793 03d7 39       		.byte	0x39
 5794 03d8 9F       		.byte	0x9f
 5795 03d9 72020000 		.4byte	.LVL48
 5796 03dd 7C020000 		.4byte	.LVL49
 5797 03e1 0200     		.2byte	0x2
 5798 03e3 3A       		.byte	0x3a
 5799 03e4 9F       		.byte	0x9f
 5800 03e5 80020000 		.4byte	.LVL50
 5801 03e9 94020000 		.4byte	.LVL51
 5802 03ed 0200     		.2byte	0x2
 5803 03ef 30       		.byte	0x30
 5804 03f0 9F       		.byte	0x9f
 5805 03f1 94020000 		.4byte	.LVL51
 5806 03f5 96020000 		.4byte	.LVL52
 5807 03f9 0200     		.2byte	0x2
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 126


 5808 03fb 31       		.byte	0x31
 5809 03fc 9F       		.byte	0x9f
 5810 03fd 96020000 		.4byte	.LVL52
 5811 0401 B2020000 		.4byte	.LVL55
 5812 0405 0100     		.2byte	0x1
 5813 0407 52       		.byte	0x52
 5814 0408 00030000 		.4byte	.LVL56
 5815 040c 1A030000 		.4byte	.LVL57
 5816 0410 0200     		.2byte	0x2
 5817 0412 3B       		.byte	0x3b
 5818 0413 9F       		.byte	0x9f
 5819 0414 1A030000 		.4byte	.LVL57
 5820 0418 44030000 		.4byte	.LVL58
 5821 041c 0200     		.2byte	0x2
 5822 041e 3C       		.byte	0x3c
 5823 041f 9F       		.byte	0x9f
 5824 0420 44030000 		.4byte	.LVL58
 5825 0424 62030000 		.4byte	.LVL59
 5826 0428 0200     		.2byte	0x2
 5827 042a 3D       		.byte	0x3d
 5828 042b 9F       		.byte	0x9f
 5829 042c 62030000 		.4byte	.LVL59
 5830 0430 66030000 		.4byte	.LVL60
 5831 0434 0200     		.2byte	0x2
 5832 0436 3B       		.byte	0x3b
 5833 0437 9F       		.byte	0x9f
 5834 0438 66030000 		.4byte	.LVL60
 5835 043c 6A030000 		.4byte	.LVL61
 5836 0440 0200     		.2byte	0x2
 5837 0442 3C       		.byte	0x3c
 5838 0443 9F       		.byte	0x9f
 5839 0444 6A030000 		.4byte	.LVL61
 5840 0448 6C030000 		.4byte	.LVL62
 5841 044c 0200     		.2byte	0x2
 5842 044e 3D       		.byte	0x3d
 5843 044f 9F       		.byte	0x9f
 5844 0450 6C030000 		.4byte	.LVL62
 5845 0454 82030000 		.4byte	.LVL65
 5846 0458 0100     		.2byte	0x1
 5847 045a 52       		.byte	0x52
 5848 045b B8030000 		.4byte	.LVL67
 5849 045f C2030000 		.4byte	.LVL68
 5850 0463 0200     		.2byte	0x2
 5851 0465 30       		.byte	0x30
 5852 0466 9F       		.byte	0x9f
 5853 0467 C2030000 		.4byte	.LVL68
 5854 046b D4030000 		.4byte	.LVL70
 5855 046f 0200     		.2byte	0x2
 5856 0471 31       		.byte	0x31
 5857 0472 9F       		.byte	0x9f
 5858 0473 D4030000 		.4byte	.LVL70
 5859 0477 E6030000 		.4byte	.LVL72
 5860 047b 0200     		.2byte	0x2
 5861 047d 32       		.byte	0x32
 5862 047e 9F       		.byte	0x9f
 5863 047f E6030000 		.4byte	.LVL72
 5864 0483 F8030000 		.4byte	.LVL74
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 127


 5865 0487 0200     		.2byte	0x2
 5866 0489 33       		.byte	0x33
 5867 048a 9F       		.byte	0x9f
 5868 048b F8030000 		.4byte	.LVL74
 5869 048f 00040000 		.4byte	.LVL75
 5870 0493 0200     		.2byte	0x2
 5871 0495 34       		.byte	0x34
 5872 0496 9F       		.byte	0x9f
 5873 0497 00040000 		.4byte	.LVL75
 5874 049b 0E040000 		.4byte	.LVL78
 5875 049f 0200     		.2byte	0x2
 5876 04a1 35       		.byte	0x35
 5877 04a2 9F       		.byte	0x9f
 5878 04a3 0E040000 		.4byte	.LVL78
 5879 04a7 18040000 		.4byte	.LVL79
 5880 04ab 0200     		.2byte	0x2
 5881 04ad 36       		.byte	0x36
 5882 04ae 9F       		.byte	0x9f
 5883 04af 18040000 		.4byte	.LVL79
 5884 04b3 22040000 		.4byte	.LVL80
 5885 04b7 0200     		.2byte	0x2
 5886 04b9 37       		.byte	0x37
 5887 04ba 9F       		.byte	0x9f
 5888 04bb 22040000 		.4byte	.LVL80
 5889 04bf 2C040000 		.4byte	.LVL81
 5890 04c3 0200     		.2byte	0x2
 5891 04c5 38       		.byte	0x38
 5892 04c6 9F       		.byte	0x9f
 5893 04c7 2C040000 		.4byte	.LVL81
 5894 04cb 44040000 		.4byte	.LVL84
 5895 04cf 0200     		.2byte	0x2
 5896 04d1 39       		.byte	0x39
 5897 04d2 9F       		.byte	0x9f
 5898 04d3 44040000 		.4byte	.LVL84
 5899 04d7 56040000 		.4byte	.LVL86
 5900 04db 0200     		.2byte	0x2
 5901 04dd 3A       		.byte	0x3a
 5902 04de 9F       		.byte	0x9f
 5903 04df 56040000 		.4byte	.LVL86
 5904 04e3 68040000 		.4byte	.LVL88
 5905 04e7 0200     		.2byte	0x2
 5906 04e9 3B       		.byte	0x3b
 5907 04ea 9F       		.byte	0x9f
 5908 04eb 68040000 		.4byte	.LVL88
 5909 04ef 78040000 		.4byte	.LVL90
 5910 04f3 0200     		.2byte	0x2
 5911 04f5 3C       		.byte	0x3c
 5912 04f6 9F       		.byte	0x9f
 5913 04f7 78040000 		.4byte	.LVL90
 5914 04fb 8E040000 		.4byte	.LVL91
 5915 04ff 0100     		.2byte	0x1
 5916 0501 53       		.byte	0x53
 5917 0502 3C100000 		.4byte	.LVL305
 5918 0506 40100000 		.4byte	.LVL307
 5919 050a 0200     		.2byte	0x2
 5920 050c 30       		.byte	0x30
 5921 050d 9F       		.byte	0x9f
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 128


 5922 050e 44100000 		.4byte	.LVL309
 5923 0512 48100000 		.4byte	.LVL311
 5924 0516 0200     		.2byte	0x2
 5925 0518 31       		.byte	0x31
 5926 0519 9F       		.byte	0x9f
 5927 051a 48100000 		.4byte	.LVL311
 5928 051e 50100000 		.4byte	.LVL315
 5929 0522 0200     		.2byte	0x2
 5930 0524 34       		.byte	0x34
 5931 0525 9F       		.byte	0x9f
 5932 0526 50100000 		.4byte	.LVL315
 5933 052a 58100000 		.4byte	.LVL319
 5934 052e 0200     		.2byte	0x2
 5935 0530 38       		.byte	0x38
 5936 0531 9F       		.byte	0x9f
 5937 0532 58100000 		.4byte	.LVL319
 5938 0536 5C100000 		.4byte	.LVL321
 5939 053a 0200     		.2byte	0x2
 5940 053c 3A       		.byte	0x3a
 5941 053d 9F       		.byte	0x9f
 5942 053e 5C100000 		.4byte	.LVL321
 5943 0542 64100000 		.4byte	.LVL325
 5944 0546 0100     		.2byte	0x1
 5945 0548 52       		.byte	0x52
 5946 0549 6C100000 		.4byte	.LVL329
 5947 054d 70100000 		.4byte	.LVL331
 5948 0551 0100     		.2byte	0x1
 5949 0553 52       		.byte	0x52
 5950 0554 74100000 		.4byte	.LVL333
 5951 0558 78100000 		.4byte	.LVL334
 5952 055c 0200     		.2byte	0x2
 5953 055e 39       		.byte	0x39
 5954 055f 9F       		.byte	0x9f
 5955 0560 78100000 		.4byte	.LVL334
 5956 0564 7C100000 		.4byte	.LVL335
 5957 0568 0100     		.2byte	0x1
 5958 056a 53       		.byte	0x53
 5959 056b 00000000 		.4byte	0
 5960 056f 00000000 		.4byte	0
 5961              	.LLST12:
 5962 0573 5E000000 		.4byte	.LVL11
 5963 0577 84030000 		.4byte	.LVL66
 5964 057b 0100     		.2byte	0x1
 5965 057d 54       		.byte	0x54
 5966 057e 2C100000 		.4byte	.LVL300
 5967 0582 70100000 		.4byte	.LVL331
 5968 0586 0100     		.2byte	0x1
 5969 0588 54       		.byte	0x54
 5970 0589 00000000 		.4byte	0
 5971 058d 00000000 		.4byte	0
 5972              	.LLST13:
 5973 0591 3E000000 		.4byte	.LVL10
 5974 0595 5E000000 		.4byte	.LVL11
 5975 0599 0200     		.2byte	0x2
 5976 059b 30       		.byte	0x30
 5977 059c 9F       		.byte	0x9f
 5978 059d 94000000 		.4byte	.LVL16
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 129


 5979 05a1 FA010000 		.4byte	.LVL31
 5980 05a5 0100     		.2byte	0x1
 5981 05a7 55       		.byte	0x55
 5982 05a8 FA010000 		.4byte	.LVL31
 5983 05ac 02020000 		.4byte	.LVL32
 5984 05b0 0300     		.2byte	0x3
 5985 05b2 75       		.byte	0x75
 5986 05b3 11       		.sleb128 17
 5987 05b4 9F       		.byte	0x9f
 5988 05b5 02020000 		.4byte	.LVL32
 5989 05b9 06020000 		.4byte	.LVL34
 5990 05bd 0100     		.2byte	0x1
 5991 05bf 55       		.byte	0x55
 5992 05c0 06020000 		.4byte	.LVL34
 5993 05c4 0E020000 		.4byte	.LVL35
 5994 05c8 0400     		.2byte	0x4
 5995 05ca 75       		.byte	0x75
 5996 05cb DA00     		.sleb128 90
 5997 05cd 9F       		.byte	0x9f
 5998 05ce 0E020000 		.4byte	.LVL35
 5999 05d2 24020000 		.4byte	.LVL38
 6000 05d6 0100     		.2byte	0x1
 6001 05d8 55       		.byte	0x55
 6002 05d9 2C020000 		.4byte	.LVL39
 6003 05dd 30020000 		.4byte	.LVL40
 6004 05e1 0100     		.2byte	0x1
 6005 05e3 55       		.byte	0x55
 6006 05e4 38020000 		.4byte	.LVL41
 6007 05e8 6A020000 		.4byte	.LVL47
 6008 05ec 0100     		.2byte	0x1
 6009 05ee 55       		.byte	0x55
 6010 05ef 6A020000 		.4byte	.LVL47
 6011 05f3 72020000 		.4byte	.LVL48
 6012 05f7 0300     		.2byte	0x3
 6013 05f9 75       		.byte	0x75
 6014 05fa 36       		.sleb128 54
 6015 05fb 9F       		.byte	0x9f
 6016 05fc 72020000 		.4byte	.LVL48
 6017 0600 96020000 		.4byte	.LVL52
 6018 0604 0100     		.2byte	0x1
 6019 0606 55       		.byte	0x55
 6020 0607 B2020000 		.4byte	.LVL55
 6021 060b AA040000 		.4byte	.LVL94
 6022 060f 0100     		.2byte	0x1
 6023 0611 55       		.byte	0x55
 6024 0612 34100000 		.4byte	.LVL301
 6025 0616 5C100000 		.4byte	.LVL321
 6026 061a 0100     		.2byte	0x1
 6027 061c 55       		.byte	0x55
 6028 061d 64100000 		.4byte	.LVL325
 6029 0621 80100000 		.4byte	.LVL336
 6030 0625 0100     		.2byte	0x1
 6031 0627 55       		.byte	0x55
 6032 0628 00000000 		.4byte	0
 6033 062c 00000000 		.4byte	0
 6034              	.LLST14:
 6035 0630 3E000000 		.4byte	.LVL10
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 130


 6036 0634 5E000000 		.4byte	.LVL11
 6037 0638 0200     		.2byte	0x2
 6038 063a 30       		.byte	0x30
 6039 063b 9F       		.byte	0x9f
 6040 063c B6000000 		.4byte	.LVL23
 6041 0640 B2010000 		.4byte	.LVL25
 6042 0644 0100     		.2byte	0x1
 6043 0646 50       		.byte	0x50
 6044 0647 B6010000 		.4byte	.LVL26
 6045 064b BC010000 		.4byte	.LVL27
 6046 064f 0200     		.2byte	0x2
 6047 0651 30       		.byte	0x30
 6048 0652 9F       		.byte	0x9f
 6049 0653 BC010000 		.4byte	.LVL27
 6050 0657 F2010000 		.4byte	.LVL29
 6051 065b 0100     		.2byte	0x1
 6052 065d 50       		.byte	0x50
 6053 065e F2010000 		.4byte	.LVL29
 6054 0662 F8010000 		.4byte	.LVL30
 6055 0666 0200     		.2byte	0x2
 6056 0668 30       		.byte	0x30
 6057 0669 9F       		.byte	0x9f
 6058 066a F8010000 		.4byte	.LVL30
 6059 066e 1C020000 		.4byte	.LVL36
 6060 0672 0100     		.2byte	0x1
 6061 0674 50       		.byte	0x50
 6062 0675 20020000 		.4byte	.LVL37
 6063 0679 46020000 		.4byte	.LVL43
 6064 067d 0100     		.2byte	0x1
 6065 067f 50       		.byte	0x50
 6066 0680 52020000 		.4byte	.LVL44
 6067 0684 60020000 		.4byte	.LVL45
 6068 0688 0100     		.2byte	0x1
 6069 068a 50       		.byte	0x50
 6070 068b 68020000 		.4byte	.LVL46
 6071 068f 02040000 		.4byte	.LVL76
 6072 0693 0100     		.2byte	0x1
 6073 0695 50       		.byte	0x50
 6074 0696 0E040000 		.4byte	.LVL78
 6075 069a 2E040000 		.4byte	.LVL82
 6076 069e 0100     		.2byte	0x1
 6077 06a0 50       		.byte	0x50
 6078 06a1 44040000 		.4byte	.LVL84
 6079 06a5 78040000 		.4byte	.LVL90
 6080 06a9 0100     		.2byte	0x1
 6081 06ab 50       		.byte	0x50
 6082 06ac 34100000 		.4byte	.LVL301
 6083 06b0 36100000 		.4byte	.LVL302
 6084 06b4 0100     		.2byte	0x1
 6085 06b6 50       		.byte	0x50
 6086 06b7 38100000 		.4byte	.LVL303
 6087 06bb 3A100000 		.4byte	.LVL304
 6088 06bf 0100     		.2byte	0x1
 6089 06c1 50       		.byte	0x50
 6090 06c2 3C100000 		.4byte	.LVL305
 6091 06c6 3E100000 		.4byte	.LVL306
 6092 06ca 0100     		.2byte	0x1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 131


 6093 06cc 50       		.byte	0x50
 6094 06cd 40100000 		.4byte	.LVL307
 6095 06d1 42100000 		.4byte	.LVL308
 6096 06d5 0100     		.2byte	0x1
 6097 06d7 50       		.byte	0x50
 6098 06d8 44100000 		.4byte	.LVL309
 6099 06dc 46100000 		.4byte	.LVL310
 6100 06e0 0100     		.2byte	0x1
 6101 06e2 50       		.byte	0x50
 6102 06e3 48100000 		.4byte	.LVL311
 6103 06e7 4A100000 		.4byte	.LVL312
 6104 06eb 0100     		.2byte	0x1
 6105 06ed 50       		.byte	0x50
 6106 06ee 4C100000 		.4byte	.LVL313
 6107 06f2 4E100000 		.4byte	.LVL314
 6108 06f6 0100     		.2byte	0x1
 6109 06f8 50       		.byte	0x50
 6110 06f9 50100000 		.4byte	.LVL315
 6111 06fd 52100000 		.4byte	.LVL316
 6112 0701 0100     		.2byte	0x1
 6113 0703 50       		.byte	0x50
 6114 0704 54100000 		.4byte	.LVL317
 6115 0708 56100000 		.4byte	.LVL318
 6116 070c 0100     		.2byte	0x1
 6117 070e 50       		.byte	0x50
 6118 070f 58100000 		.4byte	.LVL319
 6119 0713 5A100000 		.4byte	.LVL320
 6120 0717 0100     		.2byte	0x1
 6121 0719 50       		.byte	0x50
 6122 071a 5C100000 		.4byte	.LVL321
 6123 071e 5E100000 		.4byte	.LVL322
 6124 0722 0100     		.2byte	0x1
 6125 0724 50       		.byte	0x50
 6126 0725 60100000 		.4byte	.LVL323
 6127 0729 62100000 		.4byte	.LVL324
 6128 072d 0100     		.2byte	0x1
 6129 072f 50       		.byte	0x50
 6130 0730 64100000 		.4byte	.LVL325
 6131 0734 66100000 		.4byte	.LVL326
 6132 0738 0100     		.2byte	0x1
 6133 073a 50       		.byte	0x50
 6134 073b 68100000 		.4byte	.LVL327
 6135 073f 6A100000 		.4byte	.LVL328
 6136 0743 0100     		.2byte	0x1
 6137 0745 50       		.byte	0x50
 6138 0746 6C100000 		.4byte	.LVL329
 6139 074a 6E100000 		.4byte	.LVL330
 6140 074e 0100     		.2byte	0x1
 6141 0750 50       		.byte	0x50
 6142 0751 70100000 		.4byte	.LVL331
 6143 0755 72100000 		.4byte	.LVL332
 6144 0759 0100     		.2byte	0x1
 6145 075b 50       		.byte	0x50
 6146 075c 00000000 		.4byte	0
 6147 0760 00000000 		.4byte	0
 6148              	.LLST15:
 6149 0764 DC050000 		.4byte	.LVL107
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 132


 6150 0768 08060000 		.4byte	.LVL111
 6151 076c 0100     		.2byte	0x1
 6152 076e 54       		.byte	0x54
 6153 076f 0A060000 		.4byte	.LVL112
 6154 0773 0C060000 		.4byte	.LVL113
 6155 0777 0100     		.2byte	0x1
 6156 0779 54       		.byte	0x54
 6157 077a 12060000 		.4byte	.LVL114
 6158 077e 16060000 		.4byte	.LVL115
 6159 0782 0100     		.2byte	0x1
 6160 0784 54       		.byte	0x54
 6161 0785 D6060000 		.4byte	.LVL129
 6162 0789 42070000 		.4byte	.LVL133
 6163 078d 0100     		.2byte	0x1
 6164 078f 59       		.byte	0x59
 6165 0790 46070000 		.4byte	.LVL134
 6166 0794 4E070000 		.4byte	.LVL135
 6167 0798 0100     		.2byte	0x1
 6168 079a 59       		.byte	0x59
 6169 079b 5A070000 		.4byte	.LVL136
 6170 079f BA070000 		.4byte	.LVL140
 6171 07a3 0100     		.2byte	0x1
 6172 07a5 54       		.byte	0x54
 6173 07a6 BC070000 		.4byte	.LVL141
 6174 07aa C6070000 		.4byte	.LVL142
 6175 07ae 0100     		.2byte	0x1
 6176 07b0 54       		.byte	0x54
 6177 07b1 D4070000 		.4byte	.LVL143
 6178 07b5 60080000 		.4byte	.LVL148
 6179 07b9 0100     		.2byte	0x1
 6180 07bb 59       		.byte	0x59
 6181 07bc 64080000 		.4byte	.LVL149
 6182 07c0 66080000 		.4byte	.LVL150
 6183 07c4 0100     		.2byte	0x1
 6184 07c6 59       		.byte	0x59
 6185 07c7 6A080000 		.4byte	.LVL151
 6186 07cb 70080000 		.4byte	.LVL152
 6187 07cf 0100     		.2byte	0x1
 6188 07d1 59       		.byte	0x59
 6189 07d2 C0080000 		.4byte	.LVL156
 6190 07d6 DC080000 		.4byte	.LVL157
 6191 07da 0100     		.2byte	0x1
 6192 07dc 53       		.byte	0x53
 6193 07dd DE080000 		.4byte	.LVL158
 6194 07e1 E0080000 		.4byte	.LVL159
 6195 07e5 0100     		.2byte	0x1
 6196 07e7 53       		.byte	0x53
 6197 07e8 E2080000 		.4byte	.LVL160
 6198 07ec E8080000 		.4byte	.LVL161
 6199 07f0 0100     		.2byte	0x1
 6200 07f2 53       		.byte	0x53
 6201 07f3 1C0B0000 		.4byte	.LVL210
 6202 07f7 460B0000 		.4byte	.LVL214
 6203 07fb 0100     		.2byte	0x1
 6204 07fd 55       		.byte	0x55
 6205 07fe 480B0000 		.4byte	.LVL215
 6206 0802 700B0000 		.4byte	.LVL216
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 133


 6207 0806 0100     		.2byte	0x1
 6208 0808 55       		.byte	0x55
 6209 0809 720B0000 		.4byte	.LVL217
 6210 080d 760B0000 		.4byte	.LVL218
 6211 0811 0100     		.2byte	0x1
 6212 0813 55       		.byte	0x55
 6213 0814 00000000 		.4byte	0
 6214 0818 00000000 		.4byte	0
 6215              	.LLST16:
 6216 081c 6A0C0000 		.4byte	.LVL250
 6217 0820 6C0C0000 		.4byte	.LVL251
 6218 0824 0400     		.2byte	0x4
 6219 0826 91       		.byte	0x91
 6220 0827 B87F     		.sleb128 -72
 6221 0829 9F       		.byte	0x9f
 6222 082a 6C0C0000 		.4byte	.LVL251
 6223 082e 730C0000 		.4byte	.LVL252-1
 6224 0832 0100     		.2byte	0x1
 6225 0834 50       		.byte	0x50
 6226 0835 730C0000 		.4byte	.LVL252-1
 6227 0839 9E0C0000 		.4byte	.LVL253
 6228 083d 0400     		.2byte	0x4
 6229 083f 91       		.byte	0x91
 6230 0840 B87F     		.sleb128 -72
 6231 0842 9F       		.byte	0x9f
 6232 0843 9E0C0000 		.4byte	.LVL253
 6233 0847 A30C0000 		.4byte	.LVL254-1
 6234 084b 0100     		.2byte	0x1
 6235 084d 50       		.byte	0x50
 6236 084e A30C0000 		.4byte	.LVL254-1
 6237 0852 C40E0000 		.4byte	.LVL271
 6238 0856 0400     		.2byte	0x4
 6239 0858 91       		.byte	0x91
 6240 0859 B87F     		.sleb128 -72
 6241 085b 9F       		.byte	0x9f
 6242 085c C40E0000 		.4byte	.LVL271
 6243 0860 C70E0000 		.4byte	.LVL272-1
 6244 0864 0100     		.2byte	0x1
 6245 0866 51       		.byte	0x51
 6246 0867 C70E0000 		.4byte	.LVL272-1
 6247 086b CE0E0000 		.4byte	.LVL273
 6248 086f 0400     		.2byte	0x4
 6249 0871 91       		.byte	0x91
 6250 0872 B87F     		.sleb128 -72
 6251 0874 9F       		.byte	0x9f
 6252 0875 CE0E0000 		.4byte	.LVL273
 6253 0879 D10E0000 		.4byte	.LVL274-1
 6254 087d 0100     		.2byte	0x1
 6255 087f 51       		.byte	0x51
 6256 0880 D10E0000 		.4byte	.LVL274-1
 6257 0884 2A0F0000 		.4byte	.LVL281
 6258 0888 0400     		.2byte	0x4
 6259 088a 91       		.byte	0x91
 6260 088b B87F     		.sleb128 -72
 6261 088d 9F       		.byte	0x9f
 6262 088e 2A0F0000 		.4byte	.LVL281
 6263 0892 2D0F0000 		.4byte	.LVL282-1
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 134


 6264 0896 0100     		.2byte	0x1
 6265 0898 51       		.byte	0x51
 6266 0899 2D0F0000 		.4byte	.LVL282-1
 6267 089d 440F0000 		.4byte	.LVL283
 6268 08a1 0400     		.2byte	0x4
 6269 08a3 91       		.byte	0x91
 6270 08a4 B87F     		.sleb128 -72
 6271 08a6 9F       		.byte	0x9f
 6272 08a7 440F0000 		.4byte	.LVL283
 6273 08ab 470F0000 		.4byte	.LVL284-1
 6274 08af 0100     		.2byte	0x1
 6275 08b1 51       		.byte	0x51
 6276 08b2 470F0000 		.4byte	.LVL284-1
 6277 08b6 720F0000 		.4byte	.LVL285
 6278 08ba 0400     		.2byte	0x4
 6279 08bc 91       		.byte	0x91
 6280 08bd B87F     		.sleb128 -72
 6281 08bf 9F       		.byte	0x9f
 6282 08c0 720F0000 		.4byte	.LVL285
 6283 08c4 790F0000 		.4byte	.LVL286-1
 6284 08c8 0100     		.2byte	0x1
 6285 08ca 51       		.byte	0x51
 6286 08cb 790F0000 		.4byte	.LVL286-1
 6287 08cf 8E0F0000 		.4byte	.LVL287
 6288 08d3 0400     		.2byte	0x4
 6289 08d5 91       		.byte	0x91
 6290 08d6 B87F     		.sleb128 -72
 6291 08d8 9F       		.byte	0x9f
 6292 08d9 8E0F0000 		.4byte	.LVL287
 6293 08dd 930F0000 		.4byte	.LVL288-1
 6294 08e1 0100     		.2byte	0x1
 6295 08e3 51       		.byte	0x51
 6296 08e4 930F0000 		.4byte	.LVL288-1
 6297 08e8 2C100000 		.4byte	.LVL300
 6298 08ec 0400     		.2byte	0x4
 6299 08ee 91       		.byte	0x91
 6300 08ef B87F     		.sleb128 -72
 6301 08f1 9F       		.byte	0x9f
 6302 08f2 14110000 		.4byte	.LVL355
 6303 08f6 1E110000 		.4byte	.LVL356
 6304 08fa 0400     		.2byte	0x4
 6305 08fc 91       		.byte	0x91
 6306 08fd B87F     		.sleb128 -72
 6307 08ff 9F       		.byte	0x9f
 6308 0900 00000000 		.4byte	0
 6309 0904 00000000 		.4byte	0
 6310              	.LLST17:
 6311 0908 A8090000 		.4byte	.LVL166
 6312 090c B4090000 		.4byte	.LVL167
 6313 0910 0100     		.2byte	0x1
 6314 0912 50       		.byte	0x50
 6315 0913 B4090000 		.4byte	.LVL167
 6316 0917 8C0B0000 		.4byte	.LVL220
 6317 091b 0300     		.2byte	0x3
 6318 091d 91       		.byte	0x91
 6319 091e AC7F     		.sleb128 -84
 6320 0920 8C0B0000 		.4byte	.LVL220
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 135


 6321 0924 960B0000 		.4byte	.LVL221
 6322 0928 0100     		.2byte	0x1
 6323 092a 50       		.byte	0x50
 6324 092b 960B0000 		.4byte	.LVL221
 6325 092f A60B0000 		.4byte	.LVL226
 6326 0933 0100     		.2byte	0x1
 6327 0935 58       		.byte	0x58
 6328 0936 F4100000 		.4byte	.LVL348
 6329 093a 00110000 		.4byte	.LVL352
 6330 093e 0300     		.2byte	0x3
 6331 0940 91       		.byte	0x91
 6332 0941 AC7F     		.sleb128 -84
 6333 0943 00000000 		.4byte	0
 6334 0947 00000000 		.4byte	0
 6335              	.LLST18:
 6336 094b BC090000 		.4byte	.LVL169
 6337 094f D0090000 		.4byte	.LVL172
 6338 0953 0100     		.2byte	0x1
 6339 0955 50       		.byte	0x50
 6340 0956 D0090000 		.4byte	.LVL172
 6341 095a 020B0000 		.4byte	.LVL207
 6342 095e 0300     		.2byte	0x3
 6343 0960 91       		.byte	0x91
 6344 0961 B07F     		.sleb128 -80
 6345 0963 020B0000 		.4byte	.LVL207
 6346 0967 1C0B0000 		.4byte	.LVL210
 6347 096b 0100     		.2byte	0x1
 6348 096d 50       		.byte	0x50
 6349 096e 1C0B0000 		.4byte	.LVL210
 6350 0972 700B0000 		.4byte	.LVL216
 6351 0976 0300     		.2byte	0x3
 6352 0978 91       		.byte	0x91
 6353 0979 B07F     		.sleb128 -80
 6354 097b 700B0000 		.4byte	.LVL216
 6355 097f 720B0000 		.4byte	.LVL217
 6356 0983 0100     		.2byte	0x1
 6357 0985 50       		.byte	0x50
 6358 0986 720B0000 		.4byte	.LVL217
 6359 098a 9E0B0000 		.4byte	.LVL223
 6360 098e 0300     		.2byte	0x3
 6361 0990 91       		.byte	0x91
 6362 0991 B07F     		.sleb128 -80
 6363 0993 9E0B0000 		.4byte	.LVL223
 6364 0997 A00B0000 		.4byte	.LVL224
 6365 099b 0100     		.2byte	0x1
 6366 099d 50       		.byte	0x50
 6367 099e A00B0000 		.4byte	.LVL224
 6368 09a2 A30B0000 		.4byte	.LVL225-1
 6369 09a6 0100     		.2byte	0x1
 6370 09a8 51       		.byte	0x51
 6371 09a9 F4100000 		.4byte	.LVL348
 6372 09ad FC100000 		.4byte	.LVL350
 6373 09b1 0300     		.2byte	0x3
 6374 09b3 91       		.byte	0x91
 6375 09b4 B07F     		.sleb128 -80
 6376 09b6 FC100000 		.4byte	.LVL350
 6377 09ba FE100000 		.4byte	.LVL351
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 136


 6378 09be 0100     		.2byte	0x1
 6379 09c0 50       		.byte	0x50
 6380 09c1 FE100000 		.4byte	.LVL351
 6381 09c5 00110000 		.4byte	.LVL352
 6382 09c9 0300     		.2byte	0x3
 6383 09cb 91       		.byte	0x91
 6384 09cc B07F     		.sleb128 -80
 6385 09ce 00000000 		.4byte	0
 6386 09d2 00000000 		.4byte	0
 6387              	.LLST19:
 6388 09d6 5C0A0000 		.4byte	.LVL187
 6389 09da 610A0000 		.4byte	.LVL188-1
 6390 09de 0100     		.2byte	0x1
 6391 09e0 50       		.byte	0x50
 6392 09e1 610A0000 		.4byte	.LVL188-1
 6393 09e5 780A0000 		.4byte	.LVL191
 6394 09e9 0100     		.2byte	0x1
 6395 09eb 54       		.byte	0x54
 6396 09ec 960A0000 		.4byte	.LVL196
 6397 09f0 A20A0000 		.4byte	.LVL197
 6398 09f4 0100     		.2byte	0x1
 6399 09f6 50       		.byte	0x50
 6400 09f7 A20A0000 		.4byte	.LVL197
 6401 09fb 020B0000 		.4byte	.LVL207
 6402 09ff 0100     		.2byte	0x1
 6403 0a01 58       		.byte	0x58
 6404 0a02 F8100000 		.4byte	.LVL349
 6405 0a06 FC100000 		.4byte	.LVL350
 6406 0a0a 0100     		.2byte	0x1
 6407 0a0c 54       		.byte	0x54
 6408 0a0d 00000000 		.4byte	0
 6409 0a11 00000000 		.4byte	0
 6410              	.LLST20:
 6411 0a15 A60B0000 		.4byte	.LVL226
 6412 0a19 AA0B0000 		.4byte	.LVL227
 6413 0a1d 0100     		.2byte	0x1
 6414 0a1f 50       		.byte	0x50
 6415 0a20 AA0B0000 		.4byte	.LVL227
 6416 0a24 C80B0000 		.4byte	.LVL232
 6417 0a28 0100     		.2byte	0x1
 6418 0a2a 58       		.byte	0x58
 6419 0a2b 00000000 		.4byte	0
 6420 0a2f 00000000 		.4byte	0
 6421              	.LLST21:
 6422 0a33 C00B0000 		.4byte	.LVL230
 6423 0a37 0C0C0000 		.4byte	.LVL238
 6424 0a3b 0100     		.2byte	0x1
 6425 0a3d 55       		.byte	0x55
 6426 0a3e 00110000 		.4byte	.LVL352
 6427 0a42 08110000 		.4byte	.LVL353
 6428 0a46 0100     		.2byte	0x1
 6429 0a48 55       		.byte	0x55
 6430 0a49 00000000 		.4byte	0
 6431 0a4d 00000000 		.4byte	0
 6432              	.LLST22:
 6433 0a51 A40C0000 		.4byte	.LVL254
 6434 0a55 AE0C0000 		.4byte	.LVL255
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 137


 6435 0a59 0100     		.2byte	0x1
 6436 0a5b 50       		.byte	0x50
 6437 0a5c 00000000 		.4byte	0
 6438 0a60 00000000 		.4byte	0
 6439              	.LLST23:
 6440 0a64 220F0000 		.4byte	.LVL280
 6441 0a68 940F0000 		.4byte	.LVL288
 6442 0a6c 0200     		.2byte	0x2
 6443 0a6e 30       		.byte	0x30
 6444 0a6f 9F       		.byte	0x9f
 6445 0a70 940F0000 		.4byte	.LVL288
 6446 0a74 9C0F0000 		.4byte	.LVL289
 6447 0a78 0100     		.2byte	0x1
 6448 0a7a 50       		.byte	0x50
 6449 0a7b A20F0000 		.4byte	.LVL290
 6450 0a7f A90F0000 		.4byte	.LVL291-1
 6451 0a83 0100     		.2byte	0x1
 6452 0a85 50       		.byte	0x50
 6453 0a86 00000000 		.4byte	0
 6454 0a8a 00000000 		.4byte	0
 6455              		.section	.debug_aranges,"",%progbits
 6456 0000 2C000000 		.4byte	0x2c
 6457 0004 0200     		.2byte	0x2
 6458 0006 00000000 		.4byte	.Ldebug_info0
 6459 000a 04       		.byte	0x4
 6460 000b 00       		.byte	0
 6461 000c 0000     		.2byte	0
 6462 000e 0000     		.2byte	0
 6463 0010 00000000 		.4byte	.LFB63
 6464 0014 28000000 		.4byte	.LFE63-.LFB63
 6465 0018 00000000 		.4byte	.LFB64
 6466 001c 14000000 		.4byte	.LFE64-.LFB64
 6467 0020 00000000 		.4byte	.LFB65
 6468 0024 24110000 		.4byte	.LFE65-.LFB65
 6469 0028 00000000 		.4byte	0
 6470 002c 00000000 		.4byte	0
 6471              		.section	.debug_ranges,"",%progbits
 6472              	.Ldebug_ranges0:
 6473 0000 60090000 		.4byte	.LBB2
 6474 0004 380C0000 		.4byte	.LBE2
 6475 0008 3E0C0000 		.4byte	.LBB7
 6476 000c 420C0000 		.4byte	.LBE7
 6477 0010 EC100000 		.4byte	.LBB10
 6478 0014 10110000 		.4byte	.LBE10
 6479 0018 00000000 		.4byte	0
 6480 001c 00000000 		.4byte	0
 6481 0020 C8090000 		.4byte	.LBB3
 6482 0024 000B0000 		.4byte	.LBE3
 6483 0028 F4100000 		.4byte	.LBB5
 6484 002c FC100000 		.4byte	.LBE5
 6485 0030 00000000 		.4byte	0
 6486 0034 00000000 		.4byte	0
 6487 0038 020B0000 		.4byte	.LBB4
 6488 003c 0C0C0000 		.4byte	.LBE4
 6489 0040 FC100000 		.4byte	.LBB6
 6490 0044 08110000 		.4byte	.LBE6
 6491 0048 00000000 		.4byte	0
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 138


 6492 004c 00000000 		.4byte	0
 6493 0050 760C0000 		.4byte	.LBB8
 6494 0054 B60C0000 		.4byte	.LBE8
 6495 0058 14110000 		.4byte	.LBB11
 6496 005c 1C110000 		.4byte	.LBE11
 6497 0060 00000000 		.4byte	0
 6498 0064 00000000 		.4byte	0
 6499 0068 00000000 		.4byte	.LFB63
 6500 006c 28000000 		.4byte	.LFE63
 6501 0070 00000000 		.4byte	.LFB64
 6502 0074 14000000 		.4byte	.LFE64
 6503 0078 00000000 		.4byte	.LFB65
 6504 007c 24110000 		.4byte	.LFE65
 6505 0080 00000000 		.4byte	0
 6506 0084 00000000 		.4byte	0
 6507              		.section	.debug_line,"",%progbits
 6508              	.Ldebug_line0:
 6509 0000 53060000 		.section	.debug_str,"MS",%progbits,1
 6509      02008602 
 6509      00000201 
 6509      FB0E0D00 
 6509      01010101 
 6510              	.LASF25:
 6511 0000 70756C73 		.ascii	"pulse_microseconds\000"
 6511      655F6D69 
 6511      63726F73 
 6511      65636F6E 
 6511      647300
 6512              	.LASF61:
 6513 0013 64697374 		.ascii	"distance\000"
 6513      616E6365 
 6513      00
 6514              	.LASF130:
 6515 001c 72656164 		.ascii	"read_float\000"
 6515      5F666C6F 
 6515      617400
 6516              	.LASF65:
 6517 0027 70726F67 		.ascii	"program_flow\000"
 6517      72616D5F 
 6517      666C6F77 
 6517      00
 6518              	.LASF34:
 6519 0034 666C6167 		.ascii	"flags\000"
 6519      7300
 6520              	.LASF100:
 6521 003a 706C5F64 		.ascii	"pl_data\000"
 6521      61746100 
 6522              	.LASF29:
 6523 0042 73746174 		.ascii	"status_report_mask\000"
 6523      75735F72 
 6523      65706F72 
 6523      745F6D61 
 6523      736B00
 6524              	.LASF12:
 6525 0055 756E7369 		.ascii	"unsigned int\000"
 6525      676E6564 
 6525      20696E74 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 139


 6525      00
 6526              	.LASF90:
 6527 0062 76616C75 		.ascii	"value_words\000"
 6527      655F776F 
 6527      72647300 
 6528              	.LASF145:
 6529 006e 67636F64 		.ascii	"gcode.c\000"
 6529      652E6300 
 6530              	.LASF49:
 6531 0076 725F6F76 		.ascii	"r_override\000"
 6531      65727269 
 6531      646500
 6532              	.LASF7:
 6533 0081 5F5F696E 		.ascii	"__int32_t\000"
 6533      7433325F 
 6533      7400
 6534              	.LASF121:
 6535 008b 73797374 		.ascii	"system_convert_array_steps_to_mpos\000"
 6535      656D5F63 
 6535      6F6E7665 
 6535      72745F61 
 6535      72726179 
 6536              	.LASF110:
 6537 00ae 7379735F 		.ascii	"sys_probe_state\000"
 6537      70726F62 
 6537      655F7374 
 6537      61746500 
 6538              	.LASF125:
 6539 00be 6879706F 		.ascii	"hypot_f\000"
 6539      745F6600 
 6540              	.LASF143:
 6541 00c6 7265706F 		.ascii	"report_feedback_message\000"
 6541      72745F66 
 6541      65656462 
 6541      61636B5F 
 6541      6D657373 
 6542              	.LASF97:
 6543 00de 6D616E74 		.ascii	"mantissa\000"
 6543      69737361 
 6543      00
 6544              	.LASF28:
 6545 00e7 73746570 		.ascii	"stepper_idle_lock_time\000"
 6545      7065725F 
 6545      69646C65 
 6545      5F6C6F63 
 6545      6B5F7469 
 6546              	.LASF70:
 6547 00fe 6D6F6461 		.ascii	"modal\000"
 6547      6C00
 6548              	.LASF31:
 6549 0104 6172635F 		.ascii	"arc_tolerance\000"
 6549      746F6C65 
 6549      72616E63 
 6549      6500
 6550              	.LASF86:
 6551 0112 61786973 		.ascii	"axis_linear\000"
 6551      5F6C696E 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 140


 6551      65617200 
 6552              	.LASF67:
 6553 011e 7370696E 		.ascii	"spindle\000"
 6553      646C6500 
 6554              	.LASF136:
 6555 0126 73657474 		.ascii	"settings_write_coord_data\000"
 6555      696E6773 
 6555      5F777269 
 6555      74655F63 
 6555      6F6F7264 
 6556              	.LASF23:
 6557 0140 61636365 		.ascii	"acceleration\000"
 6557      6C657261 
 6557      74696F6E 
 6557      00
 6558              	.LASF37:
 6559 014d 686F6D69 		.ascii	"homing_seek_rate\000"
 6559      6E675F73 
 6559      65656B5F 
 6559      72617465 
 6559      00
 6560              	.LASF36:
 6561 015e 686F6D69 		.ascii	"homing_feed_rate\000"
 6561      6E675F66 
 6561      6565645F 
 6561      72617465 
 6561      00
 6562              	.LASF0:
 6563 016f 666C6F61 		.ascii	"float\000"
 6563      7400
 6564              	.LASF124:
 6565 0175 73717274 		.ascii	"sqrt\000"
 6565      00
 6566              	.LASF120:
 6567 017a 7265706F 		.ascii	"report_status_message\000"
 6567      72745F73 
 6567      74617475 
 6567      735F6D65 
 6567      73736167 
 6568              	.LASF58:
 6569 0190 706C616E 		.ascii	"plan_line_data_t\000"
 6569      5F6C696E 
 6569      655F6461 
 6569      74615F74 
 6569      00
 6570              	.LASF88:
 6571 01a1 696A6B5F 		.ascii	"ijk_words\000"
 6571      776F7264 
 6571      7300
 6572              	.LASF11:
 6573 01ab 6C6F6E67 		.ascii	"long long unsigned int\000"
 6573      206C6F6E 
 6573      6720756E 
 6573      7369676E 
 6573      65642069 
 6574              	.LASF48:
 6575 01c2 665F6F76 		.ascii	"f_override\000"
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 141


 6575      65727269 
 6575      646500
 6576              	.LASF140:
 6577 01cd 70726F74 		.ascii	"protocol_execute_realtime\000"
 6577      6F636F6C 
 6577      5F657865 
 6577      63757465 
 6577      5F726561 
 6578              	.LASF5:
 6579 01e7 5F5F7569 		.ascii	"__uint16_t\000"
 6579      6E743136 
 6579      5F7400
 6580              	.LASF51:
 6581 01f2 7370696E 		.ascii	"spindle_stop_ovr\000"
 6581      646C655F 
 6581      73746F70 
 6581      5F6F7672 
 6581      00
 6582              	.LASF95:
 6583 0203 76616C75 		.ascii	"value\000"
 6583      6500
 6584              	.LASF42:
 6585 0209 61626F72 		.ascii	"abort\000"
 6585      7400
 6586              	.LASF66:
 6587 020f 636F6F6C 		.ascii	"coolant\000"
 6587      616E7400 
 6588              	.LASF63:
 6589 0217 746F6F6C 		.ascii	"tool_length\000"
 6589      5F6C656E 
 6589      67746800 
 6590              	.LASF39:
 6591 0223 686F6D69 		.ascii	"homing_pulloff\000"
 6591      6E675F70 
 6591      756C6C6F 
 6591      666600
 6592              	.LASF71:
 6593 0232 746F6F6C 		.ascii	"tool\000"
 6593      00
 6594              	.LASF18:
 6595 0237 73697A65 		.ascii	"size_t\000"
 6595      5F7400
 6596              	.LASF117:
 6597 023e 65786563 		.ascii	"exec_lcd_status\000"
 6597      5F6C6364 
 6597      5F737461 
 6597      74757300 
 6598              	.LASF118:
 6599 024e 67635F62 		.ascii	"gc_block\000"
 6599      6C6F636B 
 6599      00
 6600              	.LASF43:
 6601 0257 73757370 		.ascii	"suspend\000"
 6601      656E6400 
 6602              	.LASF62:
 6603 025f 706C616E 		.ascii	"plane_select\000"
 6603      655F7365 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 142


 6603      6C656374 
 6603      00
 6604              	.LASF94:
 6605 026c 6C657474 		.ascii	"letter\000"
 6605      657200
 6606              	.LASF127:
 6607 0273 6D635F6C 		.ascii	"mc_line\000"
 6607      696E6500 
 6608              	.LASF111:
 6609 027b 7379735F 		.ascii	"sys_rt_exec_state\000"
 6609      72745F65 
 6609      7865635F 
 6609      73746174 
 6609      6500
 6610              	.LASF141:
 6611 028d 7370696E 		.ascii	"spindle_set_state\000"
 6611      646C655F 
 6611      7365745F 
 6611      73746174 
 6611      6500
 6612              	.LASF129:
 6613 029f 6D635F70 		.ascii	"mc_probe_cycle\000"
 6613      726F6265 
 6613      5F637963 
 6613      6C6500
 6614              	.LASF142:
 6615 02ae 636F6F6C 		.ascii	"coolant_set_state\000"
 6615      616E745F 
 6615      7365745F 
 6615      73746174 
 6615      6500
 6616              	.LASF64:
 6617 02c0 636F6F72 		.ascii	"coord_select\000"
 6617      645F7365 
 6617      6C656374 
 6617      00
 6618              	.LASF115:
 6619 02cd 7379735F 		.ascii	"sys_rt_exec_debug\000"
 6619      72745F65 
 6619      7865635F 
 6619      64656275 
 6619      6700
 6620              	.LASF146:
 6621 02df 433A5C55 		.ascii	"C:\\Users\\Bart\\Dropbox\\PSoC\\PSoC_Grbl\\PSoC_Grb"
 6621      73657273 
 6621      5C426172 
 6621      745C4472 
 6621      6F70626F 
 6622 030c 6C2E6379 		.ascii	"l.cydsn\000"
 6622      64736E00 
 6623              	.LASF107:
 6624 0314 73657474 		.ascii	"settings\000"
 6624      696E6773 
 6624      00
 6625              	.LASF24:
 6626 031d 6D61785F 		.ascii	"max_travel\000"
 6626      74726176 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 143


 6626      656C00
 6627              	.LASF17:
 6628 0328 63686172 		.ascii	"char\000"
 6628      00
 6629              	.LASF76:
 6630 032d 746F6F6C 		.ascii	"tool_length_offset\000"
 6630      5F6C656E 
 6630      6774685F 
 6630      6F666673 
 6630      657400
 6631              	.LASF32:
 6632 0340 72706D5F 		.ascii	"rpm_max\000"
 6632      6D617800 
 6633              	.LASF102:
 6634 0348 74617267 		.ascii	"target_r\000"
 6634      65745F72 
 6634      00
 6635              	.LASF54:
 6636 0351 7370696E 		.ascii	"spindle_speed\000"
 6636      646C655F 
 6636      73706565 
 6636      6400
 6637              	.LASF105:
 6638 035f 67635F75 		.ascii	"gc_update_pos\000"
 6638      70646174 
 6638      655F706F 
 6638      7300
 6639              	.LASF52:
 6640 036d 7265706F 		.ascii	"report_ovr_counter\000"
 6640      72745F6F 
 6640      76725F63 
 6640      6F756E74 
 6640      657200
 6641              	.LASF82:
 6642 0380 67635F73 		.ascii	"gc_sync_position\000"
 6642      796E635F 
 6642      706F7369 
 6642      74696F6E 
 6642      00
 6643              	.LASF92:
 6644 0391 776F7264 		.ascii	"word_bit\000"
 6644      5F626974 
 6644      00
 6645              	.LASF69:
 6646 039a 67635F76 		.ascii	"gc_values_t\000"
 6646      616C7565 
 6646      735F7400 
 6647              	.LASF50:
 6648 03a6 7370696E 		.ascii	"spindle_speed_ovr\000"
 6648      646C655F 
 6648      73706565 
 6648      645F6F76 
 6648      7200
 6649              	.LASF13:
 6650 03b8 75696E74 		.ascii	"uint8_t\000"
 6650      385F7400 
 6651              	.LASF104:
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 144


 6652 03c0 73746174 		.ascii	"status\000"
 6652      757300
 6653              	.LASF77:
 6654 03c7 70617273 		.ascii	"parser_state_t\000"
 6654      65725F73 
 6654      74617465 
 6654      5F7400
 6655              	.LASF91:
 6656 03d6 67635F70 		.ascii	"gc_parser_flags\000"
 6656      61727365 
 6656      725F666C 
 6656      61677300 
 6657              	.LASF103:
 6658 03e6 64656C74 		.ascii	"delta_r\000"
 6658      615F7200 
 6659              	.LASF139:
 6660 03ee 73797374 		.ascii	"system_set_exec_state_flag\000"
 6660      656D5F73 
 6660      65745F65 
 6660      7865635F 
 6660      73746174 
 6661              	.LASF10:
 6662 0409 6C6F6E67 		.ascii	"long long int\000"
 6662      206C6F6E 
 6662      6720696E 
 6662      7400
 6663              	.LASF109:
 6664 0417 7379735F 		.ascii	"sys_probe_position\000"
 6664      70726F62 
 6664      655F706F 
 6664      73697469 
 6664      6F6E00
 6665              	.LASF81:
 6666 042a 67635F69 		.ascii	"gc_init\000"
 6666      6E697400 
 6667              	.LASF74:
 6668 0432 636F6F72 		.ascii	"coord_system\000"
 6668      645F7379 
 6668      7374656D 
 6668      00
 6669              	.LASF138:
 6670 043f 70726F74 		.ascii	"protocol_buffer_synchronize\000"
 6670      6F636F6C 
 6670      5F627566 
 6670      6665725F 
 6670      73796E63 
 6671              	.LASF21:
 6672 045b 73746570 		.ascii	"steps_per_mm\000"
 6672      735F7065 
 6672      725F6D6D 
 6672      00
 6673              	.LASF119:
 6674 0468 6D656D73 		.ascii	"memset\000"
 6674      657400
 6675              	.LASF72:
 6676 046f 6C696E65 		.ascii	"line_number\000"
 6676      5F6E756D 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 145


 6676      62657200 
 6677              	.LASF116:
 6678 047b 67635F73 		.ascii	"gc_state\000"
 6678      74617465 
 6678      00
 6679              	.LASF79:
 6680 0484 76616C75 		.ascii	"values\000"
 6680      657300
 6681              	.LASF108:
 6682 048b 7379735F 		.ascii	"sys_position\000"
 6682      706F7369 
 6682      74696F6E 
 6682      00
 6683              	.LASF147:
 6684 0498 67635F65 		.ascii	"gc_execute_line\000"
 6684      78656375 
 6684      74655F6C 
 6684      696E6500 
 6685              	.LASF78:
 6686 04a8 6E6F6E5F 		.ascii	"non_modal_command\000"
 6686      6D6F6461 
 6686      6C5F636F 
 6686      6D6D616E 
 6686      6400
 6687              	.LASF26:
 6688 04ba 73746570 		.ascii	"step_invert_mask\000"
 6688      5F696E76 
 6688      6572745F 
 6688      6D61736B 
 6688      00
 6689              	.LASF20:
 6690 04cb 6C6F6E67 		.ascii	"long double\000"
 6690      20646F75 
 6690      626C6500 
 6691              	.LASF14:
 6692 04d7 75696E74 		.ascii	"uint16_t\000"
 6692      31365F74 
 6692      00
 6693              	.LASF22:
 6694 04e0 6D61785F 		.ascii	"max_rate\000"
 6694      72617465 
 6694      00
 6695              	.LASF113:
 6696 04e9 7379735F 		.ascii	"sys_rt_exec_motion_override\000"
 6696      72745F65 
 6696      7865635F 
 6696      6D6F7469 
 6696      6F6E5F6F 
 6697              	.LASF45:
 6698 0505 73746570 		.ascii	"step_control\000"
 6698      5F636F6E 
 6698      74726F6C 
 6698      00
 6699              	.LASF3:
 6700 0512 73686F72 		.ascii	"short int\000"
 6700      7420696E 
 6700      7400
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 146


 6701              	.LASF8:
 6702 051c 6C6F6E67 		.ascii	"long int\000"
 6702      20696E74 
 6702      00
 6703              	.LASF106:
 6704 0525 49544D5F 		.ascii	"ITM_RxBuffer\000"
 6704      52784275 
 6704      66666572 
 6704      00
 6705              	.LASF55:
 6706 0532 73797374 		.ascii	"system_t\000"
 6706      656D5F74 
 6706      00
 6707              	.LASF56:
 6708 053b 66656564 		.ascii	"feed_rate\000"
 6708      5F726174 
 6708      6500
 6709              	.LASF53:
 6710 0545 7265706F 		.ascii	"report_wco_counter\000"
 6710      72745F77 
 6710      636F5F63 
 6710      6F756E74 
 6710      657200
 6711              	.LASF96:
 6712 0558 696E745F 		.ascii	"int_value\000"
 6712      76616C75 
 6712      6500
 6713              	.LASF89:
 6714 0562 636F6D6D 		.ascii	"command_words\000"
 6714      616E645F 
 6714      776F7264 
 6714      7300
 6715              	.LASF44:
 6716 0570 736F6674 		.ascii	"soft_limit\000"
 6716      5F6C696D 
 6716      697400
 6717              	.LASF123:
 6718 057b 6D656D63 		.ascii	"memcmp\000"
 6718      6D7000
 6719              	.LASF4:
 6720 0582 5F5F7569 		.ascii	"__uint8_t\000"
 6720      6E74385F 
 6720      7400
 6721              	.LASF46:
 6722 058c 70726F62 		.ascii	"probe_succeeded\000"
 6722      655F7375 
 6722      63636565 
 6722      64656400 
 6723              	.LASF114:
 6724 059c 7379735F 		.ascii	"sys_rt_exec_accessory_override\000"
 6724      72745F65 
 6724      7865635F 
 6724      61636365 
 6724      73736F72 
 6725              	.LASF98:
 6726 05bb 626C6F63 		.ascii	"block_coord_system\000"
 6726      6B5F636F 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 147


 6726      6F72645F 
 6726      73797374 
 6726      656D00
 6727              	.LASF80:
 6728 05ce 70617273 		.ascii	"parser_block_t\000"
 6728      65725F62 
 6728      6C6F636B 
 6728      5F7400
 6729              	.LASF59:
 6730 05dd 6D6F7469 		.ascii	"motion\000"
 6730      6F6E00
 6731              	.LASF19:
 6732 05e4 73697A65 		.ascii	"sizetype\000"
 6732      74797065 
 6732      00
 6733              	.LASF9:
 6734 05ed 6C6F6E67 		.ascii	"long unsigned int\000"
 6734      20756E73 
 6734      69676E65 
 6734      6420696E 
 6734      7400
 6735              	.LASF137:
 6736 05ff 73797374 		.ascii	"system_flag_wco_change\000"
 6736      656D5F66 
 6736      6C61675F 
 6736      77636F5F 
 6736      6368616E 
 6737              	.LASF15:
 6738 0616 696E7433 		.ascii	"int32_t\000"
 6738      325F7400 
 6739              	.LASF75:
 6740 061e 636F6F72 		.ascii	"coord_offset\000"
 6740      645F6F66 
 6740      66736574 
 6740      00
 6741              	.LASF84:
 6742 062b 61786973 		.ascii	"axis_0\000"
 6742      5F3000
 6743              	.LASF85:
 6744 0632 61786973 		.ascii	"axis_1\000"
 6744      5F3100
 6745              	.LASF126:
 6746 0639 6A6F675F 		.ascii	"jog_execute\000"
 6746      65786563 
 6746      75746500 
 6747              	.LASF99:
 6748 0645 706C616E 		.ascii	"plan_data\000"
 6748      5F646174 
 6748      6100
 6749              	.LASF2:
 6750 064f 756E7369 		.ascii	"unsigned char\000"
 6750      676E6564 
 6750      20636861 
 6750      7200
 6751              	.LASF144:
 6752 065d 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 6752      4320342E 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 148


 6752      392E3320 
 6752      32303135 
 6752      30333033 
 6753 0690 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 6753      20726576 
 6753      6973696F 
 6753      6E203232 
 6753      31323230 
 6754 06c3 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 6754      66756E63 
 6754      74696F6E 
 6754      2D736563 
 6754      74696F6E 
 6755              	.LASF148:
 6756 06eb 6C696E65 		.ascii	"line\000"
 6756      00
 6757              	.LASF135:
 6758 06f0 6D635F64 		.ascii	"mc_dwell\000"
 6758      77656C6C 
 6758      00
 6759              	.LASF133:
 6760 06f9 7370696E 		.ascii	"spindle_sync\000"
 6760      646C655F 
 6760      73796E63 
 6760      00
 6761              	.LASF128:
 6762 0706 6D635F61 		.ascii	"mc_arc\000"
 6762      726300
 6763              	.LASF41:
 6764 070d 73746174 		.ascii	"state\000"
 6764      6500
 6765              	.LASF132:
 6766 0713 726F756E 		.ascii	"round\000"
 6766      6400
 6767              	.LASF112:
 6768 0719 7379735F 		.ascii	"sys_rt_exec_alarm\000"
 6768      72745F65 
 6768      7865635F 
 6768      616C6172 
 6768      6D00
 6769              	.LASF68:
 6770 072b 67635F6D 		.ascii	"gc_modal_t\000"
 6770      6F64616C 
 6770      5F7400
 6771              	.LASF83:
 6772 0736 61786973 		.ascii	"axis_command\000"
 6772      5F636F6D 
 6772      6D616E64 
 6772      00
 6773              	.LASF60:
 6774 0743 756E6974 		.ascii	"units\000"
 6774      7300
 6775              	.LASF131:
 6776 0749 7472756E 		.ascii	"trunc\000"
 6776      6300
 6777              	.LASF1:
 6778 074f 7369676E 		.ascii	"signed char\000"
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 149


 6778      65642063 
 6778      68617200 
 6779              	.LASF38:
 6780 075b 686F6D69 		.ascii	"homing_debounce_delay\000"
 6780      6E675F64 
 6780      65626F75 
 6780      6E63655F 
 6780      64656C61 
 6781              	.LASF6:
 6782 0771 73686F72 		.ascii	"short unsigned int\000"
 6782      7420756E 
 6782      7369676E 
 6782      65642069 
 6782      6E7400
 6783              	.LASF33:
 6784 0784 72706D5F 		.ascii	"rpm_min\000"
 6784      6D696E00 
 6785              	.LASF40:
 6786 078c 73657474 		.ascii	"settings_t\000"
 6786      696E6773 
 6786      5F7400
 6787              	.LASF101:
 6788 0797 685F7832 		.ascii	"h_x2_div_d\000"
 6788      5F646976 
 6788      5F6400
 6789              	.LASF134:
 6790 07a2 636F6F6C 		.ascii	"coolant_sync\000"
 6790      616E745F 
 6790      73796E63 
 6790      00
 6791              	.LASF87:
 6792 07af 61786973 		.ascii	"axis_words\000"
 6792      5F776F72 
 6792      647300
 6793              	.LASF16:
 6794 07ba 646F7562 		.ascii	"double\000"
 6794      6C6500
 6795              	.LASF35:
 6796 07c1 686F6D69 		.ascii	"homing_dir_mask\000"
 6796      6E675F64 
 6796      69725F6D 
 6796      61736B00 
 6797              	.LASF30:
 6798 07d1 6A756E63 		.ascii	"junction_deviation\000"
 6798      74696F6E 
 6798      5F646576 
 6798      69617469 
 6798      6F6E00
 6799              	.LASF122:
 6800 07e4 73657474 		.ascii	"settings_read_coord_data\000"
 6800      696E6773 
 6800      5F726561 
 6800      645F636F 
 6800      6F72645F 
 6801              	.LASF47:
 6802 07fd 686F6D69 		.ascii	"homing_axis_lock\000"
 6802      6E675F61 
ARM GAS  C:\Users\Bart\AppData\Local\Temp\cchzgjxP.s 			page 150


 6802      7869735F 
 6802      6C6F636B 
 6802      00
 6803              	.LASF57:
 6804 080e 636F6E64 		.ascii	"condition\000"
 6804      6974696F 
 6804      6E00
 6805              	.LASF93:
 6806 0818 63686172 		.ascii	"char_counter\000"
 6806      5F636F75 
 6806      6E746572 
 6806      00
 6807              	.LASF73:
 6808 0825 706F7369 		.ascii	"position\000"
 6808      74696F6E 
 6808      00
 6809              	.LASF27:
 6810 082e 6469725F 		.ascii	"dir_invert_mask\000"
 6810      696E7665 
 6810      72745F6D 
 6810      61736B00 
 6811              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
